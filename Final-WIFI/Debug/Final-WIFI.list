
Final-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032fc  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d0  080037d0  0002011c  2**0
                  CONTENTS
  4 .ARM          00000000  080037d0  080037d0  0002011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037d0  080037d0  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080037d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000011c  080038f4  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000025c  080038f4  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003531  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d13  00000000  00000000  00023676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00024390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000338  00000000  00000000  00024760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c9e  00000000  00000000  00024a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000327c  00000000  00000000  00027736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b17e  00000000  00000000  0002a9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00035b30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000143c  00000000  00000000  00035b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000011c 	.word	0x2000011c
 800014c:	00000000 	.word	0x00000000
 8000150:	08003414 	.word	0x08003414

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000120 	.word	0x20000120
 800016c:	08003414 	.word	0x08003414

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2iz>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d215      	bcs.n	8000952 <__aeabi_d2iz+0x36>
 8000926:	d511      	bpl.n	800094c <__aeabi_d2iz+0x30>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d912      	bls.n	8000958 <__aeabi_d2iz+0x3c>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000942:	fa23 f002 	lsr.w	r0, r3, r2
 8000946:	bf18      	it	ne
 8000948:	4240      	negne	r0, r0
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000956:	d105      	bne.n	8000964 <__aeabi_d2iz+0x48>
 8000958:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800095c:	bf08      	it	eq
 800095e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <HESP_INIT>:
};

static void ESP_TimeOutAlarm(void);

void HESP_INIT(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af02      	add	r7, sp, #8
	MSYSTICK_stderrorInit(AHB_DIV_8);
 8000972:	2000      	movs	r0, #0
 8000974:	f000 fd42 	bl	80013fc <MSYSTICK_stderrorInit>
	RCC_EnablePeripheralClk(ESP_GPIO_BUS_PER);
 8000978:	2102      	movs	r1, #2
 800097a:	2002      	movs	r0, #2
 800097c:	f000 fcf6 	bl	800136c <RCC_EnablePeripheralClk>
	MGPIO_stderrorPinModeSelect(ESP_PORT,ESP_TX_PIN,ALTFUN_PUSH_PULL_SPEED_50MHZ);
 8000980:	220b      	movs	r2, #11
 8000982:	2109      	movs	r1, #9
 8000984:	2000      	movs	r0, #0
 8000986:	f000 f91f 	bl	8000bc8 <MGPIO_stderrorPinModeSelect>
	MGPIO_stderrorPinModeSelect(ESP_PORT,ESP_RX_PIN,ALTFUN_PUSH_PULL_SPEED_50MHZ);
 800098a:	220b      	movs	r2, #11
 800098c:	210a      	movs	r1, #10
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f91a 	bl	8000bc8 <MGPIO_stderrorPinModeSelect>

#if USE_OF_RESET_PIN == 1
	MGPIO_stderrorPinModeSelect(ESP_PORT,ESP_RESET_PIN,OUTPUT_PUSH_PULL_SPEED_50MHZ);
 8000994:	2203      	movs	r2, #3
 8000996:	2101      	movs	r1, #1
 8000998:	2000      	movs	r0, #0
 800099a:	f000 f915 	bl	8000bc8 <MGPIO_stderrorPinModeSelect>
#endif

	RCC_EnablePeripheralClk(ESP_UART_BUS,ESP_UART_EN_PER);
 800099e:	210e      	movs	r1, #14
 80009a0:	2002      	movs	r0, #2
 80009a2:	f000 fce3 	bl	800136c <RCC_EnablePeripheralClk>
	HESP_voidInterruptDisable();
 80009a6:	f000 f8e1 	bl	8000b6c <HESP_voidInterruptDisable>
	HESP_RESET();
 80009aa:	f000 f80d 	bl	80009c8 <HESP_RESET>
	MUART_voidInit(ESP_UART_NUMBER,ESP_BAUDRATE,ESP_UART_PARITY,ESP_UART_STOPBIT,ESP_UART_WORDSIZE);
 80009ae:	2300      	movs	r3, #0
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	2202      	movs	r2, #2
 80009b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fdd0 	bl	8001560 <MUART_voidInit>

}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HESP_RESET>:

void HESP_RESET(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
#if USE_OF_RESET_PIN == 1
	/******Hardware Reset*******/

	MGPIO_stderrorSetPinValue(ESP_PORT,ESP_RESET_PIN,LOW);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2101      	movs	r1, #1
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 fa43 	bl	8000e5c <MGPIO_stderrorSetPinValue>
	ESP_Delay_ms(100);
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <HESP_RESET+0x28>)
 80009d8:	f000 fd38 	bl	800144c <MSYSTICK_stderrorSetBusyWait>
	MGPIO_stderrorSetPinValue(ESP_PORT,ESP_RESET_PIN,HIGH);
 80009dc:	2201      	movs	r2, #1
 80009de:	2101      	movs	r1, #1
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 fa3b 	bl	8000e5c <MGPIO_stderrorSetPinValue>
	ESP_Delay_ms(1500);
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <HESP_RESET+0x2c>)
 80009e8:	f000 fd30 	bl	800144c <MSYSTICK_stderrorSetBusyWait>
	/******Software Reset*******/
	HESP_SEND_COMMAND("AT+RST",NULL_POINTER,20000);

#endif

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	006ddd00 	.word	0x006ddd00
 80009f4:	066ff300 	.word	0x066ff300

080009f8 <HESP_SEND_COMMAND>:

ESP_ERR_T HESP_SEND_COMMAND(const char * Copy_pu8Command,  char * Copy_pu8Response, u32 timeout )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	u32 L_u32Count = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
	u8 	L_u8KeysCounter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	74fb      	strb	r3, [r7, #19]
	u8 	L_u8Keyslength = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	747b      	strb	r3, [r7, #17]
	u8 L_u8Interrupt_status =  0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	743b      	strb	r3, [r7, #16]
	ESP_ERR_T L_errStatus = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	74bb      	strb	r3, [r7, #18]
	ISTimeOut = ESP_OK;
 8000a18:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <HESP_SEND_COMMAND+0x12c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
	L_u32TimeOutCounter = timeout;
 8000a1e:	4a42      	ldr	r2, [pc, #264]	; (8000b28 <HESP_SEND_COMMAND+0x130>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6013      	str	r3, [r2, #0]


	/*******Sending Command********/
	while('\0' != Copy_pu8Command[L_u32Count] )
 8000a24:	e00a      	b.n	8000a3c <HESP_SEND_COMMAND+0x44>
	{
		MUART_voidTransimit(ESP_UART_NUMBER,Copy_pu8Command[L_u32Count++]);
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	617a      	str	r2, [r7, #20]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	4619      	mov	r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fe1c 	bl	8001674 <MUART_voidTransimit>
	while('\0' != Copy_pu8Command[L_u32Count] )
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1ee      	bne.n	8000a26 <HESP_SEND_COMMAND+0x2e>
	}

	L_u32Count = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
	if(NULL_POINTER != Copy_pu8Response)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d062      	beq.n	8000b18 <HESP_SEND_COMMAND+0x120>
	{
		/******Recieving Response*******/
		MSYSTICK_stderrorSetPeriodiceInterval(TICK_FOR_MSEC,ESP_TimeOutAlarm);
 8000a52:	4936      	ldr	r1, [pc, #216]	; (8000b2c <HESP_SEND_COMMAND+0x134>)
 8000a54:	4836      	ldr	r0, [pc, #216]	; (8000b30 <HESP_SEND_COMMAND+0x138>)
 8000a56:	f000 fd21 	bl	800149c <MSYSTICK_stderrorSetPeriodiceInterval>
		L_u8Interrupt_status = MUART_u8GetInterruptConfig( ESP_UART_NUMBER);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fe93 	bl	8001786 <MUART_u8GetInterruptConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	743b      	strb	r3, [r7, #16]

		//MUART_u16GetData(ESP_UART_NUMBER);
		if(L_u8Interrupt_status == 1)
 8000a64:	7c3b      	ldrb	r3, [r7, #16]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d14e      	bne.n	8000b08 <HESP_SEND_COMMAND+0x110>
		{
			HESP_voidInterruptDisable();
 8000a6a:	f000 f87f 	bl	8000b6c <HESP_voidInterruptDisable>
		}

		while(L_errStatus == 0)
 8000a6e:	e04b      	b.n	8000b08 <HESP_SEND_COMMAND+0x110>
		{
			if(ISTimeOut== ESP_TIMEOUT)
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <HESP_SEND_COMMAND+0x12c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b07      	cmp	r3, #7
 8000a76:	d107      	bne.n	8000a88 <HESP_SEND_COMMAND+0x90>
			{
				Copy_pu8Response[L_u32Count]	='\0';	
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
				L_errStatus =  ESP_TIMEOUT;
 8000a82:	2307      	movs	r3, #7
 8000a84:	74bb      	strb	r3, [r7, #18]

				break;
 8000a86:	e042      	b.n	8000b0e <HESP_SEND_COMMAND+0x116>
			}
			else if( 1 == MUART_u8RXNEFlag(ESP_UART_NUMBER) )
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f000 fe12 	bl	80016b2 <MUART_u8RXNEFlag>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d139      	bne.n	8000b08 <HESP_SEND_COMMAND+0x110>
			{
				Copy_pu8Response[L_u32Count] = (u8) MUART_u16GetData(ESP_UART_NUMBER);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fe26 	bl	80016e6 <MUART_u16GetData>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b2ca      	uxtb	r2, r1
 8000aa6:	701a      	strb	r2, [r3, #0]


				L_u8Keyslength = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	747b      	strb	r3, [r7, #17]
				if( L_u8Keyslength <= L_u32Count )
 8000aac:	7c7b      	ldrb	r3, [r7, #17]
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d326      	bcc.n	8000b02 <HESP_SEND_COMMAND+0x10a>
				{
					for(L_u8KeysCounter = 0 ; L_u8KeysCounter < EndOfStreamKeysNo ; L_u8KeysCounter++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	74fb      	strb	r3, [r7, #19]
 8000ab8:	e020      	b.n	8000afc <HESP_SEND_COMMAND+0x104>
					{
						L_u8Keyslength = strlen(EndOfStreamKeys[L_u8KeysCounter] );
 8000aba:	7cfb      	ldrb	r3, [r7, #19]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <HESP_SEND_COMMAND+0x13c>)
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fb54 	bl	8000170 <strlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	747b      	strb	r3, [r7, #17]


						if(strncmp((const char *)(&Copy_pu8Response[L_u32Count+1 - L_u8Keyslength]),EndOfStreamKeys[L_u8KeysCounter],L_u8Keyslength ) == 0 )
 8000acc:	7c7b      	ldrb	r3, [r7, #17]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	18d0      	adds	r0, r2, r3
 8000ad8:	7cfb      	ldrb	r3, [r7, #19]
 8000ada:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <HESP_SEND_COMMAND+0x13c>)
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	7c7a      	ldrb	r2, [r7, #17]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f002 f84c 	bl	8002b80 <strncmp>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <HESP_SEND_COMMAND+0xfe>
						{
							L_errStatus = (ESP_ERR_T)(L_u8KeysCounter+1);
 8000aee:	7cfb      	ldrb	r3, [r7, #19]
 8000af0:	3301      	adds	r3, #1
 8000af2:	74bb      	strb	r3, [r7, #18]
							break;
 8000af4:	e005      	b.n	8000b02 <HESP_SEND_COMMAND+0x10a>
					for(L_u8KeysCounter = 0 ; L_u8KeysCounter < EndOfStreamKeysNo ; L_u8KeysCounter++)
 8000af6:	7cfb      	ldrb	r3, [r7, #19]
 8000af8:	3301      	adds	r3, #1
 8000afa:	74fb      	strb	r3, [r7, #19]
 8000afc:	7cfb      	ldrb	r3, [r7, #19]
 8000afe:	2b05      	cmp	r3, #5
 8000b00:	d9db      	bls.n	8000aba <HESP_SEND_COMMAND+0xc2>
					}


				}

				L_u32Count++;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
		while(L_errStatus == 0)
 8000b08:	7cbb      	ldrb	r3, [r7, #18]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0b0      	beq.n	8000a70 <HESP_SEND_COMMAND+0x78>
			}
		}
		if(L_u8Interrupt_status == 1)
 8000b0e:	7c3b      	ldrb	r3, [r7, #16]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d101      	bne.n	8000b18 <HESP_SEND_COMMAND+0x120>
		{
			HESP_voidInterruptEnable();
 8000b14:	f000 f81f 	bl	8000b56 <HESP_voidInterruptEnable>
		}
	}

	return L_errStatus;
 8000b18:	7cbb      	ldrb	r3, [r7, #18]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000138 	.word	0x20000138
 8000b2c:	08000b99 	.word	0x08000b99
 8000b30:	00011940 	.word	0x00011940
 8000b34:	0800365c 	.word	0x0800365c

08000b38 <HESP_CALLBACK_INIT>:

	return HESP_SEND_COMMAND((const char *)"ATE0\r\n",NULL_POINTER,10);
}	

void HESP_CALLBACK_INIT(FUNC_T FUNC)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if(NULL_POINTER != FUNC)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HESP_CALLBACK_INIT+0x16>
	{
		MUART_voidSetCallBack(ESP_UART_NUMBER,FUNC);
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 fde3 	bl	8001714 <MUART_voidSetCallBack>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HESP_voidInterruptEnable>:
void HESP_voidInterruptEnable(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
	MNVIC_vEnableIRQ(37);
 8000b5a:	2025      	movs	r0, #37	; 0x25
 8000b5c:	f000 fa2a 	bl	8000fb4 <MNVIC_vEnableIRQ>
	MUART_voidInterruptEnable(ESP_UART_NUMBER,MUART_INTERRUPT_RXNE);
 8000b60:	2105      	movs	r1, #5
 8000b62:	2001      	movs	r0, #1
 8000b64:	f000 fdec 	bl	8001740 <MUART_voidInterruptEnable>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HESP_voidInterruptDisable>:

void HESP_voidInterruptDisable(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//MNVIC_vDisableIRQ(37);
	//MNVIC_vClearPendingIRQ(37);
	//MUART_voidInterruptDisable(ESP_UART_NUMBER,MUART_INTERRUPT_DS);
	MUART_voidInterruptDisable(ESP_UART_NUMBER,MUART_INTERRUPT_RXNE);
 8000b70:	2105      	movs	r1, #5
 8000b72:	2001      	movs	r0, #1
 8000b74:	f000 fe21 	bl	80017ba <MUART_voidInterruptDisable>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HESP_errCheckESP>:

ESP_ERR_T HESP_errCheckESP(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

	return HESP_SEND_COMMAND((const char *)"AT\r\n",ESP_Buffer,100);
 8000b80:	2264      	movs	r2, #100	; 0x64
 8000b82:	4903      	ldr	r1, [pc, #12]	; (8000b90 <HESP_errCheckESP+0x14>)
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <HESP_errCheckESP+0x18>)
 8000b86:	f7ff ff37 	bl	80009f8 <HESP_SEND_COMMAND>
 8000b8a:	4603      	mov	r3, r0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000013c 	.word	0x2000013c
 8000b94:	0800347c 	.word	0x0800347c

08000b98 <ESP_TimeOutAlarm>:

static void ESP_TimeOutAlarm(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	while( 0 !=  L_u32TimeOutCounter  )
 8000b9c:	bf00      	nop
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <ESP_TimeOutAlarm+0x28>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d005      	beq.n	8000bb2 <ESP_TimeOutAlarm+0x1a>
	{
		L_u32TimeOutCounter--;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <ESP_TimeOutAlarm+0x28>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <ESP_TimeOutAlarm+0x28>)
 8000bae:	6013      	str	r3, [r2, #0]
		return;
 8000bb0:	e004      	b.n	8000bbc <ESP_TimeOutAlarm+0x24>
	}
	MSYSTICK_voidStopTICK();
 8000bb2:	f000 fca3 	bl	80014fc <MSYSTICK_voidStopTICK>
	ISTimeOut = ESP_TIMEOUT;
 8000bb6:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <ESP_TimeOutAlarm+0x2c>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	701a      	strb	r2, [r3, #0]
}
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000138 	.word	0x20000138
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <MGPIO_stderrorPinModeSelect>:
(
	MGPIO_Port_Name_t ARG_udtGPIOPort, 
	MGPIO_Pin_Number_t ARG_udtGPIOPin,
	MGPIO_Pin_Mode_t ARG_udtGPIOMode
)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	71bb      	strb	r3, [r7, #6]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	717b      	strb	r3, [r7, #5]
	
	STD_error_t L_stderrorError=E_NOK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtGPIOPort <= 4 && ARG_udtGPIOPin <= 15 && ARG_udtGPIOMode <= 15)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	f200 812e 	bhi.w	8000e42 <MGPIO_stderrorPinModeSelect+0x27a>
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	f200 812a 	bhi.w	8000e42 <MGPIO_stderrorPinModeSelect+0x27a>
 8000bee:	797b      	ldrb	r3, [r7, #5]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	f200 8126 	bhi.w	8000e42 <MGPIO_stderrorPinModeSelect+0x27a>
	{
		
		switch(ARG_udtGPIOPort)
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	f200 8120 	bhi.w	8000e3e <MGPIO_stderrorPinModeSelect+0x276>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <MGPIO_stderrorPinModeSelect+0x3c>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c19 	.word	0x08000c19
 8000c08:	08000c87 	.word	0x08000c87
 8000c0c:	08000cf5 	.word	0x08000cf5
 8000c10:	08000d63 	.word	0x08000d63
 8000c14:	08000dd1 	.word	0x08000dd1
		{
			case GPIOA:
			{
				
				if(ARG_udtGPIOPin<=7)
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d816      	bhi.n	8000c4c <MGPIO_stderrorPinModeSelect+0x84>
				{
					GPIOA_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000c1e:	4b8d      	ldr	r3, [pc, #564]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	210f      	movs	r1, #15
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4989      	ldr	r1, [pc, #548]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	600b      	str	r3, [r1, #0]
					GPIOA_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000c34:	4b87      	ldr	r3, [pc, #540]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	7979      	ldrb	r1, [r7, #5]
 8000c3a:	79ba      	ldrb	r2, [r7, #6]
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c42:	4611      	mov	r1, r2
 8000c44:	4a83      	ldr	r2, [pc, #524]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c46:	430b      	orrs	r3, r1
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e019      	b.n	8000c80 <MGPIO_stderrorPinModeSelect+0xb8>
				}
				else
				{
					GPIOA_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000c4c:	4b82      	ldr	r3, [pc, #520]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	210f      	movs	r1, #15
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	497d      	ldr	r1, [pc, #500]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
					GPIOA_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000c66:	4b7c      	ldr	r3, [pc, #496]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	7979      	ldrb	r1, [r7, #5]
 8000c6c:	79ba      	ldrb	r2, [r7, #6]
 8000c6e:	f002 0207 	and.w	r2, r2, #7
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4a77      	ldr	r2, [pc, #476]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
				break;
 8000c84:	e0dc      	b.n	8000e40 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOB:
			{
				if(ARG_udtGPIOPin<=7)
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d816      	bhi.n	8000cba <MGPIO_stderrorPinModeSelect+0xf2>
				{
					GPIOB_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000c8c:	4b71      	ldr	r3, [pc, #452]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	210f      	movs	r1, #15
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	496d      	ldr	r1, [pc, #436]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]
					GPIOB_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000ca2:	4b6c      	ldr	r3, [pc, #432]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	7979      	ldrb	r1, [r7, #5]
 8000ca8:	79ba      	ldrb	r2, [r7, #6]
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4a68      	ldr	r2, [pc, #416]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e019      	b.n	8000cee <MGPIO_stderrorPinModeSelect+0x126>
				}
				else
				{
					GPIOB_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000cba:	4b67      	ldr	r3, [pc, #412]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4962      	ldr	r1, [pc, #392]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
					GPIOB_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000cd4:	4b60      	ldr	r3, [pc, #384]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	7979      	ldrb	r1, [r7, #5]
 8000cda:	79ba      	ldrb	r2, [r7, #6]
 8000cdc:	f002 0207 	and.w	r2, r2, #7
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4a5b      	ldr	r2, [pc, #364]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000cea:	430b      	orrs	r3, r1
 8000cec:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
				break;
 8000cf2:	e0a5      	b.n	8000e40 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOC:
			{
				if(ARG_udtGPIOPin<=7)
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d816      	bhi.n	8000d28 <MGPIO_stderrorPinModeSelect+0x160>
				{
					GPIOC_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000cfa:	4b56      	ldr	r3, [pc, #344]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	210f      	movs	r1, #15
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4952      	ldr	r1, [pc, #328]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	600b      	str	r3, [r1, #0]
					GPIOC_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000d10:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	7979      	ldrb	r1, [r7, #5]
 8000d16:	79ba      	ldrb	r2, [r7, #6]
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4a4c      	ldr	r2, [pc, #304]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d22:	430b      	orrs	r3, r1
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e019      	b.n	8000d5c <MGPIO_stderrorPinModeSelect+0x194>
				}
				else
				{
					GPIOC_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000d28:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	210f      	movs	r1, #15
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4946      	ldr	r1, [pc, #280]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
					GPIOC_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000d42:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	7979      	ldrb	r1, [r7, #5]
 8000d48:	79ba      	ldrb	r2, [r7, #6]
 8000d4a:	f002 0207 	and.w	r2, r2, #7
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	fa01 f202 	lsl.w	r2, r1, r2
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
				break;
 8000d60:	e06e      	b.n	8000e40 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOD:
			{
				if(ARG_udtGPIOPin<=7)
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	2b07      	cmp	r3, #7
 8000d66:	d816      	bhi.n	8000d96 <MGPIO_stderrorPinModeSelect+0x1ce>
				{
					GPIOD_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000d68:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	210f      	movs	r1, #15
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	4936      	ldr	r1, [pc, #216]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
					GPIOD_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000d7e:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	7979      	ldrb	r1, [r7, #5]
 8000d84:	79ba      	ldrb	r2, [r7, #6]
 8000d86:	0092      	lsls	r2, r2, #2
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e019      	b.n	8000dca <MGPIO_stderrorPinModeSelect+0x202>
				}
				else
				{
					GPIOD_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	210f      	movs	r1, #15
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	492b      	ldr	r1, [pc, #172]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
					GPIOD_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	7979      	ldrb	r1, [r7, #5]
 8000db6:	79ba      	ldrb	r2, [r7, #6]
 8000db8:	f002 0207 	and.w	r2, r2, #7
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
				break;
 8000dce:	e037      	b.n	8000e40 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOE:
			{
				if(ARG_udtGPIOPin<=7)
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b07      	cmp	r3, #7
 8000dd4:	d816      	bhi.n	8000e04 <MGPIO_stderrorPinModeSelect+0x23c>
				{
					GPIOE_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	210f      	movs	r1, #15
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	491b      	ldr	r1, [pc, #108]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
					GPIOE_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	7979      	ldrb	r1, [r7, #5]
 8000df2:	79ba      	ldrb	r2, [r7, #6]
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MGPIO_stderrorPinModeSelect+0x28c>)
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e019      	b.n	8000e38 <MGPIO_stderrorPinModeSelect+0x270>
				}
				else
				{
					GPIOE_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	210f      	movs	r1, #15
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	490f      	ldr	r1, [pc, #60]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
					GPIOE_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	7979      	ldrb	r1, [r7, #5]
 8000e24:	79ba      	ldrb	r2, [r7, #6]
 8000e26:	f002 0207 	and.w	r2, r2, #7
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4611      	mov	r1, r2
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <MGPIO_stderrorPinModeSelect+0x290>)
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
				break;
 8000e3c:	e000      	b.n	8000e40 <MGPIO_stderrorPinModeSelect+0x278>
			}
			default :
			{
				/*nothing*/
				break;
 8000e3e:	bf00      	nop
		switch(ARG_udtGPIOPort)
 8000e40:	e001      	b.n	8000e46 <MGPIO_stderrorPinModeSelect+0x27e>
			}
		}
	}
	else
	{
		L_stderrorError=E_NOK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800
 8000e58:	40010804 	.word	0x40010804

08000e5c <MGPIO_stderrorSetPinValue>:
(
	MGPIO_Port_Name_t ARG_udtGPIOPort, 
	MGPIO_Pin_Number_t ARG_udtGPIOPin, 
	MGPIO_Output_State_t ARG_udtValue
)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	717b      	strb	r3, [r7, #5]
	STD_error_t L_stderrorError=E_NOK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtGPIOPort <= 4 && ARG_udtGPIOPin <= 15 && ARG_udtValue <= 1)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	f200 8093 	bhi.w	8000fa0 <MGPIO_stderrorSetPinValue+0x144>
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	f200 808f 	bhi.w	8000fa0 <MGPIO_stderrorSetPinValue+0x144>
 8000e82:	797b      	ldrb	r3, [r7, #5]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	f200 808b 	bhi.w	8000fa0 <MGPIO_stderrorSetPinValue+0x144>
	{
		switch(ARG_udtGPIOPort)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	f200 8085 	bhi.w	8000f9c <MGPIO_stderrorSetPinValue+0x140>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <MGPIO_stderrorSetPinValue+0x3c>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000ead 	.word	0x08000ead
 8000e9c:	08000edd 	.word	0x08000edd
 8000ea0:	08000f0d 	.word	0x08000f0d
 8000ea4:	08000f3d 	.word	0x08000f3d
 8000ea8:	08000f6d 	.word	0x08000f6d
		{
			case GPIOA:
			{
				GPIOA_ODR =(GPIOA_ODR&(~(1<<(ARG_udtGPIOPin))));
 8000eac:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4a3c      	ldr	r2, [pc, #240]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	6013      	str	r3, [r2, #0]
				GPIOA_ODR|=(ARG_udtValue<<(ARG_udtGPIOPin));
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	7979      	ldrb	r1, [r7, #5]
 8000ec8:	79ba      	ldrb	r2, [r7, #6]
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4a37      	ldr	r2, [pc, #220]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
				break;
 8000eda:	e060      	b.n	8000f9e <MGPIO_stderrorSetPinValue+0x142>
			}
			case GPIOB:
			{
				GPIOB_ODR =(GPIOB_ODR&(~(1<<(ARG_udtGPIOPin))));
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	79ba      	ldrb	r2, [r7, #6]
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	43d2      	mvns	r2, r2
 8000eea:	4611      	mov	r1, r2
 8000eec:	4a30      	ldr	r2, [pc, #192]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000eee:	400b      	ands	r3, r1
 8000ef0:	6013      	str	r3, [r2, #0]
				GPIOB_ODR|=(ARG_udtValue<<(ARG_udtGPIOPin));
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	7979      	ldrb	r1, [r7, #5]
 8000ef8:	79ba      	ldrb	r2, [r7, #6]
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	4611      	mov	r1, r2
 8000f00:	4a2b      	ldr	r2, [pc, #172]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f02:	430b      	orrs	r3, r1
 8000f04:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
				break;
 8000f0a:	e048      	b.n	8000f9e <MGPIO_stderrorSetPinValue+0x142>
			}
			case GPIOC:
			{
				GPIOC_ODR =(GPIOC_ODR&(~(1<<(ARG_udtGPIOPin))));
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	79ba      	ldrb	r2, [r7, #6]
 8000f12:	2101      	movs	r1, #1
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f1e:	400b      	ands	r3, r1
 8000f20:	6013      	str	r3, [r2, #0]
				GPIOC_ODR|=(ARG_udtValue<<(ARG_udtGPIOPin));
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	7979      	ldrb	r1, [r7, #5]
 8000f28:	79ba      	ldrb	r2, [r7, #6]
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f32:	430b      	orrs	r3, r1
 8000f34:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
				break;
 8000f3a:	e030      	b.n	8000f9e <MGPIO_stderrorSetPinValue+0x142>
			}
			case GPIOD:
			{
				GPIOD_ODR =(GPIOD_ODR&(~(1<<(ARG_udtGPIOPin))));
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	79ba      	ldrb	r2, [r7, #6]
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	43d2      	mvns	r2, r2
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f4e:	400b      	ands	r3, r1
 8000f50:	6013      	str	r3, [r2, #0]
				GPIOD_ODR|=(ARG_udtValue<<(ARG_udtGPIOPin));
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	7979      	ldrb	r1, [r7, #5]
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f62:	430b      	orrs	r3, r1
 8000f64:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
				break;
 8000f6a:	e018      	b.n	8000f9e <MGPIO_stderrorSetPinValue+0x142>
			}
			case GPIOE:
			{
				GPIOE_ODR =(GPIOE_ODR&(~(1<<(ARG_udtGPIOPin))));
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	43d2      	mvns	r2, r2
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f7e:	400b      	ands	r3, r1
 8000f80:	6013      	str	r3, [r2, #0]
				GPIOE_ODR|=(ARG_udtValue<<(ARG_udtGPIOPin));
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	7979      	ldrb	r1, [r7, #5]
 8000f88:	79ba      	ldrb	r2, [r7, #6]
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <MGPIO_stderrorSetPinValue+0x154>)
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
				break;
 8000f9a:	e000      	b.n	8000f9e <MGPIO_stderrorSetPinValue+0x142>
			}
			default :
			{
				/*nothing*/
				break;
 8000f9c:	bf00      	nop
		switch(ARG_udtGPIOPort)
 8000f9e:	e001      	b.n	8000fa4 <MGPIO_stderrorSetPinValue+0x148>
			
		}
	}
	else
	{
		L_stderrorError=E_NOK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	4001080c 	.word	0x4001080c

08000fb4 <MNVIC_vEnableIRQ>:
#include "MNVIC_private.h"

static u8 PriorityConfig;

void MNVIC_vEnableIRQ(u8 IRQn)
{
 8000fb4:	b490      	push	{r4, r7}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(MNVIC->ISER[IRQn/32] ,IRQn%32);
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <MNVIC_vEnableIRQ+0x3c>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b2d8      	uxtb	r0, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	f002 021f 	and.w	r2, r2, #31
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	4614      	mov	r4, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <MNVIC_vEnableIRQ+0x3c>)
 8000fdc:	4601      	mov	r1, r0
 8000fde:	4323      	orrs	r3, r4
 8000fe0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc90      	pop	{r4, r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <MRCC_stderrorInit>:
	RCC_ClkSrc_t 		ARG_udtClkSrc ,
	RCC_AHBPreScaler_t 	ARG_udtAHBPreScaler,
	RCC_APBPreScaler_t 	ARG_udtAPB1PreScaler,
	RCC_APBPreScaler_t 	ARG_udtAPB2PreScaler
)
{
 8000ff4:	b490      	push	{r4, r7}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4623      	mov	r3, r4
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	4603      	mov	r3, r0
 8001008:	71bb      	strb	r3, [r7, #6]
 800100a:	460b      	mov	r3, r1
 800100c:	717b      	strb	r3, [r7, #5]
 800100e:	4613      	mov	r3, r2
 8001010:	713b      	strb	r3, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
	
	if((ARG_udtClkSrc<=4)&&(((ARG_udtAHBPreScaler>=8)&&(ARG_udtAHBPreScaler<=15))||(ARG_udtAHBPreScaler==0))&&(((ARG_udtAPB1PreScaler>=3)&&(ARG_udtAPB1PreScaler<=7))||(ARG_udtAPB1PreScaler==0))&&(((ARG_udtAPB2PreScaler>=3)&&(ARG_udtAPB2PreScaler<=7))||(ARG_udtAPB2PreScaler==0)))
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b04      	cmp	r3, #4
 800101a:	f200 813d 	bhi.w	8001298 <MRCC_stderrorInit+0x2a4>
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	2b07      	cmp	r3, #7
 8001022:	d902      	bls.n	800102a <MRCC_stderrorInit+0x36>
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d903      	bls.n	8001032 <MRCC_stderrorInit+0x3e>
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	2b00      	cmp	r3, #0
 800102e:	f040 8133 	bne.w	8001298 <MRCC_stderrorInit+0x2a4>
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d902      	bls.n	800103e <MRCC_stderrorInit+0x4a>
 8001038:	797b      	ldrb	r3, [r7, #5]
 800103a:	2b07      	cmp	r3, #7
 800103c:	d903      	bls.n	8001046 <MRCC_stderrorInit+0x52>
 800103e:	797b      	ldrb	r3, [r7, #5]
 8001040:	2b00      	cmp	r3, #0
 8001042:	f040 8129 	bne.w	8001298 <MRCC_stderrorInit+0x2a4>
 8001046:	793b      	ldrb	r3, [r7, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d902      	bls.n	8001052 <MRCC_stderrorInit+0x5e>
 800104c:	793b      	ldrb	r3, [r7, #4]
 800104e:	2b07      	cmp	r3, #7
 8001050:	d903      	bls.n	800105a <MRCC_stderrorInit+0x66>
 8001052:	793b      	ldrb	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f040 811f 	bne.w	8001298 <MRCC_stderrorInit+0x2a4>
	{
		switch(ARG_udtClkSrc)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b05      	cmp	r3, #5
 800105e:	f200 80ed 	bhi.w	800123c <MRCC_stderrorInit+0x248>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <MRCC_stderrorInit+0x74>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	08001081 	.word	0x08001081
 800106c:	080010c9 	.word	0x080010c9
 8001070:	08001111 	.word	0x08001111
 8001074:	08001141 	.word	0x08001141
 8001078:	08001199 	.word	0x08001199
 800107c:	080011f1 	.word	0x080011f1
		{
			case HSE_Crystal:
			{
				MRCC_u8PllCk=0;
 8001080:	4b89      	ldr	r3, [pc, #548]	; (80012a8 <MRCC_stderrorInit+0x2b4>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSE*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 8001086:	4b89      	ldr	r3, [pc, #548]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a88      	ldr	r2, [pc, #544]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 800108c:	f023 0303 	bic.w	r3, r3, #3
 8001090:	6013      	str	r3, [r2, #0]
				RCC_CFGR|=(HSE_FLAG);
 8001092:	4b86      	ldr	r3, [pc, #536]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a85      	ldr	r2, [pc, #532]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6013      	str	r3, [r2, #0]
				/*Disable bypass*/
				RCC_CR	&=~(1U<<HSEBYP);
 800109e:	4b84      	ldr	r3, [pc, #528]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a83      	ldr	r2, [pc, #524]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 80010aa:	4b81      	ldr	r3, [pc, #516]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a80      	ldr	r2, [pc, #512]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 80010b6:	bf00      	nop
 80010b8:	4b7d      	ldr	r3, [pc, #500]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c5b      	lsrs	r3, r3, #17
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f8      	beq.n	80010b8 <MRCC_stderrorInit+0xc4>
				break;
 80010c6:	e0ba      	b.n	800123e <MRCC_stderrorInit+0x24a>
			}
			case HSE_RC:
			{
				MRCC_u8PllCk=0;
 80010c8:	4b77      	ldr	r3, [pc, #476]	; (80012a8 <MRCC_stderrorInit+0x2b4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSE*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 80010ce:	4b77      	ldr	r3, [pc, #476]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a76      	ldr	r2, [pc, #472]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 80010d4:	f023 0303 	bic.w	r3, r3, #3
 80010d8:	6013      	str	r3, [r2, #0]
				RCC_CFGR|=(HSE_FLAG);
 80010da:	4b74      	ldr	r3, [pc, #464]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a73      	ldr	r2, [pc, #460]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6013      	str	r3, [r2, #0]
				/*Enable bypass*/
				RCC_CR|=(1U<<HSEBYP);
 80010e6:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a71      	ldr	r2, [pc, #452]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 80010f2:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6e      	ldr	r2, [pc, #440]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 80010fe:	bf00      	nop
 8001100:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0c5b      	lsrs	r3, r3, #17
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f8      	beq.n	8001100 <MRCC_stderrorInit+0x10c>
				break;
 800110e:	e096      	b.n	800123e <MRCC_stderrorInit+0x24a>
			}
			case HSI:
			{
				MRCC_u8PllCk=0;
 8001110:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <MRCC_stderrorInit+0x2b4>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSI*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a64      	ldr	r2, [pc, #400]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 800111c:	f023 0303 	bic.w	r3, r3, #3
 8001120:	6013      	str	r3, [r2, #0]
				/*Enable HSI*/
				RCC_CR|=(1U<<HSION);
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a62      	ldr	r2, [pc, #392]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSIRDY)&1))==0);
 800112e:	bf00      	nop
 8001130:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f8      	beq.n	8001130 <MRCC_stderrorInit+0x13c>
				
				
				break;
 800113e:	e07e      	b.n	800123e <MRCC_stderrorInit+0x24a>
			}
			case PLL_HSE:
			{
				MRCC_u8PllCk=1;
 8001140:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <MRCC_stderrorInit+0x2b4>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a59      	ldr	r2, [pc, #356]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 800114c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001150:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 8001152:	bf00      	nop
 8001154:	4b56      	ldr	r3, [pc, #344]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0e5b      	lsrs	r3, r3, #25
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d0f8      	beq.n	8001154 <MRCC_stderrorInit+0x160>
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 8001162:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 800116e:	bf00      	nop
 8001170:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0c5b      	lsrs	r3, r3, #17
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f8      	beq.n	8001170 <MRCC_stderrorInit+0x17c>
				/*PLL HSE SELECT*/
				RCC_CFGR|=(1U<<PLLSRC);
 800117e:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a4a      	ldr	r2, [pc, #296]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
				/*PLL NO DIVIDED HSE */
				RCC_CFGR&=(~(1<<PLLXTPRE));
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a47      	ldr	r2, [pc, #284]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001190:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001194:	6013      	str	r3, [r2, #0]
				break;
 8001196:	e052      	b.n	800123e <MRCC_stderrorInit+0x24a>
			}
			case PLL_HSE_DIVIDED_BY_2:
			{
				MRCC_u8PllCk=1;
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <MRCC_stderrorInit+0x2b4>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a43      	ldr	r2, [pc, #268]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80011a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a8:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 80011aa:	bf00      	nop
 80011ac:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0e5b      	lsrs	r3, r3, #25
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d0f8      	beq.n	80011ac <MRCC_stderrorInit+0x1b8>
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 80011c6:	bf00      	nop
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0c5b      	lsrs	r3, r3, #17
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f8      	beq.n	80011c8 <MRCC_stderrorInit+0x1d4>
				/*PLL HSE SELECT*/
				RCC_CFGR|=(1U<<PLLSRC);
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a34      	ldr	r2, [pc, #208]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
				/*PLL NO DIVIDED HSE */
				RCC_CFGR|=(1U<<PLLXTPRE);
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a31      	ldr	r2, [pc, #196]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	6013      	str	r3, [r2, #0]
				break;
 80011ee:	e026      	b.n	800123e <MRCC_stderrorInit+0x24a>
			}
			case PLL_HSI_DIVIDED_BY_2:
			{
				MRCC_u8PllCk=1;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <MRCC_stderrorInit+0x2b4>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 80011fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001200:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 8001202:	bf00      	nop
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0e5b      	lsrs	r3, r3, #25
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b01      	cmp	r3, #1
 8001210:	d0f8      	beq.n	8001204 <MRCC_stderrorInit+0x210>
				/*Enable HSI*/
				RCC_CR|=(1U<<HSION);
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a26      	ldr	r2, [pc, #152]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSIRDY)&1))==0);
 800121e:	bf00      	nop
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <MRCC_stderrorInit+0x2bc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	085b      	lsrs	r3, r3, #1
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f8      	beq.n	8001220 <MRCC_stderrorInit+0x22c>
				/*PLL HSI SELECT*/
				RCC_CFGR&=~(1U<<PLLSRC);
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
				break;
 800123a:	e000      	b.n	800123e <MRCC_stderrorInit+0x24a>
			}
			default : 
			{
				/*nothing*/
				break;
 800123c:	bf00      	nop
			}
		}
		
		/*AHB1*/
		RCC_CFGR=(RCC_CFGR&AHB_FLAG);
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001248:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAHBPreScaler<<HPRE);
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	79ba      	ldrb	r2, [r7, #6]
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	4611      	mov	r1, r2
 8001254:	4a15      	ldr	r2, [pc, #84]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001256:	430b      	orrs	r3, r1
 8001258:	6013      	str	r3, [r2, #0]
		/*APB1*/
		RCC_CFGR=(RCC_CFGR&APB1_FLAG);
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001260:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001264:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAPB1PreScaler<<PPRE1);
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	797a      	ldrb	r2, [r7, #5]
 800126c:	0212      	lsls	r2, r2, #8
 800126e:	4611      	mov	r1, r2
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001272:	430b      	orrs	r3, r1
 8001274:	6013      	str	r3, [r2, #0]
		/*APB2*/
		RCC_CFGR=(RCC_CFGR&APB2_FLAG);
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 800127c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001280:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAPB2PreScaler<<PPRE2);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	793a      	ldrb	r2, [r7, #4]
 8001288:	02d2      	lsls	r2, r2, #11
 800128a:	4611      	mov	r1, r2
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <MRCC_stderrorInit+0x2b8>)
 800128e:	430b      	orrs	r3, r1
 8001290:	6013      	str	r3, [r2, #0]
		
		L_stderrorError = E_OK;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e001      	b.n	800129c <MRCC_stderrorInit+0x2a8>
	}
	else
	{
		L_stderrorError=E_NOK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc90      	pop	{r4, r7}
 80012a6:	4770      	bx	lr
 80012a8:	2000016e 	.word	0x2000016e
 80012ac:	40021004 	.word	0x40021004
 80012b0:	40021000 	.word	0x40021000

080012b4 <MRCC_stderrorSetPllClockFreq>:
STD_error_t MRCC_stderrorSetPllClockFreq
(
	RCC_PLLPreScaler_t 	ARG_udtPLLPreScaler,
	RCC_FLASH_LATENCY_t ARG_udtLatency
)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]
	STD_error_t L_stderrorError=E_NOK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
	
	if((MRCC_u8PllCk==1)&&(ARG_udtPLLPreScaler<=14)&&(ARG_udtLatency<=2))
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <MRCC_stderrorSetPllClockFreq+0xa8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d13c      	bne.n	800134a <MRCC_stderrorSetPllClockFreq+0x96>
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b0e      	cmp	r3, #14
 80012d4:	d839      	bhi.n	800134a <MRCC_stderrorSetPllClockFreq+0x96>
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d836      	bhi.n	800134a <MRCC_stderrorSetPllClockFreq+0x96>
	{

		/*Set PLLM, PLLN, PLLP, PLLQ*/
		RCC_CFGR=(RCC_CFGR&(~(15U<<PLLMUL)));
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MRCC_stderrorSetPllClockFreq+0xac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <MRCC_stderrorSetPllClockFreq+0xac>)
 80012e2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80012e6:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtPLLPreScaler<<PLLMUL);
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MRCC_stderrorSetPllClockFreq+0xac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	0492      	lsls	r2, r2, #18
 80012f0:	4611      	mov	r1, r2
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <MRCC_stderrorSetPllClockFreq+0xac>)
 80012f4:	430b      	orrs	r3, r1
 80012f6:	6013      	str	r3, [r2, #0]
		/*Enable PLL*/
		RCC_CR|=(1U<<PLLRON);
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MRCC_stderrorSetPllClockFreq+0xb0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <MRCC_stderrorSetPllClockFreq+0xb0>)
 80012fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001302:	6013      	str	r3, [r2, #0]
		while((((RCC_CR>>PLLRDY)&1))==0);
 8001304:	bf00      	nop
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MRCC_stderrorSetPllClockFreq+0xb0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	0e5b      	lsrs	r3, r3, #25
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f8      	beq.n	8001306 <MRCC_stderrorSetPllClockFreq+0x52>

		/*set Latency*/
		FLASH_ACR&=~(LATENCY_FLAG);
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MRCC_stderrorSetPllClockFreq+0xb4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <MRCC_stderrorSetPllClockFreq+0xb4>)
 800131a:	f023 0307 	bic.w	r3, r3, #7
 800131e:	6013      	str	r3, [r2, #0]
		FLASH_ACR|=ARG_udtLatency;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MRCC_stderrorSetPllClockFreq+0xb4>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	4910      	ldr	r1, [pc, #64]	; (8001368 <MRCC_stderrorSetPllClockFreq+0xb4>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]

		/*SYSCLK equal to PLL*/
		RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MRCC_stderrorSetPllClockFreq+0xac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <MRCC_stderrorSetPllClockFreq+0xac>)
 8001332:	f023 0303 	bic.w	r3, r3, #3
 8001336:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=PLL_SYS_FLAG;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MRCC_stderrorSetPllClockFreq+0xac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a08      	ldr	r2, [pc, #32]	; (8001360 <MRCC_stderrorSetPllClockFreq+0xac>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	6013      	str	r3, [r2, #0]

		L_stderrorError = E_OK;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e001      	b.n	800134e <MRCC_stderrorSetPllClockFreq+0x9a>
	}
	else
	{
		L_stderrorError=E_NOK;	
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000016e 	.word	0x2000016e
 8001360:	40021004 	.word	0x40021004
 8001364:	40021000 	.word	0x40021000
 8001368:	40022000 	.word	0x40022000

0800136c <RCC_EnablePeripheralClk>:
STD_error_t RCC_EnablePeripheralClk
(
	RCC_Bus_t 			ARG_udtBus,
	RCC_PeripheraName_t ARG_udtPeripheraName
)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	460a      	mov	r2, r1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	4613      	mov	r3, r2
 800137a:	71bb      	strb	r3, [r7, #6]
	
	STD_error_t L_stderrorError=E_NOK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
	
	switch(ARG_udtBus)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d01e      	beq.n	80013c4 <RCC_EnablePeripheralClk+0x58>
 8001386:	2b02      	cmp	r3, #2
 8001388:	dc28      	bgt.n	80013dc <RCC_EnablePeripheralClk+0x70>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <RCC_EnablePeripheralClk+0x28>
 800138e:	2b01      	cmp	r3, #1
 8001390:	d00c      	beq.n	80013ac <RCC_EnablePeripheralClk+0x40>
 8001392:	e023      	b.n	80013dc <RCC_EnablePeripheralClk+0x70>
	{
		case AHB1:
		{
			RCC_AHBENR|=(1U<<ARG_udtPeripheraName);
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <RCC_EnablePeripheralClk+0x84>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	4913      	ldr	r1, [pc, #76]	; (80013f0 <RCC_EnablePeripheralClk+0x84>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
			break;
 80013aa:	e01a      	b.n	80013e2 <RCC_EnablePeripheralClk+0x76>
		}
		case APB1:
		{
			RCC_APB1ENR|=(1U<<ARG_udtPeripheraName);
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <RCC_EnablePeripheralClk+0x88>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	490e      	ldr	r1, [pc, #56]	; (80013f4 <RCC_EnablePeripheralClk+0x88>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
			break;
 80013c2:	e00e      	b.n	80013e2 <RCC_EnablePeripheralClk+0x76>
		}
		case APB2:
		{
			RCC_APB2ENR|=(1U<<ARG_udtPeripheraName);
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <RCC_EnablePeripheralClk+0x8c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4909      	ldr	r1, [pc, #36]	; (80013f8 <RCC_EnablePeripheralClk+0x8c>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
			break;
 80013da:	e002      	b.n	80013e2 <RCC_EnablePeripheralClk+0x76>
		}
		
		default:
		{
			L_stderrorError=E_NOK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]
			break;
 80013e0:	bf00      	nop
		}
			
	}
	return L_stderrorError;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
	
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021014 	.word	0x40021014
 80013f4:	4002101c 	.word	0x4002101c
 80013f8:	40021018 	.word	0x40021018

080013fc <MSYSTICK_stderrorInit>:

STD_error_t MSYSTICK_stderrorInit
(
	MSYSTICK_CLkSRC_t ARG_udtCLkSRC
)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtCLkSRC <=1)
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d811      	bhi.n	8001434 <MSYSTICK_stderrorInit+0x38>
	{
		/*Disable SysTick peripheral and SysTick interrupt*/
		STK_CTRL =(STK_CTRL&(~STK_CTRL_Flag));
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MSYSTICK_stderrorInit+0x48>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <MSYSTICK_stderrorInit+0x48>)
 8001416:	f023 0307 	bic.w	r3, r3, #7
 800141a:	6013      	str	r3, [r2, #0]
		/*Select Clock Source*/
		STK_CTRL|=(ARG_udtCLkSRC<<2);
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MSYSTICK_stderrorInit+0x48>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4611      	mov	r1, r2
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <MSYSTICK_stderrorInit+0x48>)
 8001428:	430b      	orrs	r3, r1
 800142a:	6013      	str	r3, [r2, #0]
		STK_VAL = 0;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MSYSTICK_stderrorInit+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e001      	b.n	8001438 <MSYSTICK_stderrorInit+0x3c>
	}
	else
	{
		L_stderrorError=E_NOK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	e000e010 	.word	0xe000e010
 8001448:	e000e018 	.word	0xe000e018

0800144c <MSYSTICK_stderrorSetBusyWait>:

STD_error_t MSYSTICK_stderrorSetBusyWait
(
	u32 ARG_u32Ticks
)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	
	STD_error_t L_stderrorError=E_NOK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
	STK_LOAD =ARG_u32Ticks-1;
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <MSYSTICK_stderrorSetBusyWait+0x44>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3b01      	subs	r3, #1
 800145e:	6013      	str	r3, [r2, #0]
	STK_VAL=0;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MSYSTICK_stderrorSetBusyWait+0x48>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
	STK_CTRL = 1U;
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MSYSTICK_stderrorSetBusyWait+0x4c>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
	while(((STK_CTRL>>16)&1)!=1);
 800146c:	bf00      	nop
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MSYSTICK_stderrorSetBusyWait+0x4c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0c1b      	lsrs	r3, r3, #16
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d1f8      	bne.n	800146e <MSYSTICK_stderrorSetBusyWait+0x22>
	STK_CTRL = 0;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MSYSTICK_stderrorSetBusyWait+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
	return L_stderrorError;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e014 	.word	0xe000e014
 8001494:	e000e018 	.word	0xe000e018
 8001498:	e000e010 	.word	0xe000e010

0800149c <MSYSTICK_stderrorSetPeriodiceInterval>:
STD_error_t MSYSTICK_stderrorSetPeriodiceInterval
(
	u32 ARG_u32Ticks,
	void (*ARG_pvoidfUserFunction)(void)
)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	
	STD_error_t L_stderrorError=E_NOK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pvoidfUserFunction != NULL_POINTER)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d012      	beq.n	80014d6 <MSYSTICK_stderrorSetPeriodiceInterval+0x3a>
	{
		STK_VAL=0;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MSYSTICK_stderrorSetPeriodiceInterval+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
		MSYSTICK_u8SelectISR=1;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MSYSTICK_stderrorSetPeriodiceInterval+0x50>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
		MSYSTICK_pvoidfUserFunctionSysTick=ARG_pvoidfUserFunction;
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <MSYSTICK_stderrorSetPeriodiceInterval+0x54>)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	6013      	str	r3, [r2, #0]
		STK_LOAD =ARG_u32Ticks;
 80014c2:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <MSYSTICK_stderrorSetPeriodiceInterval+0x58>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6013      	str	r3, [r2, #0]
		STK_CTRL |=3U;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MSYSTICK_stderrorSetPeriodiceInterval+0x5c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <MSYSTICK_stderrorSetPeriodiceInterval+0x5c>)
 80014ce:	f043 0303 	orr.w	r3, r3, #3
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e001      	b.n	80014da <MSYSTICK_stderrorSetPeriodiceInterval+0x3e>
		
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 80014d6:	2302      	movs	r3, #2
 80014d8:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e018 	.word	0xe000e018
 80014ec:	20000174 	.word	0x20000174
 80014f0:	20000170 	.word	0x20000170
 80014f4:	e000e014 	.word	0xe000e014
 80014f8:	e000e010 	.word	0xe000e010

080014fc <MSYSTICK_voidStopTICK>:

void MSYSTICK_voidStopTICK
(
	void
)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	STK_CTRL &=~(3U);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <MSYSTICK_voidStopTICK+0x18>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <MSYSTICK_voidStopTICK+0x18>)
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	e000e010 	.word	0xe000e010

08001518 <SysTick_Handler>:
	MSYSTICK_stderrorSetBusyWait(ARG_u32Time);
}


void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	
	if(MSYSTICK_u8SelectISR ==0)
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <SysTick_Handler+0x38>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <SysTick_Handler+0x26>
	{
		
		MSYSTICK_pvoidfUserFunctionSysTick();
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <SysTick_Handler+0x3c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4798      	blx	r3
		STK_CTRL &=~(3U);
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <SysTick_Handler+0x40>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Handler+0x40>)
 8001530:	f023 0303 	bic.w	r3, r3, #3
 8001534:	6013      	str	r3, [r2, #0]
		STK_VAL = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <SysTick_Handler+0x44>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		
	}
}
 800153c:	e006      	b.n	800154c <SysTick_Handler+0x34>
	else if(MSYSTICK_u8SelectISR ==1)
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Handler+0x38>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <SysTick_Handler+0x34>
		MSYSTICK_pvoidfUserFunctionSysTick();
 8001546:	4b03      	ldr	r3, [pc, #12]	; (8001554 <SysTick_Handler+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4798      	blx	r3
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000174 	.word	0x20000174
 8001554:	20000170 	.word	0x20000170
 8001558:	e000e010 	.word	0xe000e010
 800155c:	e000e018 	.word	0xe000e018

08001560 <MUART_voidInit>:
#include "MUART_interface.h"
/******CallBack*******/
FUNC_T MUART_CALLBACK[3] = {0};
/**********APIs************/
void MUART_voidInit( u8 Copy_u8UART_Number,u32 Copy_u32BaudRate,u8 Copy_u8ParityType, u8 Copy_u8StopBit,u8 Copy_u8WordSize)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6039      	str	r1, [r7, #0]
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4603      	mov	r3, r0
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	460b      	mov	r3, r1
 8001572:	71bb      	strb	r3, [r7, #6]
 8001574:	4613      	mov	r3, r2
 8001576:	717b      	strb	r3, [r7, #5]
	f64 mantessa , fraction;
	volatile USART_T* L_pMyUart = GetUsartPointer(Copy_u8UART_Number);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f93c 	bl	80017f8 <GetUsartPointer>
 8001580:	61f8      	str	r0, [r7, #28]
	if(NULL_POINTER != L_pMyUart)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d06b      	beq.n	8001660 <MUART_voidInit+0x100>
	{
		L_pMyUart->CR1 |= (L_pMyUart->CR1 & PCE_CLEAR & PS_CLEAR & M_CLEAR ) | (( (~Copy_u8ParityType>>1)&1 )<<PCE_BIT) | ((Copy_u8ParityType & 1)<< PS_BIT) | TE_SET | RE_SET | (Copy_u8WordSize<<M_BIT);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f423 52b0 	bic.w	r2, r3, #5632	; 0x1600
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	43db      	mvns	r3, r3
 8001594:	105b      	asrs	r3, r3, #1
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	431a      	orrs	r2, r3
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a6:	4313      	orrs	r3, r2
 80015a8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80015ac:	0312      	lsls	r2, r2, #12
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f043 020c 	orr.w	r2, r3, #12
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	60da      	str	r2, [r3, #12]
		mantessa = ((f64)F_CPU / (Copy_u32BaudRate*16.0));
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f7fe ff20 	bl	8000404 <__aeabi_ui2d>
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <MUART_voidInit+0x110>)
 80015ca:	f7fe ff95 	bl	80004f8 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	a125      	add	r1, pc, #148	; (adr r1, 8001668 <MUART_voidInit+0x108>)
 80015d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015d8:	f7ff f8b8 	bl	800074c <__aeabi_ddiv>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		fraction = ( mantessa - ((int)mantessa) ) *16;
 80015e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015e8:	f7ff f998 	bl	800091c <__aeabi_d2iz>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff18 	bl	8000424 <__aeabi_i2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015fc:	f7fe fdc4 	bl	8000188 <__aeabi_dsub>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MUART_voidInit+0x110>)
 800160e:	f7fe ff73 	bl	80004f8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	e9c7 2302 	strd	r2, r3, [r7, #8]
		L_pMyUart->BRR = ( ((int)mantessa)<<4 | ((int)fraction) );
 800161a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800161e:	f7ff f97d 	bl	800091c <__aeabi_d2iz>
 8001622:	4603      	mov	r3, r0
 8001624:	011c      	lsls	r4, r3, #4
 8001626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800162a:	f7ff f977 	bl	800091c <__aeabi_d2iz>
 800162e:	4603      	mov	r3, r0
 8001630:	4323      	orrs	r3, r4
 8001632:	461a      	mov	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	609a      	str	r2, [r3, #8]
		L_pMyUart->CR2 |= (L_pMyUart->CR2 & ~(STOP_MASK) ) | (Copy_u8StopBit<<STOP_BITS);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f423 633b 	bic.w	r3, r3, #2992	; 0xbb0
 8001640:	f023 0308 	bic.w	r3, r3, #8
 8001644:	797a      	ldrb	r2, [r7, #5]
 8001646:	0312      	lsls	r2, r2, #12
 8001648:	431a      	orrs	r2, r3
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	431a      	orrs	r2, r3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	611a      	str	r2, [r3, #16]
		SET_BIT(L_pMyUart->CR1,UE_BIT);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	60da      	str	r2, [r3, #12]
	}
	
}
 8001660:	bf00      	nop
 8001662:	3724      	adds	r7, #36	; 0x24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	00000000 	.word	0x00000000
 800166c:	41912a88 	.word	0x41912a88
 8001670:	40300000 	.word	0x40300000

08001674 <MUART_voidTransimit>:

void MUART_voidTransimit( u8 Copy_u8UART_Number,  u16 Copy_u8Data)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	460a      	mov	r2, r1
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	4613      	mov	r3, r2
 8001682:	80bb      	strh	r3, [r7, #4]
	volatile USART_T* L_pMyUart = GetUsartPointer(Copy_u8UART_Number);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f8b6 	bl	80017f8 <GetUsartPointer>
 800168c:	60f8      	str	r0, [r7, #12]
	if(NULL_POINTER != L_pMyUart)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <MUART_voidTransimit+0x36>
	{
		L_pMyUart->DR = Copy_u8Data;
 8001694:	88ba      	ldrh	r2, [r7, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	605a      	str	r2, [r3, #4]
		while(!GET_BIT(L_pMyUart->SR,TXE_BIT));
 800169a:	bf00      	nop
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	09db      	lsrs	r3, r3, #7
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f8      	beq.n	800169c <MUART_voidTransimit+0x28>
	}
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <MUART_u8RXNEFlag>:

u8 MUART_u8RXNEFlag(u8 Copy_u8UART_Number)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
	volatile USART_T* L_pMyUart = GetUsartPointer(Copy_u8UART_Number);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f89a 	bl	80017f8 <GetUsartPointer>
 80016c4:	60f8      	str	r0, [r7, #12]
	if(NULL_POINTER != L_pMyUart)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <MUART_u8RXNEFlag+0x2a>
	{
		return GET_BIT(L_pMyUart->SR,RXNE_BIT);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	e000      	b.n	80016de <MUART_u8RXNEFlag+0x2c>
	}
	return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <MUART_u16GetData>:
		return GET_BIT(L_pMyUart->SR,TC_BIT);
	}
	return 0;
}
u16 MUART_u16GetData(u8 Copy_u8UART_Number)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
	volatile USART_T* L_pMyUart = GetUsartPointer(Copy_u8UART_Number);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f880 	bl	80017f8 <GetUsartPointer>
 80016f8:	60f8      	str	r0, [r7, #12]
	if(NULL_POINTER != L_pMyUart)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <MUART_u16GetData+0x22>
	{
		return (u16) L_pMyUart->DR ;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	b29b      	uxth	r3, r3
 8001706:	e000      	b.n	800170a <MUART_u16GetData+0x24>
	}
	return 0;
 8001708:	2300      	movs	r3, #0
		
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <MUART_voidSetCallBack>:
	return 0;
}


void MUART_voidSetCallBack( u8 Copy_u8UART_Number,FUNC_T  Copy_pvUserFunc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
	if(NULL_POINTER !=  Copy_pvUserFunc)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <MUART_voidSetCallBack+0x1e>
	{
		MUART_CALLBACK[Copy_u8UART_Number-1] =  Copy_pvUserFunc;
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	3b01      	subs	r3, #1
 800172a:	4904      	ldr	r1, [pc, #16]	; (800173c <MUART_voidSetCallBack+0x28>)
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	20000178 	.word	0x20000178

08001740 <MUART_voidInterruptEnable>:

void MUART_voidInterruptEnable(u8 Copy_u8UART_Number, u8 Copy_u8InterruptType)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
	volatile USART_T* L_pMyUart = GetUsartPointer(Copy_u8UART_Number);
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f850 	bl	80017f8 <GetUsartPointer>
 8001758:	60f8      	str	r0, [r7, #12]
	if(NULL_POINTER != L_pMyUart)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00e      	beq.n	800177e <MUART_voidInterruptEnable+0x3e>
	{
			SET_BIT(L_pMyUart->CR1,PEIE_BIT);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	60da      	str	r2, [r3, #12]
			SET_BIT(L_pMyUart->CR1,Copy_u8InterruptType);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	79ba      	ldrb	r2, [r7, #6]
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	431a      	orrs	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	60da      	str	r2, [r3, #12]
	}
	
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <MUART_u8GetInterruptConfig>:
u8  MUART_u8GetInterruptConfig(u8 Copy_u8UART_Number)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
	volatile USART_T* L_pMyUart = GetUsartPointer(Copy_u8UART_Number);
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f830 	bl	80017f8 <GetUsartPointer>
 8001798:	60f8      	str	r0, [r7, #12]
	if(NULL_POINTER != L_pMyUart)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <MUART_u8GetInterruptConfig+0x2a>
	{
			 return GET_BIT(L_pMyUart->CR1,PEIE_BIT);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e000      	b.n	80017b2 <MUART_u8GetInterruptConfig+0x2c>
	}
	return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <MUART_voidInterruptDisable>:
void MUART_voidInterruptDisable(u8 Copy_u8UART_Number, u8 Copy_u8InterruptType)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	460a      	mov	r2, r1
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	4613      	mov	r3, r2
 80017c8:	71bb      	strb	r3, [r7, #6]
	volatile USART_T* L_pMyUart = GetUsartPointer(Copy_u8UART_Number);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f813 	bl	80017f8 <GetUsartPointer>
 80017d2:	60f8      	str	r0, [r7, #12]
	if(NULL_POINTER != L_pMyUart)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <MUART_voidInterruptDisable+0x34>
	{
			
			CLEAR_BIT(L_pMyUart->CR1,Copy_u8InterruptType);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	79ba      	ldrb	r2, [r7, #6]
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	43d2      	mvns	r2, r2
 80017e8:	401a      	ands	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	60da      	str	r2, [r3, #12]
	}
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <GetUsartPointer>:


volatile void * GetUsartPointer(u8 Copy_u8UART_Number)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
	void * L_pReturn  = NULL_POINTER;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
		switch(Copy_u8UART_Number)
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d00c      	beq.n	8001826 <GetUsartPointer+0x2e>
 800180c:	2b03      	cmp	r3, #3
 800180e:	dc0d      	bgt.n	800182c <GetUsartPointer+0x34>
 8001810:	2b01      	cmp	r3, #1
 8001812:	d002      	beq.n	800181a <GetUsartPointer+0x22>
 8001814:	2b02      	cmp	r3, #2
 8001816:	d003      	beq.n	8001820 <GetUsartPointer+0x28>
 8001818:	e008      	b.n	800182c <GetUsartPointer+0x34>
		{
			case	MUART1:
				L_pReturn = (void *) USART1;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <GetUsartPointer+0x48>)
 800181c:	60fb      	str	r3, [r7, #12]
			break;
 800181e:	e008      	b.n	8001832 <GetUsartPointer+0x3a>
			
			case	MUART2:
				L_pReturn = (void *) USART2;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <GetUsartPointer+0x4c>)
 8001822:	60fb      	str	r3, [r7, #12]
			break;
 8001824:	e005      	b.n	8001832 <GetUsartPointer+0x3a>
			
			case	MUART3:
				L_pReturn = (void *)USART3;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <GetUsartPointer+0x50>)
 8001828:	60fb      	str	r3, [r7, #12]
			break;
 800182a:	e002      	b.n	8001832 <GetUsartPointer+0x3a>
			
			default:
				//Error return Null
				L_pReturn =  NULL_POINTER;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
			break;
 8001830:	bf00      	nop
			
		}
		return L_pReturn;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40013800 	.word	0x40013800
 8001844:	40004400 	.word	0x40004400
 8001848:	40004800 	.word	0x40004800

0800184c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	if(NULL_POINTER != MUART_CALLBACK[MUART1-1])
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <USART1_IRQHandler+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <USART1_IRQHandler+0x12>
	{
		MUART_CALLBACK[MUART1-1]();
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <USART1_IRQHandler+0x18>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4798      	blx	r3
	}

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000178 	.word	0x20000178

08001868 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	if(NULL_POINTER != MUART_CALLBACK[MUART2-1])
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <USART2_IRQHandler+0x18>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <USART2_IRQHandler+0x12>
	{
		MUART_CALLBACK[MUART2-1]();
 8001874:	4b02      	ldr	r3, [pc, #8]	; (8001880 <USART2_IRQHandler+0x18>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4798      	blx	r3
	}
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000178 	.word	0x20000178

08001884 <SWIFI_errTurnOn>:
				&SWIFI_Connections_status[4]
		},
};

WIFI_ERROR_T	SWIFI_errTurnOn(u8 Copy_u8WIFIMode)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]

	ESP_ERR_T L_errESP_Status = HESP_errCheckESP();
 800188e:	f7ff f975 	bl	8000b7c <HESP_errCheckESP>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
	if( ESP_OK == L_errESP_Status )
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d122      	bne.n	80018e2 <SWIFI_errTurnOn+0x5e>
	{
		if( SWIFI_MODE_STATION == Copy_u8WIFIMode)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <SWIFI_errTurnOn+0x2e>
		{
			L_errESP_Status = HESP_SEND_COMMAND("AT+CWMODE=1\r\n",WIFI_Buffer,100);
 80018a2:	2264      	movs	r2, #100	; 0x64
 80018a4:	4911      	ldr	r1, [pc, #68]	; (80018ec <SWIFI_errTurnOn+0x68>)
 80018a6:	4812      	ldr	r0, [pc, #72]	; (80018f0 <SWIFI_errTurnOn+0x6c>)
 80018a8:	f7ff f8a6 	bl	80009f8 <HESP_SEND_COMMAND>
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e017      	b.n	80018e2 <SWIFI_errTurnOn+0x5e>
		}
		else if( SWIFI_MODE_SOFTAP== Copy_u8WIFIMode)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d107      	bne.n	80018c8 <SWIFI_errTurnOn+0x44>
		{
			L_errESP_Status = HESP_SEND_COMMAND("AT+CWMODE=2\r\n",WIFI_Buffer,100);
 80018b8:	2264      	movs	r2, #100	; 0x64
 80018ba:	490c      	ldr	r1, [pc, #48]	; (80018ec <SWIFI_errTurnOn+0x68>)
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <SWIFI_errTurnOn+0x70>)
 80018be:	f7ff f89b 	bl	80009f8 <HESP_SEND_COMMAND>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e00c      	b.n	80018e2 <SWIFI_errTurnOn+0x5e>
		}
		else if( SWIFI_MODE_STATION_AND_SOFTAP == Copy_u8WIFIMode)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d107      	bne.n	80018de <SWIFI_errTurnOn+0x5a>
		{
			L_errESP_Status = HESP_SEND_COMMAND("AT+CWMODE=3\r\n",WIFI_Buffer,100);
 80018ce:	2264      	movs	r2, #100	; 0x64
 80018d0:	4906      	ldr	r1, [pc, #24]	; (80018ec <SWIFI_errTurnOn+0x68>)
 80018d2:	4809      	ldr	r0, [pc, #36]	; (80018f8 <SWIFI_errTurnOn+0x74>)
 80018d4:	f7ff f890 	bl	80009f8 <HESP_SEND_COMMAND>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e001      	b.n	80018e2 <SWIFI_errTurnOn+0x5e>
		}
		else
		{
			L_errESP_Status = ESP_ERROR;
 80018de:	2302      	movs	r3, #2
 80018e0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return (WIFI_ERROR_T) L_errESP_Status;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000184 	.word	0x20000184
 80018f0:	080034ec 	.word	0x080034ec
 80018f4:	080034fc 	.word	0x080034fc
 80018f8:	0800350c 	.word	0x0800350c

080018fc <SWIFI_errConnectSSID>:


WIFI_ERROR_T	SWIFI_errConnectSSID(const char * Copy_pu8SSID ,const char * Copy_puPassword)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	ESP_ERR_T L_errESP_Status = HESP_errCheckESP();
 8001906:	f7ff f939 	bl	8000b7c <HESP_errCheckESP>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]

	if( ESP_OK == L_errESP_Status )
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d125      	bne.n	8001960 <SWIFI_errConnectSSID+0x64>
	{
		HESP_SEND_COMMAND("AT+CWJAP=",NULL_POINTER,0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	4814      	ldr	r0, [pc, #80]	; (800196c <SWIFI_errConnectSSID+0x70>)
 800191a:	f7ff f86d 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND("\"",NULL_POINTER,0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	4813      	ldr	r0, [pc, #76]	; (8001970 <SWIFI_errConnectSSID+0x74>)
 8001924:	f7ff f868 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Copy_pu8SSID,NULL_POINTER,0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff f863 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND("\",",NULL_POINTER,0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <SWIFI_errConnectSSID+0x78>)
 8001938:	f7ff f85e 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND("\"",NULL_POINTER,0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <SWIFI_errConnectSSID+0x74>)
 8001942:	f7ff f859 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Copy_puPassword,NULL_POINTER,0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f7ff f854 	bl	80009f8 <HESP_SEND_COMMAND>
		L_errESP_Status =  HESP_SEND_COMMAND("\"\r\n",WIFI_Buffer,30000);
 8001950:	f247 5230 	movw	r2, #30000	; 0x7530
 8001954:	4908      	ldr	r1, [pc, #32]	; (8001978 <SWIFI_errConnectSSID+0x7c>)
 8001956:	4809      	ldr	r0, [pc, #36]	; (800197c <SWIFI_errConnectSSID+0x80>)
 8001958:	f7ff f84e 	bl	80009f8 <HESP_SEND_COMMAND>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
	}

	return (WIFI_ERROR_T)L_errESP_Status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	0800351c 	.word	0x0800351c
 8001970:	08003528 	.word	0x08003528
 8001974:	0800352c 	.word	0x0800352c
 8001978:	20000184 	.word	0x20000184
 800197c:	08003530 	.word	0x08003530

08001980 <SWIFI_errCreateTCPServer>:

	return (WIFI_ERROR_T)L_errWIFI_Status;
}

WIFI_ERROR_T	SWIFI_errCreateTCPServer(const char * Copy_u16PortNumber)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	ESP_ERR_T L_errWIFI_Status = HESP_errCheckESP();
 8001988:	f7ff f8f8 	bl	8000b7c <HESP_errCheckESP>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]

	if( ESP_OK == L_errWIFI_Status )
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d116      	bne.n	80019c4 <SWIFI_errCreateTCPServer+0x44>
	{
		HESP_SEND_COMMAND("AT+CIPMUX=1\r\n",WIFI_Buffer,100);
 8001996:	2264      	movs	r2, #100	; 0x64
 8001998:	490d      	ldr	r1, [pc, #52]	; (80019d0 <SWIFI_errCreateTCPServer+0x50>)
 800199a:	480e      	ldr	r0, [pc, #56]	; (80019d4 <SWIFI_errCreateTCPServer+0x54>)
 800199c:	f7ff f82c 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND("AT+CIPSERVER=1,",NULL_POINTER,100);
 80019a0:	2264      	movs	r2, #100	; 0x64
 80019a2:	2100      	movs	r1, #0
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <SWIFI_errCreateTCPServer+0x58>)
 80019a6:	f7ff f827 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Copy_u16PortNumber,NULL_POINTER,100);
 80019aa:	2264      	movs	r2, #100	; 0x64
 80019ac:	2100      	movs	r1, #0
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff f822 	bl	80009f8 <HESP_SEND_COMMAND>
		L_errWIFI_Status = HESP_SEND_COMMAND("\r\n",WIFI_Buffer,3000);
 80019b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019b8:	4905      	ldr	r1, [pc, #20]	; (80019d0 <SWIFI_errCreateTCPServer+0x50>)
 80019ba:	4808      	ldr	r0, [pc, #32]	; (80019dc <SWIFI_errCreateTCPServer+0x5c>)
 80019bc:	f7ff f81c 	bl	80009f8 <HESP_SEND_COMMAND>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
	}

	return (WIFI_ERROR_T)L_errWIFI_Status;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000184 	.word	0x20000184
 80019d4:	08003560 	.word	0x08003560
 80019d8:	08003570 	.word	0x08003570
 80019dc:	0800355c 	.word	0x0800355c

080019e0 <SWIFI_errConnectTCP>:
WIFI_ERROR_T	SWIFI_errConnectTCP(const char *Copy_u16ID, const char * Copy_pu8ServerIP, const char * Copy_pu8ServerPort)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	ESP_ERR_T L_errWIFI_Status = HESP_errCheckESP();
 80019ec:	f7ff f8c6 	bl	8000b7c <HESP_errCheckESP>
 80019f0:	4603      	mov	r3, r0
 80019f2:	75fb      	strb	r3, [r7, #23]

	if( ESP_OK == L_errWIFI_Status )
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d12e      	bne.n	8001a58 <SWIFI_errConnectTCP+0x78>
	{
		HESP_SEND_COMMAND("AT+CIPSTART=",NULL_POINTER,100);
 80019fa:	2264      	movs	r2, #100	; 0x64
 80019fc:	2100      	movs	r1, #0
 80019fe:	4819      	ldr	r0, [pc, #100]	; (8001a64 <SWIFI_errConnectTCP+0x84>)
 8001a00:	f7fe fffa 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Copy_u16ID,NULL_POINTER,100);
 8001a04:	2264      	movs	r2, #100	; 0x64
 8001a06:	2100      	movs	r1, #0
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7fe fff5 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(",\"TCP\",\"",NULL_POINTER,100);
 8001a0e:	2264      	movs	r2, #100	; 0x64
 8001a10:	2100      	movs	r1, #0
 8001a12:	4815      	ldr	r0, [pc, #84]	; (8001a68 <SWIFI_errConnectTCP+0x88>)
 8001a14:	f7fe fff0 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Copy_pu8ServerIP,NULL_POINTER,100);
 8001a18:	2264      	movs	r2, #100	; 0x64
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	68b8      	ldr	r0, [r7, #8]
 8001a1e:	f7fe ffeb 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND("\",",NULL_POINTER,100);
 8001a22:	2264      	movs	r2, #100	; 0x64
 8001a24:	2100      	movs	r1, #0
 8001a26:	4811      	ldr	r0, [pc, #68]	; (8001a6c <SWIFI_errConnectTCP+0x8c>)
 8001a28:	f7fe ffe6 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Copy_pu8ServerPort,NULL_POINTER,100);
 8001a2c:	2264      	movs	r2, #100	; 0x64
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7fe ffe1 	bl	80009f8 <HESP_SEND_COMMAND>
		L_errWIFI_Status = HESP_SEND_COMMAND("\r\n",WIFI_Buffer,300);
 8001a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a3a:	490d      	ldr	r1, [pc, #52]	; (8001a70 <SWIFI_errConnectTCP+0x90>)
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <SWIFI_errConnectTCP+0x94>)
 8001a3e:	f7fe ffdb 	bl	80009f8 <HESP_SEND_COMMAND>
 8001a42:	4603      	mov	r3, r0
 8001a44:	75fb      	strb	r3, [r7, #23]
		if(L_errWIFI_Status == ESP_OK)
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <SWIFI_errConnectTCP+0x78>
		{
			SWIFI_Connections_status[Copy_u16ID[0] - '0'] = Connection_Open;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3b30      	subs	r3, #48	; 0x30
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <SWIFI_errConnectTCP+0x98>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	54d1      	strb	r1, [r2, r3]
		}
	}

	return (WIFI_ERROR_T)L_errWIFI_Status;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	08003580 	.word	0x08003580
 8001a68:	08003590 	.word	0x08003590
 8001a6c:	0800352c 	.word	0x0800352c
 8001a70:	20000184 	.word	0x20000184
 8001a74:	0800355c 	.word	0x0800355c
 8001a78:	20000208 	.word	0x20000208

08001a7c <SWIFI_errDisconnectTCP>:
WIFI_ERROR_T	SWIFI_errDisconnectTCP(const char * Copy_u16ID)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	ESP_ERR_T L_errWIFI_Status = HESP_errCheckESP();
 8001a84:	f7ff f87a 	bl	8000b7c <HESP_errCheckESP>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
	if( ESP_OK == L_errWIFI_Status )
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d119      	bne.n	8001ac6 <SWIFI_errDisconnectTCP+0x4a>
	{
		HESP_SEND_COMMAND("AT+CIPCLOSE=",NULL_POINTER,100);
 8001a92:	2264      	movs	r2, #100	; 0x64
 8001a94:	2100      	movs	r1, #0
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <SWIFI_errDisconnectTCP+0x54>)
 8001a98:	f7fe ffae 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Copy_u16ID,NULL_POINTER,100);
 8001a9c:	2264      	movs	r2, #100	; 0x64
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7fe ffa9 	bl	80009f8 <HESP_SEND_COMMAND>
		L_errWIFI_Status = HESP_SEND_COMMAND("\r\n",WIFI_Buffer,1);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	490a      	ldr	r1, [pc, #40]	; (8001ad4 <SWIFI_errDisconnectTCP+0x58>)
 8001aaa:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <SWIFI_errDisconnectTCP+0x5c>)
 8001aac:	f7fe ffa4 	bl	80009f8 <HESP_SEND_COMMAND>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]
		if(L_errWIFI_Status == ESP_OK)
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d105      	bne.n	8001ac6 <SWIFI_errDisconnectTCP+0x4a>
		{
			SWIFI_Connections_status[Copy_u16ID[0] - '0'] = Connection_Closed;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3b30      	subs	r3, #48	; 0x30
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <SWIFI_errDisconnectTCP+0x60>)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	54d1      	strb	r1, [r2, r3]
		}
	}

	return (WIFI_ERROR_T)L_errWIFI_Status;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	0800359c 	.word	0x0800359c
 8001ad4:	20000184 	.word	0x20000184
 8001ad8:	0800355c 	.word	0x0800355c
 8001adc:	20000208 	.word	0x20000208

08001ae0 <SWIFI_errSendDataTCP>:

WIFI_ERROR_T	SWIFI_errSendDataTCP(const char * Copy_u16ID, const char * Data)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	static char Temp[5];
	ESP_ERR_T L_errWIFI_Status = HESP_errCheckESP();
 8001aea:	f7ff f847 	bl	8000b7c <HESP_errCheckESP>
 8001aee:	4603      	mov	r3, r0
 8001af0:	73fb      	strb	r3, [r7, #15]

	itoa(strlen(Data),Temp,10);
 8001af2:	6838      	ldr	r0, [r7, #0]
 8001af4:	f7fe fb3c 	bl	8000170 <strlen>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220a      	movs	r2, #10
 8001afc:	491f      	ldr	r1, [pc, #124]	; (8001b7c <SWIFI_errSendDataTCP+0x9c>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 ff20 	bl	8002944 <itoa>
	if(Temp[0] == '0' &&  Temp[1] == '\0')
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <SWIFI_errSendDataTCP+0x9c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b30      	cmp	r3, #48	; 0x30
 8001b0a:	d107      	bne.n	8001b1c <SWIFI_errSendDataTCP+0x3c>
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <SWIFI_errSendDataTCP+0x9c>)
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <SWIFI_errSendDataTCP+0x3c>
	{
		L_errWIFI_Status = HESP_errCheckESP();
 8001b14:	f7ff f832 	bl	8000b7c <HESP_errCheckESP>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	73fb      	strb	r3, [r7, #15]
	}
	if( ESP_OK == L_errWIFI_Status )
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d126      	bne.n	8001b70 <SWIFI_errSendDataTCP+0x90>
	{
		HESP_SEND_COMMAND("AT+CIPSEND=",NULL_POINTER,100);
 8001b22:	2264      	movs	r2, #100	; 0x64
 8001b24:	2100      	movs	r1, #0
 8001b26:	4816      	ldr	r0, [pc, #88]	; (8001b80 <SWIFI_errSendDataTCP+0xa0>)
 8001b28:	f7fe ff66 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Copy_u16ID,NULL_POINTER,100);
 8001b2c:	2264      	movs	r2, #100	; 0x64
 8001b2e:	2100      	movs	r1, #0
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7fe ff61 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(",",NULL_POINTER,100);
 8001b36:	2264      	movs	r2, #100	; 0x64
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4812      	ldr	r0, [pc, #72]	; (8001b84 <SWIFI_errSendDataTCP+0xa4>)
 8001b3c:	f7fe ff5c 	bl	80009f8 <HESP_SEND_COMMAND>
		HESP_SEND_COMMAND(Temp,NULL_POINTER,30);
 8001b40:	221e      	movs	r2, #30
 8001b42:	2100      	movs	r1, #0
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <SWIFI_errSendDataTCP+0x9c>)
 8001b46:	f7fe ff57 	bl	80009f8 <HESP_SEND_COMMAND>
		L_errWIFI_Status = HESP_SEND_COMMAND("\r\n",WIFI_Buffer,300);
 8001b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b4e:	490e      	ldr	r1, [pc, #56]	; (8001b88 <SWIFI_errSendDataTCP+0xa8>)
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <SWIFI_errSendDataTCP+0xac>)
 8001b52:	f7fe ff51 	bl	80009f8 <HESP_SEND_COMMAND>
 8001b56:	4603      	mov	r3, r0
 8001b58:	73fb      	strb	r3, [r7, #15]
		if(ESP_OK ==  L_errWIFI_Status)
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <SWIFI_errSendDataTCP+0x90>
		{
			L_errWIFI_Status = HESP_SEND_COMMAND(Data,WIFI_Buffer,3000);
 8001b60:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b64:	4908      	ldr	r1, [pc, #32]	; (8001b88 <SWIFI_errSendDataTCP+0xa8>)
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f7fe ff46 	bl	80009f8 <HESP_SEND_COMMAND>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73fb      	strb	r3, [r7, #15]
		}
	}

	return (WIFI_ERROR_T)L_errWIFI_Status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000210 	.word	0x20000210
 8001b80:	080035ac 	.word	0x080035ac
 8001b84:	08003558 	.word	0x08003558
 8001b88:	20000184 	.word	0x20000184
 8001b8c:	0800355c 	.word	0x0800355c

08001b90 <SWIFI_errStartCommunicationHandler>:


void	SWIFI_errStartCommunicationHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	HESP_CALLBACK_INIT(SWIFI_voidKeysCapture);
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <SWIFI_errStartCommunicationHandler+0x14>)
 8001b96:	f7fe ffcf 	bl	8000b38 <HESP_CALLBACK_INIT>
	HESP_voidInterruptEnable();
 8001b9a:	f7fe ffdc 	bl	8000b56 <HESP_voidInterruptEnable>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	08001c09 	.word	0x08001c09

08001ba8 <SWIFI_errSetCaptureKeys>:
WIFI_ERROR_T	SWIFI_errSetCaptureKeys(SWIFI_COMM_Handler_T * Copy_pUserKeys , u8 Copy_u8KeysNumbers)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
	ESP_ERR_T L_errWIFIStatus =WIFI_ERROR;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	73fb      	strb	r3, [r7, #15]
	if(NULL_POINTER != Copy_pUserKeys)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <SWIFI_errSetCaptureKeys+0x26>
	{
		UserDefinedKeys = Copy_pUserKeys;
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <SWIFI_errSetCaptureKeys+0x34>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6013      	str	r3, [r2, #0]
		UserDefinedKeysNumber =Copy_u8KeysNumbers;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <SWIFI_errSetCaptureKeys+0x38>)
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	7013      	strb	r3, [r2, #0]
		L_errWIFIStatus =  WIFI_OK;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
	}
	return L_errWIFIStatus;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000200 	.word	0x20000200
 8001be0:	200001fd 	.word	0x200001fd

08001be4 <SWIFI_voidSetConnectionFailHandler>:
void SWIFI_voidSetConnectionFailHandler(FUNC_T UserFunc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	if(NULL_POINTER != UserFunc)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <SWIFI_voidSetConnectionFailHandler+0x14>
	{
		ConnectFailHandler = UserFunc;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <SWIFI_voidSetConnectionFailHandler+0x20>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6013      	str	r3, [r2, #0]
	}
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000204 	.word	0x20000204

08001c08 <SWIFI_voidKeysCapture>:

static void SWIFI_voidKeysCapture(void)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
	u32 L_intCounter = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
	WIFI_Buffer[L_Buffer_Count] = MUART_u16GetData(ESP_UART_NUMBER);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff fd67 	bl	80016e6 <MUART_u16GetData>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <SWIFI_voidKeysCapture+0xd4>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	b2c9      	uxtb	r1, r1
 8001c24:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <SWIFI_voidKeysCapture+0xd8>)
 8001c26:	5499      	strb	r1, [r3, r2]

	//Capturing the systems keywords
	for(L_intCounter = 0 ; L_intCounter < SYSCALL_SIZE ; L_intCounter++ )
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	e040      	b.n	8001cb0 <SWIFI_voidKeysCapture+0xa8>
	{
		if ( 1 == SysCaptureKey )
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <SWIFI_voidKeysCapture+0xd4>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	1c59      	adds	r1, r3, #1
 8001c34:	482b      	ldr	r0, [pc, #172]	; (8001ce4 <SWIFI_voidKeysCapture+0xdc>)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4403      	add	r3, r0
 8001c42:	3308      	adds	r3, #8
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	1acb      	subs	r3, r1, r3
 8001c48:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <SWIFI_voidKeysCapture+0xd8>)
 8001c4a:	1898      	adds	r0, r3, r2
 8001c4c:	4925      	ldr	r1, [pc, #148]	; (8001ce4 <SWIFI_voidKeysCapture+0xdc>)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	4c21      	ldr	r4, [pc, #132]	; (8001ce4 <SWIFI_voidKeysCapture+0xdc>)
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4423      	add	r3, r4
 8001c6c:	3308      	adds	r3, #8
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	f000 ff85 	bl	8002b80 <strncmp>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d116      	bne.n	8001caa <SWIFI_voidKeysCapture+0xa2>
		{
			if(NULL_POINTER != SystemCalls[L_intCounter].pDest_Function)
 8001c7c:	4919      	ldr	r1, [pc, #100]	; (8001ce4 <SWIFI_voidKeysCapture+0xdc>)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00c      	beq.n	8001caa <SWIFI_voidKeysCapture+0xa2>
			{
				SystemCalls[L_intCounter].pDest_Function();
 8001c90:	4914      	ldr	r1, [pc, #80]	; (8001ce4 <SWIFI_voidKeysCapture+0xdc>)
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4798      	blx	r3
				L_Buffer_Count=0;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <SWIFI_voidKeysCapture+0xd4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
				break;
 8001ca8:	e005      	b.n	8001cb6 <SWIFI_voidKeysCapture+0xae>
	for(L_intCounter = 0 ; L_intCounter < SYSCALL_SIZE ; L_intCounter++ )
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3301      	adds	r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d9bb      	bls.n	8001c2e <SWIFI_voidKeysCapture+0x26>
			}
		}
	}

	L_Buffer_Count++;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <SWIFI_voidKeysCapture+0xd4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <SWIFI_voidKeysCapture+0xd4>)
 8001cc0:	701a      	strb	r2, [r3, #0]
	//Buffer Overflow
	if(L_Buffer_Count == WIFI_Buffer_Size )
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <SWIFI_voidKeysCapture+0xd4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b78      	cmp	r3, #120	; 0x78
 8001cc8:	d103      	bne.n	8001cd2 <SWIFI_voidKeysCapture+0xca>
	{
		L_Buffer_Count=0;
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SWIFI_voidKeysCapture+0xd4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
		//Handle by func if it needed
	}
	return;
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop

}
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200001fc 	.word	0x200001fc
 8001ce0:	20000184 	.word	0x20000184
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <SWIFI_voidIPDHandler>:

static void SWIFI_voidIPDHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	HESP_CALLBACK_INIT(SWIFI_voidMessageCapture);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <SWIFI_voidIPDHandler+0x10>)
 8001cee:	f7fe ff23 	bl	8000b38 <HESP_CALLBACK_INIT>
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	08001cfd 	.word	0x08001cfd

08001cfc <SWIFI_voidMessageCapture>:

/*IPD,ID,length:Data*/
static void SWIFI_voidMessageCapture(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	static u8 	L_u8IsRecData 					= 0;
	static u16 	L_16Data_size 					= 0;
	static SWIFI_MSG_T * MSG;
	static u8 L_u8ID;

	u8 Temp = MUART_u16GetData(ESP_UART_NUMBER);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff fcef 	bl	80016e6 <MUART_u16GetData>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]


	//Capturing the user keywords
	if(L_u8IsRecData == 1 )
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <SWIFI_voidMessageCapture+0x144>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d130      	bne.n	8001d76 <SWIFI_voidMessageCapture+0x7a>
	{
		MSG->Data[L_u8IsRecLength_And_Counter] = Temp ;
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <SWIFI_voidMessageCapture+0x148>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a4b      	ldr	r2, [pc, #300]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001d1c:	8812      	ldrh	r2, [r2, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	79fa      	ldrb	r2, [r7, #7]
 8001d22:	701a      	strb	r2, [r3, #0]
		L_u8IsRecLength_And_Counter++;
 8001d24:	4b48      	ldr	r3, [pc, #288]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001d2e:	801a      	strh	r2, [r3, #0]
		if(L_u8IsRecLength_And_Counter == L_16Data_size )
 8001d30:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	4b45      	ldr	r3, [pc, #276]	; (8001e4c <SWIFI_voidMessageCapture+0x150>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d177      	bne.n	8001e2c <SWIFI_voidMessageCapture+0x130>
		{
			HESP_CALLBACK_INIT(SWIFI_voidKeysCapture);
 8001d3c:	4844      	ldr	r0, [pc, #272]	; (8001e50 <SWIFI_voidMessageCapture+0x154>)
 8001d3e:	f7fe fefb 	bl	8000b38 <HESP_CALLBACK_INIT>
			MSG->Data[L_u8IsRecLength_And_Counter] = '\0';
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <SWIFI_voidMessageCapture+0x148>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a3f      	ldr	r2, [pc, #252]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001d4a:	8812      	ldrh	r2, [r2, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
			//Reset everything
			L_u8Entry_Counter = 0;
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <SWIFI_voidMessageCapture+0x158>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
			L_u8IsRecLength_And_Counter = 0;
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
			L_u8IsRecData = 0;
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <SWIFI_voidMessageCapture+0x144>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			L_16Data_size = 0;
 8001d64:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <SWIFI_voidMessageCapture+0x150>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	801a      	strh	r2, [r3, #0]
			SWIFI_voidCommunicationHandler(MSG);
 8001d6a:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <SWIFI_voidMessageCapture+0x148>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f876 	bl	8001e60 <SWIFI_voidCommunicationHandler>
			return;
 8001d74:	e060      	b.n	8001e38 <SWIFI_voidMessageCapture+0x13c>
		}
	}
	else
	{

		if(L_u8Entry_Counter == 0)
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <SWIFI_voidMessageCapture+0x158>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <SWIFI_voidMessageCapture+0x94>
		{
			L_u8ID = Temp - '0';
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	3b30      	subs	r3, #48	; 0x30
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <SWIFI_voidMessageCapture+0x15c>)
 8001d86:	701a      	strb	r2, [r3, #0]
			L_u8IsRecLength_And_Counter = 1;
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	e04d      	b.n	8001e2c <SWIFI_voidMessageCapture+0x130>
		}
		else if(L_u8Entry_Counter >= 2 && L_u8IsRecLength_And_Counter == 1)
 8001d90:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <SWIFI_voidMessageCapture+0x158>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d949      	bls.n	8001e2c <SWIFI_voidMessageCapture+0x130>
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d145      	bne.n	8001e2c <SWIFI_voidMessageCapture+0x130>
		{
			if(Temp  != ':')
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b3a      	cmp	r3, #58	; 0x3a
 8001da4:	d00f      	beq.n	8001dc6 <SWIFI_voidMessageCapture+0xca>
			{
				L_16Data_size = L_16Data_size * 10 + (Temp - '0');
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <SWIFI_voidMessageCapture+0x150>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b30      	subs	r3, #48	; 0x30
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <SWIFI_voidMessageCapture+0x150>)
 8001dc2:	801a      	strh	r2, [r3, #0]
 8001dc4:	e032      	b.n	8001e2c <SWIFI_voidMessageCapture+0x130>

			}
			else
			{
				MSG = CreateMsg(L_16Data_size);
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <SWIFI_voidMessageCapture+0x150>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f896 	bl	8001efc <CreateMsg>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <SWIFI_voidMessageCapture+0x148>)
 8001dd4:	6013      	str	r3, [r2, #0]
				if(NULL_POINTER == MSG )
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <SWIFI_voidMessageCapture+0x148>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <SWIFI_voidMessageCapture+0x102>
				{
					L_u8Entry_Counter = 0;
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <SWIFI_voidMessageCapture+0x158>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
					L_u8IsRecLength_And_Counter = 0;
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	801a      	strh	r2, [r3, #0]
					L_u8IsRecData = 0;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <SWIFI_voidMessageCapture+0x144>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
					L_16Data_size = 0;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <SWIFI_voidMessageCapture+0x150>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]
					HESP_CALLBACK_INIT(SWIFI_voidKeysCapture);
 8001df6:	4816      	ldr	r0, [pc, #88]	; (8001e50 <SWIFI_voidMessageCapture+0x154>)
 8001df8:	f7fe fe9e 	bl	8000b38 <HESP_CALLBACK_INIT>
					return;
 8001dfc:	e01c      	b.n	8001e38 <SWIFI_voidMessageCapture+0x13c>
				}
				MSG->Connection_info = Connections_Info[L_u8ID];
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <SWIFI_voidMessageCapture+0x15c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <SWIFI_voidMessageCapture+0x148>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4914      	ldr	r1, [pc, #80]	; (8001e5c <SWIFI_voidMessageCapture+0x160>)
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4403      	add	r3, r0
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4419      	add	r1, r3
 8001e14:	f102 0308 	add.w	r3, r2, #8
 8001e18:	460a      	mov	r2, r1
 8001e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				L_u8IsRecData = 1;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <SWIFI_voidMessageCapture+0x144>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
				L_u8IsRecLength_And_Counter=0;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <SWIFI_voidMessageCapture+0x14c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
			}	
		}

	}
	L_u8Entry_Counter++;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <SWIFI_voidMessageCapture+0x158>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <SWIFI_voidMessageCapture+0x158>)
 8001e36:	701a      	strb	r2, [r3, #0]
}
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000215 	.word	0x20000215
 8001e44:	20000218 	.word	0x20000218
 8001e48:	2000021c 	.word	0x2000021c
 8001e4c:	2000021e 	.word	0x2000021e
 8001e50:	08001c09 	.word	0x08001c09
 8001e54:	20000220 	.word	0x20000220
 8001e58:	20000221 	.word	0x20000221
 8001e5c:	2000004c 	.word	0x2000004c

08001e60 <SWIFI_voidCommunicationHandler>:

static void SWIFI_voidCommunicationHandler(SWIFI_MSG_T* Copy_pMSG)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	u32 L_intCounter = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
	for(L_intCounter = 0 ; L_intCounter < UserDefinedKeysNumber ; L_intCounter++ )
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e034      	b.n	8001edc <SWIFI_voidCommunicationHandler+0x7c>
	{
		if( 1 == UserCaptureKey)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <SWIFI_voidCommunicationHandler+0x94>)
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	685c      	ldr	r4, [r3, #4]
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <SWIFI_voidCommunicationHandler+0x94>)
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	7a1b      	ldrb	r3, [r3, #8]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	f000 fe6f 	bl	8002b80 <strncmp>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d116      	bne.n	8001ed6 <SWIFI_voidCommunicationHandler+0x76>
		{
			if(NULL_POINTER != UserDefinedKeys[L_intCounter].pDest_Function)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <SWIFI_voidCommunicationHandler+0x94>)
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d015      	beq.n	8001eea <SWIFI_voidCommunicationHandler+0x8a>
			{
				UserDefinedKeys[L_intCounter].pDest_Function(Copy_pMSG);
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <SWIFI_voidCommunicationHandler+0x94>)
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
			}
			break;
 8001ed4:	e009      	b.n	8001eea <SWIFI_voidCommunicationHandler+0x8a>
	for(L_intCounter = 0 ; L_intCounter < UserDefinedKeysNumber ; L_intCounter++ )
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SWIFI_voidCommunicationHandler+0x98>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d3c4      	bcc.n	8001e72 <SWIFI_voidCommunicationHandler+0x12>
		}
	}

}
 8001ee8:	e000      	b.n	8001eec <SWIFI_voidCommunicationHandler+0x8c>
			break;
 8001eea:	bf00      	nop
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}
 8001ef4:	20000200 	.word	0x20000200
 8001ef8:	200001fd 	.word	0x200001fd

08001efc <CreateMsg>:

SWIFI_MSG_T * CreateMsg(u16 Copy_u8MSG_Size)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
	SWIFI_MSG_T * L_pMSG = malloc(sizeof(SWIFI_MSG_T));
 8001f06:	2014      	movs	r0, #20
 8001f08:	f000 fd1e 	bl	8002948 <malloc>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60fb      	str	r3, [r7, #12]
	if(L_pMSG != NULL_POINTER)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <CreateMsg+0x3c>
	{
		L_pMSG->Data = malloc(Copy_u8MSG_Size+1);
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fd14 	bl	8002948 <malloc>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	601a      	str	r2, [r3, #0]
		if(NULL_POINTER !=  L_pMSG->Data)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <CreateMsg+0x3c>
		{
			L_pMSG->Data_size = Copy_u8MSG_Size;
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	711a      	strb	r2, [r3, #4]

		}
	}
	return L_pMSG;
 8001f38:	68fb      	ldr	r3, [r7, #12]

}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <DeleteMsg>:

void DeleteMsg(SWIFI_MSG_T * Copy_pMSG)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	if(Copy_pMSG != NULL_POINTER)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <DeleteMsg+0x1e>
	{
		free(Copy_pMSG->Data);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fcff 	bl	8002958 <free>
		free(Copy_pMSG);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fcfc 	bl	8002958 <free>
	}
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <Systemhandel_voidConnectedNotify>:
static void Systemhandel_voidConnectedNotify(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
	Buffer_Count_ST L_Start = L_Buffer_Count - 8 ;
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <Systemhandel_voidConnectedNotify+0xa4>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3b08      	subs	r3, #8
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	71fb      	strb	r3, [r7, #7]
	u8 ID = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	71bb      	strb	r3, [r7, #6]
	if(L_Start < 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da20      	bge.n	8001fc6 <Systemhandel_voidConnectedNotify+0x5e>
	{
		ID = WIFI_Buffer[(WIFI_Buffer_Size - L_Start)] - '0';
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001f8c:	4a20      	ldr	r2, [pc, #128]	; (8002010 <Systemhandel_voidConnectedNotify+0xa8>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	3b30      	subs	r3, #48	; 0x30
 8001f92:	71bb      	strb	r3, [r7, #6]
		SWIFI_Connections_status[ID] = Connection_Open;
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <Systemhandel_voidConnectedNotify+0xac>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	54d1      	strb	r1, [r2, r3]
		Connections_Info[ID].Connection_Number ++;
 8001f9c:	79ba      	ldrb	r2, [r7, #6]
 8001f9e:	491e      	ldr	r1, [pc, #120]	; (8002018 <Systemhandel_voidConnectedNotify+0xb0>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	3304      	adds	r3, #4
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b298      	uxth	r0, r3
 8001fb2:	4919      	ldr	r1, [pc, #100]	; (8002018 <Systemhandel_voidConnectedNotify+0xb0>)
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	801a      	strh	r2, [r3, #0]
		ID = WIFI_Buffer[L_Start] - '0';
		SWIFI_Connections_status[ID] = Connection_Open;
		Connections_Info[ID].Connection_Number ++;
	}

}
 8001fc4:	e01d      	b.n	8002002 <Systemhandel_voidConnectedNotify+0x9a>
		ID = WIFI_Buffer[L_Start] - '0';
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	4a11      	ldr	r2, [pc, #68]	; (8002010 <Systemhandel_voidConnectedNotify+0xa8>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	3b30      	subs	r3, #48	; 0x30
 8001fd0:	71bb      	strb	r3, [r7, #6]
		SWIFI_Connections_status[ID] = Connection_Open;
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <Systemhandel_voidConnectedNotify+0xac>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	54d1      	strb	r1, [r2, r3]
		Connections_Info[ID].Connection_Number ++;
 8001fda:	79ba      	ldrb	r2, [r7, #6]
 8001fdc:	490e      	ldr	r1, [pc, #56]	; (8002018 <Systemhandel_voidConnectedNotify+0xb0>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3304      	adds	r3, #4
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	b298      	uxth	r0, r3
 8001ff0:	4909      	ldr	r1, [pc, #36]	; (8002018 <Systemhandel_voidConnectedNotify+0xb0>)
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4602      	mov	r2, r0
 8002000:	801a      	strh	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	200001fc 	.word	0x200001fc
 8002010:	20000184 	.word	0x20000184
 8002014:	20000208 	.word	0x20000208
 8002018:	2000004c 	.word	0x2000004c

0800201c <Systemhandel_voidClosedNotify>:
static void Systemhandel_voidClosedNotify(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
	Buffer_Count_ST L_Start = L_Buffer_Count - 8 ;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <Systemhandel_voidClosedNotify+0x54>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3b08      	subs	r3, #8
 8002028:	b2db      	uxtb	r3, r3
 800202a:	71fb      	strb	r3, [r7, #7]
	u8 ID = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	71bb      	strb	r3, [r7, #6]
	if(L_Start < 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0c      	bge.n	8002052 <Systemhandel_voidClosedNotify+0x36>
	{
		ID = WIFI_Buffer[(WIFI_Buffer_Size - L_Start)] - '0';
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002040:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <Systemhandel_voidClosedNotify+0x58>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	3b30      	subs	r3, #48	; 0x30
 8002046:	71bb      	strb	r3, [r7, #6]
		SWIFI_Connections_status[ID] = Connection_Closed;
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <Systemhandel_voidClosedNotify+0x5c>)
 800204c:	2100      	movs	r1, #0
 800204e:	54d1      	strb	r1, [r2, r3]
	else
	{
		ID = WIFI_Buffer[L_Start] - '0';
		SWIFI_Connections_status[ID] = Connection_Closed;
	}
}
 8002050:	e009      	b.n	8002066 <Systemhandel_voidClosedNotify+0x4a>
		ID = WIFI_Buffer[L_Start] - '0';
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <Systemhandel_voidClosedNotify+0x58>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	3b30      	subs	r3, #48	; 0x30
 800205c:	71bb      	strb	r3, [r7, #6]
		SWIFI_Connections_status[ID] = Connection_Closed;
 800205e:	79bb      	ldrb	r3, [r7, #6]
 8002060:	4a05      	ldr	r2, [pc, #20]	; (8002078 <Systemhandel_voidClosedNotify+0x5c>)
 8002062:	2100      	movs	r1, #0
 8002064:	54d1      	strb	r1, [r2, r3]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	200001fc 	.word	0x200001fc
 8002074:	20000184 	.word	0x20000184
 8002078:	20000208 	.word	0x20000208

0800207c <Systemhandel_voidConnectionFail>:
static void Systemhandel_voidConnectionFail(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0

	//Must reinit everything ->to be in APP layer
	if(NULL_POINTER != ConnectFailHandler)
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <Systemhandel_voidConnectionFail+0x18>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <Systemhandel_voidConnectionFail+0x12>
	{
		ConnectFailHandler();
 8002088:	4b02      	ldr	r3, [pc, #8]	; (8002094 <Systemhandel_voidConnectionFail+0x18>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4798      	blx	r3
	}
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000204 	.word	0x20000204

08002098 <Systemhandel_voidBusyNotify>:
void Systemhandel_voidBusyNotify(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
	u32 L_u32counter = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
	for(L_u32counter = 0; L_u32counter <3000; L_u32counter++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e005      	b.n	80020b4 <Systemhandel_voidBusyNotify+0x1c>
		MSYSTICK_stderrorSetBusyWait(TICK_FOR_MSEC);
 80020a8:	4807      	ldr	r0, [pc, #28]	; (80020c8 <Systemhandel_voidBusyNotify+0x30>)
 80020aa:	f7ff f9cf 	bl	800144c <MSYSTICK_stderrorSetBusyWait>
	for(L_u32counter = 0; L_u32counter <3000; L_u32counter++)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3301      	adds	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d9f4      	bls.n	80020a8 <Systemhandel_voidBusyNotify+0x10>
}
 80020be:	bf00      	nop
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	00011940 	.word	0x00011940

080020cc <main>:
#define Server_Port 	"8080"
u8 Server_MCU1_ver ,Server_MCU2_ver , Server_JETSON_ver;
WIFI_ERROR_T Status ;
char Copy_pu8Response[50];
int main()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0

	App_init();
 80020d0:	f000 f82c 	bl	800212c <App_init>
	WIFI_init();
 80020d4:	f000 f844 	bl	8002160 <WIFI_init>
	SWIFI_voidSetConnectionFailHandler(WIFI_init);
 80020d8:	480f      	ldr	r0, [pc, #60]	; (8002118 <main+0x4c>)
 80020da:	f7ff fd83 	bl	8001be4 <SWIFI_voidSetConnectionFailHandler>

	while(1)
	{

		 CheckForUpdates();
 80020de:	f000 f8b7 	bl	8002250 <CheckForUpdates>

		if(Server_MCU1_ver > Ver_MCU1)
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <main+0x50>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <main+0x22>
			MCU1_Update();
 80020ea:	f000 f913 	bl	8002314 <MCU1_Update>
		if(Server_MCU2_ver > Ver_MCU2)
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <main+0x54>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d901      	bls.n	80020fa <main+0x2e>
			MCU2_Update();
 80020f6:	f000 f981 	bl	80023fc <MCU2_Update>
		if(Server_JETSON_ver > Ver_MCU3)
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <main+0x58>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <main+0x3a>
			JETSON_Update();
 8002102:	f000 f9ef 	bl	80024e4 <JETSON_Update>

		//Wait For a  day then get updates again or wait for update request
		while(IsUpdateRequest == 0);
 8002106:	bf00      	nop
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <main+0x5c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0fb      	beq.n	8002108 <main+0x3c>

		//reset these values
		WIFI_init();
 8002110:	f000 f826 	bl	8002160 <WIFI_init>
		 CheckForUpdates();
 8002114:	e7e3      	b.n	80020de <main+0x12>
 8002116:	bf00      	nop
 8002118:	08002161 	.word	0x08002161
 800211c:	20000242 	.word	0x20000242
 8002120:	20000243 	.word	0x20000243
 8002124:	20000244 	.word	0x20000244
 8002128:	20000241 	.word	0x20000241

0800212c <App_init>:
	}

}

void App_init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	MRCC_stderrorInit(PLL_HSE,AHB_PreScaler1,APB_PreScaler2,APB_PreScaler1);
 8002130:	2300      	movs	r3, #0
 8002132:	2204      	movs	r2, #4
 8002134:	2100      	movs	r1, #0
 8002136:	2003      	movs	r0, #3
 8002138:	f7fe ff5c 	bl	8000ff4 <MRCC_stderrorInit>
	MRCC_stderrorSetPllClockFreq(PLL_PreScaler9,Wait_States_2);
 800213c:	2102      	movs	r1, #2
 800213e:	2007      	movs	r0, #7
 8002140:	f7ff f8b8 	bl	80012b4 <MRCC_stderrorSetPllClockFreq>
	RCC_EnablePeripheralClk(APB2,GPIOA_PER);
 8002144:	2102      	movs	r1, #2
 8002146:	2002      	movs	r0, #2
 8002148:	f7ff f910 	bl	800136c <RCC_EnablePeripheralClk>
	MGPIO_stderrorPinModeSelect(GPIOA,PIN0,OUTPUT_PUSH_PULL_SPEED_50MHZ);
 800214c:	2203      	movs	r2, #3
 800214e:	2100      	movs	r1, #0
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe fd39 	bl	8000bc8 <MGPIO_stderrorPinModeSelect>

	/*****ESP initialization********/
	HESP_INIT();
 8002156:	f7fe fc09 	bl	800096c <HESP_INIT>

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <WIFI_init>:
void WIFI_init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	SWIFI_errSetCaptureKeys(Mykeys,4);
 8002164:	2104      	movs	r1, #4
 8002166:	480e      	ldr	r0, [pc, #56]	; (80021a0 <WIFI_init+0x40>)
 8002168:	f7ff fd1e 	bl	8001ba8 <SWIFI_errSetCaptureKeys>
	SWIFI_errTurnOn(SWIFI_MODE_STATION_AND_SOFTAP);
 800216c:	2003      	movs	r0, #3
 800216e:	f7ff fb89 	bl	8001884 <SWIFI_errTurnOn>
	while (SWIFI_errTurnOn(SWIFI_MODE_STATION_AND_SOFTAP) != WIFI_OK);
 8002172:	bf00      	nop
 8002174:	2003      	movs	r0, #3
 8002176:	f7ff fb85 	bl	8001884 <SWIFI_errTurnOn>
 800217a:	4603      	mov	r3, r0
 800217c:	2b01      	cmp	r3, #1
 800217e:	d1f9      	bne.n	8002174 <WIFI_init+0x14>
	while (SWIFI_errConnectSSID("Hello World","Helloworld*#*#10#*#*") != WIFI_OK);
 8002180:	bf00      	nop
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <WIFI_init+0x44>)
 8002184:	4808      	ldr	r0, [pc, #32]	; (80021a8 <WIFI_init+0x48>)
 8002186:	f7ff fbb9 	bl	80018fc <SWIFI_errConnectSSID>
 800218a:	4603      	mov	r3, r0
 800218c:	2b01      	cmp	r3, #1
 800218e:	d1f8      	bne.n	8002182 <WIFI_init+0x22>
	SWIFI_errCreateTCPServer(Server_Port); //I don't need but for test purposes
 8002190:	4806      	ldr	r0, [pc, #24]	; (80021ac <WIFI_init+0x4c>)
 8002192:	f7ff fbf5 	bl	8001980 <SWIFI_errCreateTCPServer>
	SWIFI_errStartCommunicationHandler();
 8002196:	f7ff fcfb 	bl	8001b90 <SWIFI_errStartCommunicationHandler>
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000088 	.word	0x20000088
 80021a4:	080035d8 	.word	0x080035d8
 80021a8:	080035f0 	.word	0x080035f0
 80021ac:	080035fc 	.word	0x080035fc

080021b0 <MCU1ToMailBox>:
void MCU1ToMailBox(SWIFI_MSG_T * msg)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	MCU1_MailBox = msg;
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <MCU1ToMailBox+0x20>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
	IsMessageRecMCU1 = 1;
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <MCU1ToMailBox+0x24>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000224 	.word	0x20000224
 80021d4:	20000228 	.word	0x20000228

080021d8 <MCU2ToMailBox>:
void MCU2ToMailBox(SWIFI_MSG_T * msg)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	MCU2_MailBox = msg;
 80021e0:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <MCU2ToMailBox+0x20>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
	IsMessageRecMCU2 = 1;
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <MCU2ToMailBox+0x24>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	2000022c 	.word	0x2000022c
 80021fc:	20000230 	.word	0x20000230

08002200 <JETSONToMailBox>:
void JETSONToMailBox(SWIFI_MSG_T * msg)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	JETSON_MailBox= msg;
 8002208:	4a05      	ldr	r2, [pc, #20]	; (8002220 <JETSONToMailBox+0x20>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6013      	str	r3, [r2, #0]
	IsMessageRecJETSON = 1;
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <JETSONToMailBox+0x24>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000234 	.word	0x20000234
 8002224:	20000238 	.word	0x20000238

08002228 <CheckToMailBox>:
void CheckToMailBox(SWIFI_MSG_T * msg)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	Check_MailBox= msg;
 8002230:	4a05      	ldr	r2, [pc, #20]	; (8002248 <CheckToMailBox+0x20>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
	IsMessageRecCheck = 1;
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <CheckToMailBox+0x24>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	2000023c 	.word	0x2000023c
 800224c:	20000240 	.word	0x20000240

08002250 <CheckForUpdates>:
void CheckForUpdates(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
	WIFI_ERROR_T Status =WIFI_ERROR;
 8002256:	2302      	movs	r3, #2
 8002258:	71fb      	strb	r3, [r7, #7]
	while(Status != WIFI_OK)
 800225a:	e010      	b.n	800227e <CheckForUpdates+0x2e>
	{
		Status = SWIFI_errSendDataTCP(SWIFI_TCP_ID_0,"CheckForUpdates");
 800225c:	4924      	ldr	r1, [pc, #144]	; (80022f0 <CheckForUpdates+0xa0>)
 800225e:	4825      	ldr	r0, [pc, #148]	; (80022f4 <CheckForUpdates+0xa4>)
 8002260:	f7ff fc3e 	bl	8001ae0 <SWIFI_errSendDataTCP>
 8002264:	4603      	mov	r3, r0
 8002266:	71fb      	strb	r3, [r7, #7]
		if( WIFI_OK == Status )
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <CheckForUpdates+0x24>
		{
			Status = WIFI_OK;
 800226e:	2301      	movs	r3, #1
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	e004      	b.n	800227e <CheckForUpdates+0x2e>
		}
		else
		{
			SWIFI_errConnectTCP(SWIFI_TCP_ID_0,Server_IP,Server_Port);
 8002274:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <CheckForUpdates+0xa8>)
 8002276:	4921      	ldr	r1, [pc, #132]	; (80022fc <CheckForUpdates+0xac>)
 8002278:	481e      	ldr	r0, [pc, #120]	; (80022f4 <CheckForUpdates+0xa4>)
 800227a:	f7ff fbb1 	bl	80019e0 <SWIFI_errConnectTCP>
	while(Status != WIFI_OK)
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d1eb      	bne.n	800225c <CheckForUpdates+0xc>
		}
	}

	while(IsMessageRecCheck == 0);
 8002284:	bf00      	nop
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <CheckForUpdates+0xb0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0fb      	beq.n	8002286 <CheckForUpdates+0x36>
	Server_MCU1_ver = atoi( GetCell(Check_MailBox->Data, 2) );
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <CheckForUpdates+0xb4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2102      	movs	r1, #2
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fa5e 	bl	8002758 <GetCell>
 800229c:	4603      	mov	r3, r0
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fb09 	bl	80028b6 <atoi>
 80022a4:	4603      	mov	r3, r0
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <CheckForUpdates+0xb8>)
 80022aa:	701a      	strb	r2, [r3, #0]
	Server_MCU2_ver = atoi( GetCell(Check_MailBox->Data, 4) );
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <CheckForUpdates+0xb4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2104      	movs	r1, #4
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fa4f 	bl	8002758 <GetCell>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fafa 	bl	80028b6 <atoi>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <CheckForUpdates+0xbc>)
 80022c8:	701a      	strb	r2, [r3, #0]
	Server_JETSON_ver= atoi( GetCell(Check_MailBox->Data, 6) );
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <CheckForUpdates+0xb4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2106      	movs	r1, #6
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fa40 	bl	8002758 <GetCell>
 80022d8:	4603      	mov	r3, r0
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 faeb 	bl	80028b6 <atoi>
 80022e0:	4603      	mov	r3, r0
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <CheckForUpdates+0xc0>)
 80022e6:	701a      	strb	r2, [r3, #0]
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	08003604 	.word	0x08003604
 80022f4:	08003614 	.word	0x08003614
 80022f8:	080035fc 	.word	0x080035fc
 80022fc:	08003618 	.word	0x08003618
 8002300:	20000240 	.word	0x20000240
 8002304:	2000023c 	.word	0x2000023c
 8002308:	20000242 	.word	0x20000242
 800230c:	20000243 	.word	0x20000243
 8002310:	20000244 	.word	0x20000244

08002314 <MCU1_Update>:
void MCU1_Update(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
	u32 Hexsize = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	603b      	str	r3, [r7, #0]
	u32 L_u32LineCounter =0;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]

	RequestHexSize(SWIFI_TCP_ID_0, "MCU1");
 8002322:	4931      	ldr	r1, [pc, #196]	; (80023e8 <MCU1_Update+0xd4>)
 8002324:	4831      	ldr	r0, [pc, #196]	; (80023ec <MCU1_Update+0xd8>)
 8002326:	f000 f9b7 	bl	8002698 <RequestHexSize>
	while( IsMessageRecMCU1 == 0); //Waiting to get Hex size from the server
 800232a:	bf00      	nop
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <MCU1_Update+0xdc>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0fb      	beq.n	800232c <MCU1_Update+0x18>
	Hexsize = atoi(GetCell( (MCU1_MailBox->Data),1)); //Getting hex size in int
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <MCU1_Update+0xe0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2101      	movs	r1, #1
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fa0b 	bl	8002758 <GetCell>
 8002342:	4603      	mov	r3, r0
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fab6 	bl	80028b6 <atoi>
 800234a:	4603      	mov	r3, r0
 800234c:	603b      	str	r3, [r7, #0]

	//Replying OK to server
	SWIFI_errSendDataTCP(MCU1_MailBox->Connection_info.ID, "OK");
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <MCU1_Update+0xe0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4928      	ldr	r1, [pc, #160]	; (80023f8 <MCU1_Update+0xe4>)
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fbc2 	bl	8001ae0 <SWIFI_errSendDataTCP>

	DeleteMsg(MCU1_MailBox);
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <MCU1_Update+0xe0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fdee 	bl	8001f42 <DeleteMsg>
	IsMessageRecMCU1 = 0; //this means that i finished reading the mail box
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <MCU1_Update+0xdc>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]

	for(L_u32LineCounter = 0 ; L_u32LineCounter < Hexsize ; L_u32LineCounter++)
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	e02e      	b.n	80023d0 <MCU1_Update+0xbc>
	{
		RequestCodeLine(SWIFI_TCP_ID_0, "MCU1", L_u32LineCounter);
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	491c      	ldr	r1, [pc, #112]	; (80023e8 <MCU1_Update+0xd4>)
 8002376:	481d      	ldr	r0, [pc, #116]	; (80023ec <MCU1_Update+0xd8>)
 8002378:	f000 f928 	bl	80025cc <RequestCodeLine>
		while( IsMessageRecMCU1 == 0);
 800237c:	bf00      	nop
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <MCU1_Update+0xdc>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0fb      	beq.n	800237e <MCU1_Update+0x6a>
		if(L_u32LineCounter == atoi(GetCell( (MCU1_MailBox->Data),1)) )
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MCU1_Update+0xe0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f9e2 	bl	8002758 <GetCell>
 8002394:	4603      	mov	r3, r0
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fa8d 	bl	80028b6 <atoi>
 800239c:	4602      	mov	r2, r0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d10f      	bne.n	80023c4 <MCU1_Update+0xb0>
		{
			//Replying OK to server
			SWIFI_errSendDataTCP(MCU1_MailBox->Connection_info.ID, "OK");
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <MCU1_Update+0xe0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4913      	ldr	r1, [pc, #76]	; (80023f8 <MCU1_Update+0xe4>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fb97 	bl	8001ae0 <SWIFI_errSendDataTCP>
			 * Doing Some operations
			 * send it by CAN or whatever
			 * to be implemented by CAN team
			 *
			 */
			DeleteMsg(MCU1_MailBox);
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <MCU1_Update+0xe0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fdc3 	bl	8001f42 <DeleteMsg>
			IsMessageRecMCU1 = 0; //this means that i finished reading the mail box
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <MCU1_Update+0xdc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e002      	b.n	80023ca <MCU1_Update+0xb6>

		}
		else
		{
			L_u32LineCounter--;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
	for(L_u32LineCounter = 0 ; L_u32LineCounter < Hexsize ; L_u32LineCounter++)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3301      	adds	r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3cc      	bcc.n	8002372 <MCU1_Update+0x5e>
		}
	}
	SWIFI_errDisconnectTCP(SWIFI_TCP_ID_0);
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <MCU1_Update+0xd8>)
 80023da:	f7ff fb4f 	bl	8001a7c <SWIFI_errDisconnectTCP>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	080035b8 	.word	0x080035b8
 80023ec:	08003614 	.word	0x08003614
 80023f0:	20000228 	.word	0x20000228
 80023f4:	20000224 	.word	0x20000224
 80023f8:	08003624 	.word	0x08003624

080023fc <MCU2_Update>:


void MCU2_Update(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
	u32 Hexsize = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	603b      	str	r3, [r7, #0]
	u32 L_u32LineCounter =0;
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]

	RequestHexSize(SWIFI_TCP_ID_0, "MCU2");
 800240a:	4931      	ldr	r1, [pc, #196]	; (80024d0 <MCU2_Update+0xd4>)
 800240c:	4831      	ldr	r0, [pc, #196]	; (80024d4 <MCU2_Update+0xd8>)
 800240e:	f000 f943 	bl	8002698 <RequestHexSize>
	while( IsMessageRecMCU2 == 0); //Waiting to get Hex size from the server
 8002412:	bf00      	nop
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <MCU2_Update+0xdc>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0fb      	beq.n	8002414 <MCU2_Update+0x18>
	Hexsize = atoi(GetCell( (MCU2_MailBox->Data),1)); //Getting hex size in int
 800241c:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <MCU2_Update+0xe0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2101      	movs	r1, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f997 	bl	8002758 <GetCell>
 800242a:	4603      	mov	r3, r0
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fa42 	bl	80028b6 <atoi>
 8002432:	4603      	mov	r3, r0
 8002434:	603b      	str	r3, [r7, #0]

	//Replying OK to server
	SWIFI_errSendDataTCP(MCU2_MailBox->Connection_info.ID, "OK");
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <MCU2_Update+0xe0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4928      	ldr	r1, [pc, #160]	; (80024e0 <MCU2_Update+0xe4>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb4e 	bl	8001ae0 <SWIFI_errSendDataTCP>

	DeleteMsg(MCU2_MailBox);
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <MCU2_Update+0xe0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fd7a 	bl	8001f42 <DeleteMsg>
	IsMessageRecMCU2 = 0; //this means that i finished reading the mail box
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <MCU2_Update+0xdc>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]

	for(L_u32LineCounter = 0 ; L_u32LineCounter < Hexsize ; L_u32LineCounter++)
 8002454:	2300      	movs	r3, #0
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	e02e      	b.n	80024b8 <MCU2_Update+0xbc>
	{
		RequestCodeLine(SWIFI_TCP_ID_0, "MCU2", L_u32LineCounter);
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	491c      	ldr	r1, [pc, #112]	; (80024d0 <MCU2_Update+0xd4>)
 800245e:	481d      	ldr	r0, [pc, #116]	; (80024d4 <MCU2_Update+0xd8>)
 8002460:	f000 f8b4 	bl	80025cc <RequestCodeLine>
		while( IsMessageRecMCU2 == 0);
 8002464:	bf00      	nop
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <MCU2_Update+0xdc>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0fb      	beq.n	8002466 <MCU2_Update+0x6a>
		if(L_u32LineCounter == atoi(GetCell( (MCU2_MailBox->Data),1)) )
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <MCU2_Update+0xe0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f96e 	bl	8002758 <GetCell>
 800247c:	4603      	mov	r3, r0
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fa19 	bl	80028b6 <atoi>
 8002484:	4602      	mov	r2, r0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	d10f      	bne.n	80024ac <MCU2_Update+0xb0>
		{
			//Replying OK to server
			SWIFI_errSendDataTCP(MCU2_MailBox->Connection_info.ID, "OK");
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <MCU2_Update+0xe0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4913      	ldr	r1, [pc, #76]	; (80024e0 <MCU2_Update+0xe4>)
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fb23 	bl	8001ae0 <SWIFI_errSendDataTCP>
			 * Doing Some operations
			 * send it by CAN or whatever
			 * to be implemented by CAN team
			 *
			 */
			DeleteMsg(MCU2_MailBox);
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <MCU2_Update+0xe0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fd4f 	bl	8001f42 <DeleteMsg>
			IsMessageRecMCU2 = 0; //this means that i finished reading the mail box
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MCU2_Update+0xdc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e002      	b.n	80024b2 <MCU2_Update+0xb6>

		}
		else
		{
			L_u32LineCounter--;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	607b      	str	r3, [r7, #4]
	for(L_u32LineCounter = 0 ; L_u32LineCounter < Hexsize ; L_u32LineCounter++)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3301      	adds	r3, #1
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3cc      	bcc.n	800245a <MCU2_Update+0x5e>
		}
	}
	SWIFI_errDisconnectTCP(SWIFI_TCP_ID_0);
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <MCU2_Update+0xd8>)
 80024c2:	f7ff fadb 	bl	8001a7c <SWIFI_errDisconnectTCP>

}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	080035c0 	.word	0x080035c0
 80024d4:	08003614 	.word	0x08003614
 80024d8:	20000230 	.word	0x20000230
 80024dc:	2000022c 	.word	0x2000022c
 80024e0:	08003624 	.word	0x08003624

080024e4 <JETSON_Update>:
void JETSON_Update(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
	u32 Hexsize = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
	u32 L_u32LineCounter =0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]

	RequestHexSize(SWIFI_TCP_ID_0, "JETSON");
 80024f2:	4931      	ldr	r1, [pc, #196]	; (80025b8 <JETSON_Update+0xd4>)
 80024f4:	4831      	ldr	r0, [pc, #196]	; (80025bc <JETSON_Update+0xd8>)
 80024f6:	f000 f8cf 	bl	8002698 <RequestHexSize>
	while( IsMessageRecJETSON == 0); //Waiting to get Hex size from the server
 80024fa:	bf00      	nop
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <JETSON_Update+0xdc>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0fb      	beq.n	80024fc <JETSON_Update+0x18>
	Hexsize = atoi(GetCell( (JETSON_MailBox->Data),1)); //Getting hex size in int
 8002504:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <JETSON_Update+0xe0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f923 	bl	8002758 <GetCell>
 8002512:	4603      	mov	r3, r0
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f9ce 	bl	80028b6 <atoi>
 800251a:	4603      	mov	r3, r0
 800251c:	603b      	str	r3, [r7, #0]

	//Replying OK to server
	SWIFI_errSendDataTCP(JETSON_MailBox->Connection_info.ID, "OK");
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <JETSON_Update+0xe0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4928      	ldr	r1, [pc, #160]	; (80025c8 <JETSON_Update+0xe4>)
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fada 	bl	8001ae0 <SWIFI_errSendDataTCP>

	DeleteMsg(JETSON_MailBox);
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <JETSON_Update+0xe0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd06 	bl	8001f42 <DeleteMsg>
	IsMessageRecJETSON = 0; //this means that i finished reading the mail box
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <JETSON_Update+0xdc>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]

	for(L_u32LineCounter = 0 ; L_u32LineCounter < Hexsize ; L_u32LineCounter++)
 800253c:	2300      	movs	r3, #0
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	e02e      	b.n	80025a0 <JETSON_Update+0xbc>
	{
		RequestCodeLine(SWIFI_TCP_ID_0, "JETSON", L_u32LineCounter);
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	491c      	ldr	r1, [pc, #112]	; (80025b8 <JETSON_Update+0xd4>)
 8002546:	481d      	ldr	r0, [pc, #116]	; (80025bc <JETSON_Update+0xd8>)
 8002548:	f000 f840 	bl	80025cc <RequestCodeLine>
		while( IsMessageRecJETSON == 0);
 800254c:	bf00      	nop
 800254e:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <JETSON_Update+0xdc>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0fb      	beq.n	800254e <JETSON_Update+0x6a>
		if(L_u32LineCounter == atoi(GetCell( (JETSON_MailBox->Data),1)) )
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <JETSON_Update+0xe0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f8fa 	bl	8002758 <GetCell>
 8002564:	4603      	mov	r3, r0
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f9a5 	bl	80028b6 <atoi>
 800256c:	4602      	mov	r2, r0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	d10f      	bne.n	8002594 <JETSON_Update+0xb0>
		{
			//Replying OK to server
			SWIFI_errSendDataTCP(JETSON_MailBox->Connection_info.ID, "OK");
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <JETSON_Update+0xe0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4913      	ldr	r1, [pc, #76]	; (80025c8 <JETSON_Update+0xe4>)
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff faaf 	bl	8001ae0 <SWIFI_errSendDataTCP>
			 * Doing Some operations
			 * send it by CAN or whatever
			 * to be implemented by CAN team
			 *
			 */
			DeleteMsg(JETSON_MailBox);
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <JETSON_Update+0xe0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fcdb 	bl	8001f42 <DeleteMsg>
			IsMessageRecJETSON = 0; //this means that i finished reading the mail box
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <JETSON_Update+0xdc>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e002      	b.n	800259a <JETSON_Update+0xb6>

		}
		else
		{
			L_u32LineCounter--;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	607b      	str	r3, [r7, #4]
	for(L_u32LineCounter = 0 ; L_u32LineCounter < Hexsize ; L_u32LineCounter++)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3cc      	bcc.n	8002542 <JETSON_Update+0x5e>
		}
	}
	SWIFI_errDisconnectTCP(SWIFI_TCP_ID_0);
 80025a8:	4804      	ldr	r0, [pc, #16]	; (80025bc <JETSON_Update+0xd8>)
 80025aa:	f7ff fa67 	bl	8001a7c <SWIFI_errDisconnectTCP>

}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	080035c8 	.word	0x080035c8
 80025bc:	08003614 	.word	0x08003614
 80025c0:	20000238 	.word	0x20000238
 80025c4:	20000234 	.word	0x20000234
 80025c8:	08003624 	.word	0x08003624

080025cc <RequestCodeLine>:
	for (int i = 0; i < len; i++) {
		message[i] = message[i] ^ key;
	}
}
WIFI_ERROR_T RequestCodeLine(char * TCP_ID,char * Copy_pTarget , u32 Copy_u32Line_no)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
	char StrLine_no[10];
	WIFI_ERROR_T Status= WIFI_ERROR;
 80025d8:	2302      	movs	r3, #2
 80025da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	u8 RetryMax = 5;
 80025de:	2305      	movs	r3, #5
 80025e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	itoa(Copy_u32Line_no,StrLine_no,10);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f107 0114 	add.w	r1, r7, #20
 80025ea:	220a      	movs	r2, #10
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f9a9 	bl	8002944 <itoa>
	char *StringToSend = malloc(strlen(Copy_pTarget) + sizeof("Update,"",GetLine")) ;
 80025f2:	68b8      	ldr	r0, [r7, #8]
 80025f4:	f7fd fdbc 	bl	8000170 <strlen>
 80025f8:	4603      	mov	r3, r0
 80025fa:	3310      	adds	r3, #16
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f9a3 	bl	8002948 <malloc>
 8002602:	4603      	mov	r3, r0
 8002604:	623b      	str	r3, [r7, #32]
	sprintf( StringToSend ,"%s,%s,%s,%s","Update",Copy_pTarget,"GetLine",StrLine_no);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <RequestCodeLine+0xb8>)
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <RequestCodeLine+0xbc>)
 8002614:	491d      	ldr	r1, [pc, #116]	; (800268c <RequestCodeLine+0xc0>)
 8002616:	6a38      	ldr	r0, [r7, #32]
 8002618:	f000 fa92 	bl	8002b40 <siprintf>
	while (Status != WIFI_OK)
 800261c:	e023      	b.n	8002666 <RequestCodeLine+0x9a>
	{

		if(RetryMax == 0)
 800261e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002622:	2b00      	cmp	r3, #0
 8002624:	d024      	beq.n	8002670 <RequestCodeLine+0xa4>
		{
			break;
		}
		RetryMax--;
 8002626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800262a:	3b01      	subs	r3, #1
 800262c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		//Status is suffecient for the last one only but i made it for all for debug purpose

		Status = SWIFI_errSendDataTCP(TCP_ID,StringToSend);
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff fa54 	bl	8001ae0 <SWIFI_errSendDataTCP>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( WIFI_OK == Status )
 800263e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002642:	2b01      	cmp	r3, #1
 8002644:	d103      	bne.n	800264e <RequestCodeLine+0x82>
		{
			Status = WIFI_OK;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800264c:	e004      	b.n	8002658 <RequestCodeLine+0x8c>
		}
		else
		{
			SWIFI_errConnectTCP(TCP_ID,Server_IP,Server_Port);
 800264e:	4a10      	ldr	r2, [pc, #64]	; (8002690 <RequestCodeLine+0xc4>)
 8002650:	4910      	ldr	r1, [pc, #64]	; (8002694 <RequestCodeLine+0xc8>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff f9c4 	bl	80019e0 <SWIFI_errConnectTCP>
		}

		if(Status == WIFI_BUSY)
 8002658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800265c:	2b03      	cmp	r3, #3
 800265e:	d102      	bne.n	8002666 <RequestCodeLine+0x9a>
		{
			Delay_ms(20);
 8002660:	2014      	movs	r0, #20
 8002662:	f000 f8af 	bl	80027c4 <Delay_ms>
	while (Status != WIFI_OK)
 8002666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266a:	2b01      	cmp	r3, #1
 800266c:	d1d7      	bne.n	800261e <RequestCodeLine+0x52>
 800266e:	e000      	b.n	8002672 <RequestCodeLine+0xa6>
			break;
 8002670:	bf00      	nop
		}

	}
	free(StringToSend);
 8002672:	6a38      	ldr	r0, [r7, #32]
 8002674:	f000 f970 	bl	8002958 <free>
	return Status;
 8002678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}
 800267c:	4618      	mov	r0, r3
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	0800363c 	.word	0x0800363c
 8002688:	08003628 	.word	0x08003628
 800268c:	08003630 	.word	0x08003630
 8002690:	080035fc 	.word	0x080035fc
 8002694:	08003618 	.word	0x08003618

08002698 <RequestHexSize>:
WIFI_ERROR_T RequestHexSize(char * TCP_ID,char * Copy_pTarget )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	WIFI_ERROR_T Status= WIFI_ERROR;
 80026a2:	2302      	movs	r3, #2
 80026a4:	73fb      	strb	r3, [r7, #15]
	u8 RetryMax = 20;
 80026a6:	2314      	movs	r3, #20
 80026a8:	73bb      	strb	r3, [r7, #14]
	char *StringToSend = malloc(strlen(Copy_pTarget) + sizeof("Update,"",GetHexSize")) ;
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f7fd fd60 	bl	8000170 <strlen>
 80026b0:	4603      	mov	r3, r0
 80026b2:	3313      	adds	r3, #19
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f947 	bl	8002948 <malloc>
 80026ba:	4603      	mov	r3, r0
 80026bc:	60bb      	str	r3, [r7, #8]
	sprintf(StringToSend,"%s,%s,%s","Update",Copy_pTarget,"GetHexSize");
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <RequestHexSize+0xac>)
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	4a20      	ldr	r2, [pc, #128]	; (8002748 <RequestHexSize+0xb0>)
 80026c6:	4921      	ldr	r1, [pc, #132]	; (800274c <RequestHexSize+0xb4>)
 80026c8:	68b8      	ldr	r0, [r7, #8]
 80026ca:	f000 fa39 	bl	8002b40 <siprintf>

	while (Status != WIFI_OK)
 80026ce:	e02b      	b.n	8002728 <RequestHexSize+0x90>
	{

		if(RetryMax == 0)
 80026d0:	7bbb      	ldrb	r3, [r7, #14]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d02c      	beq.n	8002730 <RequestHexSize+0x98>
		{
			break;
		}
		RetryMax--;
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	3b01      	subs	r3, #1
 80026da:	73bb      	strb	r3, [r7, #14]
		//Status is suffecient for the last one only but i made it for all for debug purpose
		Status = SWIFI_errConnectTCP(TCP_ID,Server_IP,Server_Port);
 80026dc:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <RequestHexSize+0xb8>)
 80026de:	491d      	ldr	r1, [pc, #116]	; (8002754 <RequestHexSize+0xbc>)
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff f97d 	bl	80019e0 <SWIFI_errConnectTCP>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
		if( (Status == WIFI_OK) || (Status == WIFI_TCP_ALREADY_CONNECTED) )
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <RequestHexSize+0x5e>
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d111      	bne.n	800271a <RequestHexSize+0x82>
		{
			if( WIFI_OK == SWIFI_errSendDataTCP(TCP_ID,StringToSend) )
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff f9f1 	bl	8001ae0 <SWIFI_errSendDataTCP>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <RequestHexSize+0x72>
			{
				Status = WIFI_OK;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e00e      	b.n	8002728 <RequestHexSize+0x90>
			}
			else if(Status == WIFI_BUSY)
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d10b      	bne.n	8002728 <RequestHexSize+0x90>
			{
				Delay_ms(1000);
 8002710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002714:	f000 f856 	bl	80027c4 <Delay_ms>
			if( WIFI_OK == SWIFI_errSendDataTCP(TCP_ID,StringToSend) )
 8002718:	e006      	b.n	8002728 <RequestHexSize+0x90>
			}
		}
		else if(Status == WIFI_BUSY)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d103      	bne.n	8002728 <RequestHexSize+0x90>
		{
			Delay_ms(1000);
 8002720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002724:	f000 f84e 	bl	80027c4 <Delay_ms>
	while (Status != WIFI_OK)
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d1d0      	bne.n	80026d0 <RequestHexSize+0x38>
 800272e:	e000      	b.n	8002732 <RequestHexSize+0x9a>
			break;
 8002730:	bf00      	nop
		}

	}
	free(StringToSend);
 8002732:	68b8      	ldr	r0, [r7, #8]
 8002734:	f000 f910 	bl	8002958 <free>
	return Status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	08003650 	.word	0x08003650
 8002748:	08003628 	.word	0x08003628
 800274c:	08003644 	.word	0x08003644
 8002750:	080035fc 	.word	0x080035fc
 8002754:	08003618 	.word	0x08003618

08002758 <GetCell>:
char * GetCell(const char * Cell , u32 Copy_u32Cellno)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	int L_intCounter = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
	int L_intValue   = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
	char *  ReturnValue =NULL_POINTER;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
	for(L_intCounter = 0 ; L_intCounter < Copy_u32Cellno ;L_intCounter++)
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e00e      	b.n	8002792 <GetCell+0x3a>
	{
		while(Cell[L_intValue] != ',')
		{
			L_intValue++;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	3301      	adds	r3, #1
 8002778:	613b      	str	r3, [r7, #16]
		while(Cell[L_intValue] != ',')
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b2c      	cmp	r3, #44	; 0x2c
 8002784:	d1f6      	bne.n	8002774 <GetCell+0x1c>
		}
		L_intValue++;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3301      	adds	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
	for(L_intCounter = 0 ; L_intCounter < Copy_u32Cellno ;L_intCounter++)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d8ef      	bhi.n	800277a <GetCell+0x22>
	}


	if(Cell[L_intValue-1] != ',')
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	3b01      	subs	r3, #1
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b2c      	cmp	r3, #44	; 0x2c
 80027a6:	d002      	beq.n	80027ae <GetCell+0x56>
	{
		ReturnValue = NULL_POINTER;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e003      	b.n	80027b6 <GetCell+0x5e>
	}
	else
	{
		ReturnValue =(char *) &Cell[L_intValue];
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
	}

	return ReturnValue;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
	...

080027c4 <Delay_ms>:
void Delay_ms(u32 time)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
	for(i = 0 ; i < time ; i++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e005      	b.n	80027e2 <Delay_ms+0x1e>
	{
		MSYSTICK_stderrorSetBusyWait(TICK_FOR_MSEC);
 80027d6:	4807      	ldr	r0, [pc, #28]	; (80027f4 <Delay_ms+0x30>)
 80027d8:	f7fe fe38 	bl	800144c <MSYSTICK_stderrorSetBusyWait>
	for(i = 0 ; i < time ; i++)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3301      	adds	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d8f5      	bhi.n	80027d6 <Delay_ms+0x12>
	}
}
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	00011940 	.word	0x00011940

080027f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <_sbrk+0x5c>)
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <_sbrk+0x60>)
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <_sbrk+0x64>)
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <_sbrk+0x68>)
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d207      	bcs.n	8002838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002828:	f000 f84a 	bl	80028c0 <__errno>
 800282c:	4603      	mov	r3, r0
 800282e:	220c      	movs	r2, #12
 8002830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
 8002836:	e009      	b.n	800284c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	4a05      	ldr	r2, [pc, #20]	; (800285c <_sbrk+0x64>)
 8002848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20005000 	.word	0x20005000
 8002858:	00000400 	.word	0x00000400
 800285c:	20000248 	.word	0x20000248
 8002860:	20000260 	.word	0x20000260

08002864 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002864:	480d      	ldr	r0, [pc, #52]	; (800289c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002866:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002868:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800286e:	490d      	ldr	r1, [pc, #52]	; (80028a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <LoopForever+0xe>)
  movs r3, #0
 8002872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002874:	e002      	b.n	800287c <LoopCopyDataInit>

08002876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287a:	3304      	adds	r3, #4

0800287c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800287c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002880:	d3f9      	bcc.n	8002876 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002884:	4c0a      	ldr	r4, [pc, #40]	; (80028b0 <LoopForever+0x16>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002888:	e001      	b.n	800288e <LoopFillZerobss>

0800288a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800288c:	3204      	adds	r2, #4

0800288e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002890:	d3fb      	bcc.n	800288a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002892:	f000 f81b 	bl	80028cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002896:	f7ff fc19 	bl	80020cc <main>

0800289a <LoopForever>:

LoopForever:
  b LoopForever
 800289a:	e7fe      	b.n	800289a <LoopForever>
  ldr   r0, =_estack
 800289c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80028a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a4:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80028a8:	080037d8 	.word	0x080037d8
  ldr r2, =_sbss
 80028ac:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80028b0:	2000025c 	.word	0x2000025c

080028b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028b4:	e7fe      	b.n	80028b4 <ADC1_2_IRQHandler>

080028b6 <atoi>:
 80028b6:	220a      	movs	r2, #10
 80028b8:	2100      	movs	r1, #0
 80028ba:	f000 b9f1 	b.w	8002ca0 <strtol>
	...

080028c0 <__errno>:
 80028c0:	4b01      	ldr	r3, [pc, #4]	; (80028c8 <__errno+0x8>)
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	200000b8 	.word	0x200000b8

080028cc <__libc_init_array>:
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	2600      	movs	r6, #0
 80028d0:	4d0c      	ldr	r5, [pc, #48]	; (8002904 <__libc_init_array+0x38>)
 80028d2:	4c0d      	ldr	r4, [pc, #52]	; (8002908 <__libc_init_array+0x3c>)
 80028d4:	1b64      	subs	r4, r4, r5
 80028d6:	10a4      	asrs	r4, r4, #2
 80028d8:	42a6      	cmp	r6, r4
 80028da:	d109      	bne.n	80028f0 <__libc_init_array+0x24>
 80028dc:	f000 fd9a 	bl	8003414 <_init>
 80028e0:	2600      	movs	r6, #0
 80028e2:	4d0a      	ldr	r5, [pc, #40]	; (800290c <__libc_init_array+0x40>)
 80028e4:	4c0a      	ldr	r4, [pc, #40]	; (8002910 <__libc_init_array+0x44>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	42a6      	cmp	r6, r4
 80028ec:	d105      	bne.n	80028fa <__libc_init_array+0x2e>
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f4:	4798      	blx	r3
 80028f6:	3601      	adds	r6, #1
 80028f8:	e7ee      	b.n	80028d8 <__libc_init_array+0xc>
 80028fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80028fe:	4798      	blx	r3
 8002900:	3601      	adds	r6, #1
 8002902:	e7f2      	b.n	80028ea <__libc_init_array+0x1e>
 8002904:	080037d0 	.word	0x080037d0
 8002908:	080037d0 	.word	0x080037d0
 800290c:	080037d0 	.word	0x080037d0
 8002910:	080037d4 	.word	0x080037d4

08002914 <__itoa>:
 8002914:	1e93      	subs	r3, r2, #2
 8002916:	2b22      	cmp	r3, #34	; 0x22
 8002918:	b510      	push	{r4, lr}
 800291a:	460c      	mov	r4, r1
 800291c:	d904      	bls.n	8002928 <__itoa+0x14>
 800291e:	2300      	movs	r3, #0
 8002920:	461c      	mov	r4, r3
 8002922:	700b      	strb	r3, [r1, #0]
 8002924:	4620      	mov	r0, r4
 8002926:	bd10      	pop	{r4, pc}
 8002928:	2a0a      	cmp	r2, #10
 800292a:	d109      	bne.n	8002940 <__itoa+0x2c>
 800292c:	2800      	cmp	r0, #0
 800292e:	da07      	bge.n	8002940 <__itoa+0x2c>
 8002930:	232d      	movs	r3, #45	; 0x2d
 8002932:	700b      	strb	r3, [r1, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	4240      	negs	r0, r0
 8002938:	4421      	add	r1, r4
 800293a:	f000 f9bb 	bl	8002cb4 <__utoa>
 800293e:	e7f1      	b.n	8002924 <__itoa+0x10>
 8002940:	2100      	movs	r1, #0
 8002942:	e7f9      	b.n	8002938 <__itoa+0x24>

08002944 <itoa>:
 8002944:	f7ff bfe6 	b.w	8002914 <__itoa>

08002948 <malloc>:
 8002948:	4b02      	ldr	r3, [pc, #8]	; (8002954 <malloc+0xc>)
 800294a:	4601      	mov	r1, r0
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f000 b873 	b.w	8002a38 <_malloc_r>
 8002952:	bf00      	nop
 8002954:	200000b8 	.word	0x200000b8

08002958 <free>:
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <free+0xc>)
 800295a:	4601      	mov	r1, r0
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	f000 b803 	b.w	8002968 <_free_r>
 8002962:	bf00      	nop
 8002964:	200000b8 	.word	0x200000b8

08002968 <_free_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4605      	mov	r5, r0
 800296c:	2900      	cmp	r1, #0
 800296e:	d040      	beq.n	80029f2 <_free_r+0x8a>
 8002970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002974:	1f0c      	subs	r4, r1, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	bfb8      	it	lt
 800297a:	18e4      	addlt	r4, r4, r3
 800297c:	f000 f9dc 	bl	8002d38 <__malloc_lock>
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <_free_r+0x8c>)
 8002982:	6813      	ldr	r3, [r2, #0]
 8002984:	b933      	cbnz	r3, 8002994 <_free_r+0x2c>
 8002986:	6063      	str	r3, [r4, #4]
 8002988:	6014      	str	r4, [r2, #0]
 800298a:	4628      	mov	r0, r5
 800298c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002990:	f000 b9d8 	b.w	8002d44 <__malloc_unlock>
 8002994:	42a3      	cmp	r3, r4
 8002996:	d908      	bls.n	80029aa <_free_r+0x42>
 8002998:	6820      	ldr	r0, [r4, #0]
 800299a:	1821      	adds	r1, r4, r0
 800299c:	428b      	cmp	r3, r1
 800299e:	bf01      	itttt	eq
 80029a0:	6819      	ldreq	r1, [r3, #0]
 80029a2:	685b      	ldreq	r3, [r3, #4]
 80029a4:	1809      	addeq	r1, r1, r0
 80029a6:	6021      	streq	r1, [r4, #0]
 80029a8:	e7ed      	b.n	8002986 <_free_r+0x1e>
 80029aa:	461a      	mov	r2, r3
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	b10b      	cbz	r3, 80029b4 <_free_r+0x4c>
 80029b0:	42a3      	cmp	r3, r4
 80029b2:	d9fa      	bls.n	80029aa <_free_r+0x42>
 80029b4:	6811      	ldr	r1, [r2, #0]
 80029b6:	1850      	adds	r0, r2, r1
 80029b8:	42a0      	cmp	r0, r4
 80029ba:	d10b      	bne.n	80029d4 <_free_r+0x6c>
 80029bc:	6820      	ldr	r0, [r4, #0]
 80029be:	4401      	add	r1, r0
 80029c0:	1850      	adds	r0, r2, r1
 80029c2:	4283      	cmp	r3, r0
 80029c4:	6011      	str	r1, [r2, #0]
 80029c6:	d1e0      	bne.n	800298a <_free_r+0x22>
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4401      	add	r1, r0
 80029ce:	6011      	str	r1, [r2, #0]
 80029d0:	6053      	str	r3, [r2, #4]
 80029d2:	e7da      	b.n	800298a <_free_r+0x22>
 80029d4:	d902      	bls.n	80029dc <_free_r+0x74>
 80029d6:	230c      	movs	r3, #12
 80029d8:	602b      	str	r3, [r5, #0]
 80029da:	e7d6      	b.n	800298a <_free_r+0x22>
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	1821      	adds	r1, r4, r0
 80029e0:	428b      	cmp	r3, r1
 80029e2:	bf01      	itttt	eq
 80029e4:	6819      	ldreq	r1, [r3, #0]
 80029e6:	685b      	ldreq	r3, [r3, #4]
 80029e8:	1809      	addeq	r1, r1, r0
 80029ea:	6021      	streq	r1, [r4, #0]
 80029ec:	6063      	str	r3, [r4, #4]
 80029ee:	6054      	str	r4, [r2, #4]
 80029f0:	e7cb      	b.n	800298a <_free_r+0x22>
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	2000024c 	.word	0x2000024c

080029f8 <sbrk_aligned>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	4e0e      	ldr	r6, [pc, #56]	; (8002a34 <sbrk_aligned+0x3c>)
 80029fc:	460c      	mov	r4, r1
 80029fe:	6831      	ldr	r1, [r6, #0]
 8002a00:	4605      	mov	r5, r0
 8002a02:	b911      	cbnz	r1, 8002a0a <sbrk_aligned+0x12>
 8002a04:	f000 f88c 	bl	8002b20 <_sbrk_r>
 8002a08:	6030      	str	r0, [r6, #0]
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f000 f887 	bl	8002b20 <_sbrk_r>
 8002a12:	1c43      	adds	r3, r0, #1
 8002a14:	d00a      	beq.n	8002a2c <sbrk_aligned+0x34>
 8002a16:	1cc4      	adds	r4, r0, #3
 8002a18:	f024 0403 	bic.w	r4, r4, #3
 8002a1c:	42a0      	cmp	r0, r4
 8002a1e:	d007      	beq.n	8002a30 <sbrk_aligned+0x38>
 8002a20:	1a21      	subs	r1, r4, r0
 8002a22:	4628      	mov	r0, r5
 8002a24:	f000 f87c 	bl	8002b20 <_sbrk_r>
 8002a28:	3001      	adds	r0, #1
 8002a2a:	d101      	bne.n	8002a30 <sbrk_aligned+0x38>
 8002a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8002a30:	4620      	mov	r0, r4
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	20000250 	.word	0x20000250

08002a38 <_malloc_r>:
 8002a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a3c:	1ccd      	adds	r5, r1, #3
 8002a3e:	f025 0503 	bic.w	r5, r5, #3
 8002a42:	3508      	adds	r5, #8
 8002a44:	2d0c      	cmp	r5, #12
 8002a46:	bf38      	it	cc
 8002a48:	250c      	movcc	r5, #12
 8002a4a:	2d00      	cmp	r5, #0
 8002a4c:	4607      	mov	r7, r0
 8002a4e:	db01      	blt.n	8002a54 <_malloc_r+0x1c>
 8002a50:	42a9      	cmp	r1, r5
 8002a52:	d905      	bls.n	8002a60 <_malloc_r+0x28>
 8002a54:	230c      	movs	r3, #12
 8002a56:	2600      	movs	r6, #0
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a60:	4e2e      	ldr	r6, [pc, #184]	; (8002b1c <_malloc_r+0xe4>)
 8002a62:	f000 f969 	bl	8002d38 <__malloc_lock>
 8002a66:	6833      	ldr	r3, [r6, #0]
 8002a68:	461c      	mov	r4, r3
 8002a6a:	bb34      	cbnz	r4, 8002aba <_malloc_r+0x82>
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	4638      	mov	r0, r7
 8002a70:	f7ff ffc2 	bl	80029f8 <sbrk_aligned>
 8002a74:	1c43      	adds	r3, r0, #1
 8002a76:	4604      	mov	r4, r0
 8002a78:	d14d      	bne.n	8002b16 <_malloc_r+0xde>
 8002a7a:	6834      	ldr	r4, [r6, #0]
 8002a7c:	4626      	mov	r6, r4
 8002a7e:	2e00      	cmp	r6, #0
 8002a80:	d140      	bne.n	8002b04 <_malloc_r+0xcc>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	4631      	mov	r1, r6
 8002a86:	4638      	mov	r0, r7
 8002a88:	eb04 0803 	add.w	r8, r4, r3
 8002a8c:	f000 f848 	bl	8002b20 <_sbrk_r>
 8002a90:	4580      	cmp	r8, r0
 8002a92:	d13a      	bne.n	8002b0a <_malloc_r+0xd2>
 8002a94:	6821      	ldr	r1, [r4, #0]
 8002a96:	3503      	adds	r5, #3
 8002a98:	1a6d      	subs	r5, r5, r1
 8002a9a:	f025 0503 	bic.w	r5, r5, #3
 8002a9e:	3508      	adds	r5, #8
 8002aa0:	2d0c      	cmp	r5, #12
 8002aa2:	bf38      	it	cc
 8002aa4:	250c      	movcc	r5, #12
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f7ff ffa5 	bl	80029f8 <sbrk_aligned>
 8002aae:	3001      	adds	r0, #1
 8002ab0:	d02b      	beq.n	8002b0a <_malloc_r+0xd2>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	442b      	add	r3, r5
 8002ab6:	6023      	str	r3, [r4, #0]
 8002ab8:	e00e      	b.n	8002ad8 <_malloc_r+0xa0>
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	1b52      	subs	r2, r2, r5
 8002abe:	d41e      	bmi.n	8002afe <_malloc_r+0xc6>
 8002ac0:	2a0b      	cmp	r2, #11
 8002ac2:	d916      	bls.n	8002af2 <_malloc_r+0xba>
 8002ac4:	1961      	adds	r1, r4, r5
 8002ac6:	42a3      	cmp	r3, r4
 8002ac8:	6025      	str	r5, [r4, #0]
 8002aca:	bf18      	it	ne
 8002acc:	6059      	strne	r1, [r3, #4]
 8002ace:	6863      	ldr	r3, [r4, #4]
 8002ad0:	bf08      	it	eq
 8002ad2:	6031      	streq	r1, [r6, #0]
 8002ad4:	5162      	str	r2, [r4, r5]
 8002ad6:	604b      	str	r3, [r1, #4]
 8002ad8:	4638      	mov	r0, r7
 8002ada:	f104 060b 	add.w	r6, r4, #11
 8002ade:	f000 f931 	bl	8002d44 <__malloc_unlock>
 8002ae2:	f026 0607 	bic.w	r6, r6, #7
 8002ae6:	1d23      	adds	r3, r4, #4
 8002ae8:	1af2      	subs	r2, r6, r3
 8002aea:	d0b6      	beq.n	8002a5a <_malloc_r+0x22>
 8002aec:	1b9b      	subs	r3, r3, r6
 8002aee:	50a3      	str	r3, [r4, r2]
 8002af0:	e7b3      	b.n	8002a5a <_malloc_r+0x22>
 8002af2:	6862      	ldr	r2, [r4, #4]
 8002af4:	42a3      	cmp	r3, r4
 8002af6:	bf0c      	ite	eq
 8002af8:	6032      	streq	r2, [r6, #0]
 8002afa:	605a      	strne	r2, [r3, #4]
 8002afc:	e7ec      	b.n	8002ad8 <_malloc_r+0xa0>
 8002afe:	4623      	mov	r3, r4
 8002b00:	6864      	ldr	r4, [r4, #4]
 8002b02:	e7b2      	b.n	8002a6a <_malloc_r+0x32>
 8002b04:	4634      	mov	r4, r6
 8002b06:	6876      	ldr	r6, [r6, #4]
 8002b08:	e7b9      	b.n	8002a7e <_malloc_r+0x46>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	4638      	mov	r0, r7
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	f000 f918 	bl	8002d44 <__malloc_unlock>
 8002b14:	e7a1      	b.n	8002a5a <_malloc_r+0x22>
 8002b16:	6025      	str	r5, [r4, #0]
 8002b18:	e7de      	b.n	8002ad8 <_malloc_r+0xa0>
 8002b1a:	bf00      	nop
 8002b1c:	2000024c 	.word	0x2000024c

08002b20 <_sbrk_r>:
 8002b20:	b538      	push	{r3, r4, r5, lr}
 8002b22:	2300      	movs	r3, #0
 8002b24:	4d05      	ldr	r5, [pc, #20]	; (8002b3c <_sbrk_r+0x1c>)
 8002b26:	4604      	mov	r4, r0
 8002b28:	4608      	mov	r0, r1
 8002b2a:	602b      	str	r3, [r5, #0]
 8002b2c:	f7ff fe64 	bl	80027f8 <_sbrk>
 8002b30:	1c43      	adds	r3, r0, #1
 8002b32:	d102      	bne.n	8002b3a <_sbrk_r+0x1a>
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	b103      	cbz	r3, 8002b3a <_sbrk_r+0x1a>
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	bd38      	pop	{r3, r4, r5, pc}
 8002b3c:	20000254 	.word	0x20000254

08002b40 <siprintf>:
 8002b40:	b40e      	push	{r1, r2, r3}
 8002b42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b46:	b500      	push	{lr}
 8002b48:	b09c      	sub	sp, #112	; 0x70
 8002b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8002b4c:	9002      	str	r0, [sp, #8]
 8002b4e:	9006      	str	r0, [sp, #24]
 8002b50:	9107      	str	r1, [sp, #28]
 8002b52:	9104      	str	r1, [sp, #16]
 8002b54:	4808      	ldr	r0, [pc, #32]	; (8002b78 <siprintf+0x38>)
 8002b56:	4909      	ldr	r1, [pc, #36]	; (8002b7c <siprintf+0x3c>)
 8002b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b5c:	9105      	str	r1, [sp, #20]
 8002b5e:	6800      	ldr	r0, [r0, #0]
 8002b60:	a902      	add	r1, sp, #8
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	f000 f950 	bl	8002e08 <_svfiprintf_r>
 8002b68:	2200      	movs	r2, #0
 8002b6a:	9b02      	ldr	r3, [sp, #8]
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	b01c      	add	sp, #112	; 0x70
 8002b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b74:	b003      	add	sp, #12
 8002b76:	4770      	bx	lr
 8002b78:	200000b8 	.word	0x200000b8
 8002b7c:	ffff0208 	.word	0xffff0208

08002b80 <strncmp>:
 8002b80:	4603      	mov	r3, r0
 8002b82:	b510      	push	{r4, lr}
 8002b84:	b172      	cbz	r2, 8002ba4 <strncmp+0x24>
 8002b86:	3901      	subs	r1, #1
 8002b88:	1884      	adds	r4, r0, r2
 8002b8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002b8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002b92:	4290      	cmp	r0, r2
 8002b94:	d101      	bne.n	8002b9a <strncmp+0x1a>
 8002b96:	42a3      	cmp	r3, r4
 8002b98:	d101      	bne.n	8002b9e <strncmp+0x1e>
 8002b9a:	1a80      	subs	r0, r0, r2
 8002b9c:	bd10      	pop	{r4, pc}
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d1f3      	bne.n	8002b8a <strncmp+0xa>
 8002ba2:	e7fa      	b.n	8002b9a <strncmp+0x1a>
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	e7f9      	b.n	8002b9c <strncmp+0x1c>

08002ba8 <_strtol_l.constprop.0>:
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bae:	4680      	mov	r8, r0
 8002bb0:	d001      	beq.n	8002bb6 <_strtol_l.constprop.0+0xe>
 8002bb2:	2b24      	cmp	r3, #36	; 0x24
 8002bb4:	d906      	bls.n	8002bc4 <_strtol_l.constprop.0+0x1c>
 8002bb6:	f7ff fe83 	bl	80028c0 <__errno>
 8002bba:	2316      	movs	r3, #22
 8002bbc:	6003      	str	r3, [r0, #0]
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc4:	460d      	mov	r5, r1
 8002bc6:	4f35      	ldr	r7, [pc, #212]	; (8002c9c <_strtol_l.constprop.0+0xf4>)
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002bce:	5de6      	ldrb	r6, [r4, r7]
 8002bd0:	f016 0608 	ands.w	r6, r6, #8
 8002bd4:	d1f8      	bne.n	8002bc8 <_strtol_l.constprop.0+0x20>
 8002bd6:	2c2d      	cmp	r4, #45	; 0x2d
 8002bd8:	d12f      	bne.n	8002c3a <_strtol_l.constprop.0+0x92>
 8002bda:	2601      	movs	r6, #1
 8002bdc:	782c      	ldrb	r4, [r5, #0]
 8002bde:	1c85      	adds	r5, r0, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d057      	beq.n	8002c94 <_strtol_l.constprop.0+0xec>
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d109      	bne.n	8002bfc <_strtol_l.constprop.0+0x54>
 8002be8:	2c30      	cmp	r4, #48	; 0x30
 8002bea:	d107      	bne.n	8002bfc <_strtol_l.constprop.0+0x54>
 8002bec:	7828      	ldrb	r0, [r5, #0]
 8002bee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002bf2:	2858      	cmp	r0, #88	; 0x58
 8002bf4:	d149      	bne.n	8002c8a <_strtol_l.constprop.0+0xe2>
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	786c      	ldrb	r4, [r5, #1]
 8002bfa:	3502      	adds	r5, #2
 8002bfc:	2700      	movs	r7, #0
 8002bfe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002c02:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002c06:	fbbe f9f3 	udiv	r9, lr, r3
 8002c0a:	4638      	mov	r0, r7
 8002c0c:	fb03 ea19 	mls	sl, r3, r9, lr
 8002c10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002c14:	f1bc 0f09 	cmp.w	ip, #9
 8002c18:	d814      	bhi.n	8002c44 <_strtol_l.constprop.0+0x9c>
 8002c1a:	4664      	mov	r4, ip
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	dd22      	ble.n	8002c66 <_strtol_l.constprop.0+0xbe>
 8002c20:	2f00      	cmp	r7, #0
 8002c22:	db1d      	blt.n	8002c60 <_strtol_l.constprop.0+0xb8>
 8002c24:	4581      	cmp	r9, r0
 8002c26:	d31b      	bcc.n	8002c60 <_strtol_l.constprop.0+0xb8>
 8002c28:	d101      	bne.n	8002c2e <_strtol_l.constprop.0+0x86>
 8002c2a:	45a2      	cmp	sl, r4
 8002c2c:	db18      	blt.n	8002c60 <_strtol_l.constprop.0+0xb8>
 8002c2e:	2701      	movs	r7, #1
 8002c30:	fb00 4003 	mla	r0, r0, r3, r4
 8002c34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c38:	e7ea      	b.n	8002c10 <_strtol_l.constprop.0+0x68>
 8002c3a:	2c2b      	cmp	r4, #43	; 0x2b
 8002c3c:	bf04      	itt	eq
 8002c3e:	782c      	ldrbeq	r4, [r5, #0]
 8002c40:	1c85      	addeq	r5, r0, #2
 8002c42:	e7cd      	b.n	8002be0 <_strtol_l.constprop.0+0x38>
 8002c44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002c48:	f1bc 0f19 	cmp.w	ip, #25
 8002c4c:	d801      	bhi.n	8002c52 <_strtol_l.constprop.0+0xaa>
 8002c4e:	3c37      	subs	r4, #55	; 0x37
 8002c50:	e7e4      	b.n	8002c1c <_strtol_l.constprop.0+0x74>
 8002c52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002c56:	f1bc 0f19 	cmp.w	ip, #25
 8002c5a:	d804      	bhi.n	8002c66 <_strtol_l.constprop.0+0xbe>
 8002c5c:	3c57      	subs	r4, #87	; 0x57
 8002c5e:	e7dd      	b.n	8002c1c <_strtol_l.constprop.0+0x74>
 8002c60:	f04f 37ff 	mov.w	r7, #4294967295
 8002c64:	e7e6      	b.n	8002c34 <_strtol_l.constprop.0+0x8c>
 8002c66:	2f00      	cmp	r7, #0
 8002c68:	da07      	bge.n	8002c7a <_strtol_l.constprop.0+0xd2>
 8002c6a:	2322      	movs	r3, #34	; 0x22
 8002c6c:	4670      	mov	r0, lr
 8002c6e:	f8c8 3000 	str.w	r3, [r8]
 8002c72:	2a00      	cmp	r2, #0
 8002c74:	d0a4      	beq.n	8002bc0 <_strtol_l.constprop.0+0x18>
 8002c76:	1e69      	subs	r1, r5, #1
 8002c78:	e005      	b.n	8002c86 <_strtol_l.constprop.0+0xde>
 8002c7a:	b106      	cbz	r6, 8002c7e <_strtol_l.constprop.0+0xd6>
 8002c7c:	4240      	negs	r0, r0
 8002c7e:	2a00      	cmp	r2, #0
 8002c80:	d09e      	beq.n	8002bc0 <_strtol_l.constprop.0+0x18>
 8002c82:	2f00      	cmp	r7, #0
 8002c84:	d1f7      	bne.n	8002c76 <_strtol_l.constprop.0+0xce>
 8002c86:	6011      	str	r1, [r2, #0]
 8002c88:	e79a      	b.n	8002bc0 <_strtol_l.constprop.0+0x18>
 8002c8a:	2430      	movs	r4, #48	; 0x30
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1b5      	bne.n	8002bfc <_strtol_l.constprop.0+0x54>
 8002c90:	2308      	movs	r3, #8
 8002c92:	e7b3      	b.n	8002bfc <_strtol_l.constprop.0+0x54>
 8002c94:	2c30      	cmp	r4, #48	; 0x30
 8002c96:	d0a9      	beq.n	8002bec <_strtol_l.constprop.0+0x44>
 8002c98:	230a      	movs	r3, #10
 8002c9a:	e7af      	b.n	8002bfc <_strtol_l.constprop.0+0x54>
 8002c9c:	0800369a 	.word	0x0800369a

08002ca0 <strtol>:
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <strtol+0x10>)
 8002ca8:	6800      	ldr	r0, [r0, #0]
 8002caa:	f7ff bf7d 	b.w	8002ba8 <_strtol_l.constprop.0>
 8002cae:	bf00      	nop
 8002cb0:	200000b8 	.word	0x200000b8

08002cb4 <__utoa>:
 8002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb6:	b08b      	sub	sp, #44	; 0x2c
 8002cb8:	4605      	mov	r5, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	466e      	mov	r6, sp
 8002cbe:	4c1d      	ldr	r4, [pc, #116]	; (8002d34 <__utoa+0x80>)
 8002cc0:	f104 0c20 	add.w	ip, r4, #32
 8002cc4:	4637      	mov	r7, r6
 8002cc6:	6820      	ldr	r0, [r4, #0]
 8002cc8:	6861      	ldr	r1, [r4, #4]
 8002cca:	3408      	adds	r4, #8
 8002ccc:	c703      	stmia	r7!, {r0, r1}
 8002cce:	4564      	cmp	r4, ip
 8002cd0:	463e      	mov	r6, r7
 8002cd2:	d1f7      	bne.n	8002cc4 <__utoa+0x10>
 8002cd4:	7921      	ldrb	r1, [r4, #4]
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	7139      	strb	r1, [r7, #4]
 8002cda:	1e91      	subs	r1, r2, #2
 8002cdc:	2922      	cmp	r1, #34	; 0x22
 8002cde:	6038      	str	r0, [r7, #0]
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	d904      	bls.n	8002cf0 <__utoa+0x3c>
 8002ce6:	7019      	strb	r1, [r3, #0]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4618      	mov	r0, r3
 8002cec:	b00b      	add	sp, #44	; 0x2c
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf0:	1e58      	subs	r0, r3, #1
 8002cf2:	4684      	mov	ip, r0
 8002cf4:	fbb5 f7f2 	udiv	r7, r5, r2
 8002cf8:	fb02 5617 	mls	r6, r2, r7, r5
 8002cfc:	3628      	adds	r6, #40	; 0x28
 8002cfe:	446e      	add	r6, sp
 8002d00:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002d04:	460c      	mov	r4, r1
 8002d06:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002d0a:	462e      	mov	r6, r5
 8002d0c:	42b2      	cmp	r2, r6
 8002d0e:	463d      	mov	r5, r7
 8002d10:	f101 0101 	add.w	r1, r1, #1
 8002d14:	d9ee      	bls.n	8002cf4 <__utoa+0x40>
 8002d16:	2200      	movs	r2, #0
 8002d18:	545a      	strb	r2, [r3, r1]
 8002d1a:	1919      	adds	r1, r3, r4
 8002d1c:	1aa5      	subs	r5, r4, r2
 8002d1e:	42aa      	cmp	r2, r5
 8002d20:	dae3      	bge.n	8002cea <__utoa+0x36>
 8002d22:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002d26:	780e      	ldrb	r6, [r1, #0]
 8002d28:	3201      	adds	r2, #1
 8002d2a:	7006      	strb	r6, [r0, #0]
 8002d2c:	f801 5901 	strb.w	r5, [r1], #-1
 8002d30:	e7f4      	b.n	8002d1c <__utoa+0x68>
 8002d32:	bf00      	nop
 8002d34:	08003674 	.word	0x08003674

08002d38 <__malloc_lock>:
 8002d38:	4801      	ldr	r0, [pc, #4]	; (8002d40 <__malloc_lock+0x8>)
 8002d3a:	f000 bafb 	b.w	8003334 <__retarget_lock_acquire_recursive>
 8002d3e:	bf00      	nop
 8002d40:	20000258 	.word	0x20000258

08002d44 <__malloc_unlock>:
 8002d44:	4801      	ldr	r0, [pc, #4]	; (8002d4c <__malloc_unlock+0x8>)
 8002d46:	f000 baf6 	b.w	8003336 <__retarget_lock_release_recursive>
 8002d4a:	bf00      	nop
 8002d4c:	20000258 	.word	0x20000258

08002d50 <__ssputs_r>:
 8002d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d54:	688e      	ldr	r6, [r1, #8]
 8002d56:	4682      	mov	sl, r0
 8002d58:	429e      	cmp	r6, r3
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	4690      	mov	r8, r2
 8002d5e:	461f      	mov	r7, r3
 8002d60:	d838      	bhi.n	8002dd4 <__ssputs_r+0x84>
 8002d62:	898a      	ldrh	r2, [r1, #12]
 8002d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d68:	d032      	beq.n	8002dd0 <__ssputs_r+0x80>
 8002d6a:	6825      	ldr	r5, [r4, #0]
 8002d6c:	6909      	ldr	r1, [r1, #16]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	eba5 0901 	sub.w	r9, r5, r1
 8002d74:	6965      	ldr	r5, [r4, #20]
 8002d76:	444b      	add	r3, r9
 8002d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d80:	106d      	asrs	r5, r5, #1
 8002d82:	429d      	cmp	r5, r3
 8002d84:	bf38      	it	cc
 8002d86:	461d      	movcc	r5, r3
 8002d88:	0553      	lsls	r3, r2, #21
 8002d8a:	d531      	bpl.n	8002df0 <__ssputs_r+0xa0>
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	f7ff fe53 	bl	8002a38 <_malloc_r>
 8002d92:	4606      	mov	r6, r0
 8002d94:	b950      	cbnz	r0, 8002dac <__ssputs_r+0x5c>
 8002d96:	230c      	movs	r3, #12
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f8ca 3000 	str.w	r3, [sl]
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dac:	464a      	mov	r2, r9
 8002dae:	6921      	ldr	r1, [r4, #16]
 8002db0:	f000 fad0 	bl	8003354 <memcpy>
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	6126      	str	r6, [r4, #16]
 8002dc2:	444e      	add	r6, r9
 8002dc4:	6026      	str	r6, [r4, #0]
 8002dc6:	463e      	mov	r6, r7
 8002dc8:	6165      	str	r5, [r4, #20]
 8002dca:	eba5 0509 	sub.w	r5, r5, r9
 8002dce:	60a5      	str	r5, [r4, #8]
 8002dd0:	42be      	cmp	r6, r7
 8002dd2:	d900      	bls.n	8002dd6 <__ssputs_r+0x86>
 8002dd4:	463e      	mov	r6, r7
 8002dd6:	4632      	mov	r2, r6
 8002dd8:	4641      	mov	r1, r8
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	f000 fac8 	bl	8003370 <memmove>
 8002de0:	68a3      	ldr	r3, [r4, #8]
 8002de2:	2000      	movs	r0, #0
 8002de4:	1b9b      	subs	r3, r3, r6
 8002de6:	60a3      	str	r3, [r4, #8]
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	4433      	add	r3, r6
 8002dec:	6023      	str	r3, [r4, #0]
 8002dee:	e7db      	b.n	8002da8 <__ssputs_r+0x58>
 8002df0:	462a      	mov	r2, r5
 8002df2:	f000 fad7 	bl	80033a4 <_realloc_r>
 8002df6:	4606      	mov	r6, r0
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d1e1      	bne.n	8002dc0 <__ssputs_r+0x70>
 8002dfc:	4650      	mov	r0, sl
 8002dfe:	6921      	ldr	r1, [r4, #16]
 8002e00:	f7ff fdb2 	bl	8002968 <_free_r>
 8002e04:	e7c7      	b.n	8002d96 <__ssputs_r+0x46>
	...

08002e08 <_svfiprintf_r>:
 8002e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0c:	4698      	mov	r8, r3
 8002e0e:	898b      	ldrh	r3, [r1, #12]
 8002e10:	4607      	mov	r7, r0
 8002e12:	061b      	lsls	r3, r3, #24
 8002e14:	460d      	mov	r5, r1
 8002e16:	4614      	mov	r4, r2
 8002e18:	b09d      	sub	sp, #116	; 0x74
 8002e1a:	d50e      	bpl.n	8002e3a <_svfiprintf_r+0x32>
 8002e1c:	690b      	ldr	r3, [r1, #16]
 8002e1e:	b963      	cbnz	r3, 8002e3a <_svfiprintf_r+0x32>
 8002e20:	2140      	movs	r1, #64	; 0x40
 8002e22:	f7ff fe09 	bl	8002a38 <_malloc_r>
 8002e26:	6028      	str	r0, [r5, #0]
 8002e28:	6128      	str	r0, [r5, #16]
 8002e2a:	b920      	cbnz	r0, 8002e36 <_svfiprintf_r+0x2e>
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	e0d1      	b.n	8002fda <_svfiprintf_r+0x1d2>
 8002e36:	2340      	movs	r3, #64	; 0x40
 8002e38:	616b      	str	r3, [r5, #20]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3e:	2320      	movs	r3, #32
 8002e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e44:	2330      	movs	r3, #48	; 0x30
 8002e46:	f04f 0901 	mov.w	r9, #1
 8002e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ff4 <_svfiprintf_r+0x1ec>
 8002e52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e56:	4623      	mov	r3, r4
 8002e58:	469a      	mov	sl, r3
 8002e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e5e:	b10a      	cbz	r2, 8002e64 <_svfiprintf_r+0x5c>
 8002e60:	2a25      	cmp	r2, #37	; 0x25
 8002e62:	d1f9      	bne.n	8002e58 <_svfiprintf_r+0x50>
 8002e64:	ebba 0b04 	subs.w	fp, sl, r4
 8002e68:	d00b      	beq.n	8002e82 <_svfiprintf_r+0x7a>
 8002e6a:	465b      	mov	r3, fp
 8002e6c:	4622      	mov	r2, r4
 8002e6e:	4629      	mov	r1, r5
 8002e70:	4638      	mov	r0, r7
 8002e72:	f7ff ff6d 	bl	8002d50 <__ssputs_r>
 8002e76:	3001      	adds	r0, #1
 8002e78:	f000 80aa 	beq.w	8002fd0 <_svfiprintf_r+0x1c8>
 8002e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e7e:	445a      	add	r2, fp
 8002e80:	9209      	str	r2, [sp, #36]	; 0x24
 8002e82:	f89a 3000 	ldrb.w	r3, [sl]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80a2 	beq.w	8002fd0 <_svfiprintf_r+0x1c8>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e96:	f10a 0a01 	add.w	sl, sl, #1
 8002e9a:	9304      	str	r3, [sp, #16]
 8002e9c:	9307      	str	r3, [sp, #28]
 8002e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8002ea4:	4654      	mov	r4, sl
 8002ea6:	2205      	movs	r2, #5
 8002ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eac:	4851      	ldr	r0, [pc, #324]	; (8002ff4 <_svfiprintf_r+0x1ec>)
 8002eae:	f000 fa43 	bl	8003338 <memchr>
 8002eb2:	9a04      	ldr	r2, [sp, #16]
 8002eb4:	b9d8      	cbnz	r0, 8002eee <_svfiprintf_r+0xe6>
 8002eb6:	06d0      	lsls	r0, r2, #27
 8002eb8:	bf44      	itt	mi
 8002eba:	2320      	movmi	r3, #32
 8002ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ec0:	0711      	lsls	r1, r2, #28
 8002ec2:	bf44      	itt	mi
 8002ec4:	232b      	movmi	r3, #43	; 0x2b
 8002ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002eca:	f89a 3000 	ldrb.w	r3, [sl]
 8002ece:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed0:	d015      	beq.n	8002efe <_svfiprintf_r+0xf6>
 8002ed2:	4654      	mov	r4, sl
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f04f 0c0a 	mov.w	ip, #10
 8002eda:	9a07      	ldr	r2, [sp, #28]
 8002edc:	4621      	mov	r1, r4
 8002ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ee2:	3b30      	subs	r3, #48	; 0x30
 8002ee4:	2b09      	cmp	r3, #9
 8002ee6:	d94e      	bls.n	8002f86 <_svfiprintf_r+0x17e>
 8002ee8:	b1b0      	cbz	r0, 8002f18 <_svfiprintf_r+0x110>
 8002eea:	9207      	str	r2, [sp, #28]
 8002eec:	e014      	b.n	8002f18 <_svfiprintf_r+0x110>
 8002eee:	eba0 0308 	sub.w	r3, r0, r8
 8002ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	46a2      	mov	sl, r4
 8002efa:	9304      	str	r3, [sp, #16]
 8002efc:	e7d2      	b.n	8002ea4 <_svfiprintf_r+0x9c>
 8002efe:	9b03      	ldr	r3, [sp, #12]
 8002f00:	1d19      	adds	r1, r3, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	9103      	str	r1, [sp, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bfbb      	ittet	lt
 8002f0a:	425b      	neglt	r3, r3
 8002f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8002f10:	9307      	strge	r3, [sp, #28]
 8002f12:	9307      	strlt	r3, [sp, #28]
 8002f14:	bfb8      	it	lt
 8002f16:	9204      	strlt	r2, [sp, #16]
 8002f18:	7823      	ldrb	r3, [r4, #0]
 8002f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f1c:	d10c      	bne.n	8002f38 <_svfiprintf_r+0x130>
 8002f1e:	7863      	ldrb	r3, [r4, #1]
 8002f20:	2b2a      	cmp	r3, #42	; 0x2a
 8002f22:	d135      	bne.n	8002f90 <_svfiprintf_r+0x188>
 8002f24:	9b03      	ldr	r3, [sp, #12]
 8002f26:	3402      	adds	r4, #2
 8002f28:	1d1a      	adds	r2, r3, #4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	9203      	str	r2, [sp, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bfb8      	it	lt
 8002f32:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f36:	9305      	str	r3, [sp, #20]
 8002f38:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002ff8 <_svfiprintf_r+0x1f0>
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4650      	mov	r0, sl
 8002f40:	7821      	ldrb	r1, [r4, #0]
 8002f42:	f000 f9f9 	bl	8003338 <memchr>
 8002f46:	b140      	cbz	r0, 8002f5a <_svfiprintf_r+0x152>
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	eba0 000a 	sub.w	r0, r0, sl
 8002f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8002f52:	9b04      	ldr	r3, [sp, #16]
 8002f54:	3401      	adds	r4, #1
 8002f56:	4303      	orrs	r3, r0
 8002f58:	9304      	str	r3, [sp, #16]
 8002f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f5e:	2206      	movs	r2, #6
 8002f60:	4826      	ldr	r0, [pc, #152]	; (8002ffc <_svfiprintf_r+0x1f4>)
 8002f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f66:	f000 f9e7 	bl	8003338 <memchr>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d038      	beq.n	8002fe0 <_svfiprintf_r+0x1d8>
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <_svfiprintf_r+0x1f8>)
 8002f70:	bb1b      	cbnz	r3, 8002fba <_svfiprintf_r+0x1b2>
 8002f72:	9b03      	ldr	r3, [sp, #12]
 8002f74:	3307      	adds	r3, #7
 8002f76:	f023 0307 	bic.w	r3, r3, #7
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	9303      	str	r3, [sp, #12]
 8002f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f80:	4433      	add	r3, r6
 8002f82:	9309      	str	r3, [sp, #36]	; 0x24
 8002f84:	e767      	b.n	8002e56 <_svfiprintf_r+0x4e>
 8002f86:	460c      	mov	r4, r1
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f8e:	e7a5      	b.n	8002edc <_svfiprintf_r+0xd4>
 8002f90:	2300      	movs	r3, #0
 8002f92:	f04f 0c0a 	mov.w	ip, #10
 8002f96:	4619      	mov	r1, r3
 8002f98:	3401      	adds	r4, #1
 8002f9a:	9305      	str	r3, [sp, #20]
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fa2:	3a30      	subs	r2, #48	; 0x30
 8002fa4:	2a09      	cmp	r2, #9
 8002fa6:	d903      	bls.n	8002fb0 <_svfiprintf_r+0x1a8>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0c5      	beq.n	8002f38 <_svfiprintf_r+0x130>
 8002fac:	9105      	str	r1, [sp, #20]
 8002fae:	e7c3      	b.n	8002f38 <_svfiprintf_r+0x130>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fb8:	e7f0      	b.n	8002f9c <_svfiprintf_r+0x194>
 8002fba:	ab03      	add	r3, sp, #12
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	462a      	mov	r2, r5
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <_svfiprintf_r+0x1fc>)
 8002fc4:	a904      	add	r1, sp, #16
 8002fc6:	f3af 8000 	nop.w
 8002fca:	1c42      	adds	r2, r0, #1
 8002fcc:	4606      	mov	r6, r0
 8002fce:	d1d6      	bne.n	8002f7e <_svfiprintf_r+0x176>
 8002fd0:	89ab      	ldrh	r3, [r5, #12]
 8002fd2:	065b      	lsls	r3, r3, #25
 8002fd4:	f53f af2c 	bmi.w	8002e30 <_svfiprintf_r+0x28>
 8002fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fda:	b01d      	add	sp, #116	; 0x74
 8002fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe0:	ab03      	add	r3, sp, #12
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	462a      	mov	r2, r5
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <_svfiprintf_r+0x1fc>)
 8002fea:	a904      	add	r1, sp, #16
 8002fec:	f000 f87c 	bl	80030e8 <_printf_i>
 8002ff0:	e7eb      	b.n	8002fca <_svfiprintf_r+0x1c2>
 8002ff2:	bf00      	nop
 8002ff4:	0800379a 	.word	0x0800379a
 8002ff8:	080037a0 	.word	0x080037a0
 8002ffc:	080037a4 	.word	0x080037a4
 8003000:	00000000 	.word	0x00000000
 8003004:	08002d51 	.word	0x08002d51

08003008 <_printf_common>:
 8003008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800300c:	4616      	mov	r6, r2
 800300e:	4699      	mov	r9, r3
 8003010:	688a      	ldr	r2, [r1, #8]
 8003012:	690b      	ldr	r3, [r1, #16]
 8003014:	4607      	mov	r7, r0
 8003016:	4293      	cmp	r3, r2
 8003018:	bfb8      	it	lt
 800301a:	4613      	movlt	r3, r2
 800301c:	6033      	str	r3, [r6, #0]
 800301e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003022:	460c      	mov	r4, r1
 8003024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003028:	b10a      	cbz	r2, 800302e <_printf_common+0x26>
 800302a:	3301      	adds	r3, #1
 800302c:	6033      	str	r3, [r6, #0]
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	0699      	lsls	r1, r3, #26
 8003032:	bf42      	ittt	mi
 8003034:	6833      	ldrmi	r3, [r6, #0]
 8003036:	3302      	addmi	r3, #2
 8003038:	6033      	strmi	r3, [r6, #0]
 800303a:	6825      	ldr	r5, [r4, #0]
 800303c:	f015 0506 	ands.w	r5, r5, #6
 8003040:	d106      	bne.n	8003050 <_printf_common+0x48>
 8003042:	f104 0a19 	add.w	sl, r4, #25
 8003046:	68e3      	ldr	r3, [r4, #12]
 8003048:	6832      	ldr	r2, [r6, #0]
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	42ab      	cmp	r3, r5
 800304e:	dc28      	bgt.n	80030a2 <_printf_common+0x9a>
 8003050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003054:	1e13      	subs	r3, r2, #0
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	bf18      	it	ne
 800305a:	2301      	movne	r3, #1
 800305c:	0692      	lsls	r2, r2, #26
 800305e:	d42d      	bmi.n	80030bc <_printf_common+0xb4>
 8003060:	4649      	mov	r1, r9
 8003062:	4638      	mov	r0, r7
 8003064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003068:	47c0      	blx	r8
 800306a:	3001      	adds	r0, #1
 800306c:	d020      	beq.n	80030b0 <_printf_common+0xa8>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	68e5      	ldr	r5, [r4, #12]
 8003072:	f003 0306 	and.w	r3, r3, #6
 8003076:	2b04      	cmp	r3, #4
 8003078:	bf18      	it	ne
 800307a:	2500      	movne	r5, #0
 800307c:	6832      	ldr	r2, [r6, #0]
 800307e:	f04f 0600 	mov.w	r6, #0
 8003082:	68a3      	ldr	r3, [r4, #8]
 8003084:	bf08      	it	eq
 8003086:	1aad      	subeq	r5, r5, r2
 8003088:	6922      	ldr	r2, [r4, #16]
 800308a:	bf08      	it	eq
 800308c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003090:	4293      	cmp	r3, r2
 8003092:	bfc4      	itt	gt
 8003094:	1a9b      	subgt	r3, r3, r2
 8003096:	18ed      	addgt	r5, r5, r3
 8003098:	341a      	adds	r4, #26
 800309a:	42b5      	cmp	r5, r6
 800309c:	d11a      	bne.n	80030d4 <_printf_common+0xcc>
 800309e:	2000      	movs	r0, #0
 80030a0:	e008      	b.n	80030b4 <_printf_common+0xac>
 80030a2:	2301      	movs	r3, #1
 80030a4:	4652      	mov	r2, sl
 80030a6:	4649      	mov	r1, r9
 80030a8:	4638      	mov	r0, r7
 80030aa:	47c0      	blx	r8
 80030ac:	3001      	adds	r0, #1
 80030ae:	d103      	bne.n	80030b8 <_printf_common+0xb0>
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b8:	3501      	adds	r5, #1
 80030ba:	e7c4      	b.n	8003046 <_printf_common+0x3e>
 80030bc:	2030      	movs	r0, #48	; 0x30
 80030be:	18e1      	adds	r1, r4, r3
 80030c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030ca:	4422      	add	r2, r4
 80030cc:	3302      	adds	r3, #2
 80030ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030d2:	e7c5      	b.n	8003060 <_printf_common+0x58>
 80030d4:	2301      	movs	r3, #1
 80030d6:	4622      	mov	r2, r4
 80030d8:	4649      	mov	r1, r9
 80030da:	4638      	mov	r0, r7
 80030dc:	47c0      	blx	r8
 80030de:	3001      	adds	r0, #1
 80030e0:	d0e6      	beq.n	80030b0 <_printf_common+0xa8>
 80030e2:	3601      	adds	r6, #1
 80030e4:	e7d9      	b.n	800309a <_printf_common+0x92>
	...

080030e8 <_printf_i>:
 80030e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	7e0f      	ldrb	r7, [r1, #24]
 80030ee:	4691      	mov	r9, r2
 80030f0:	2f78      	cmp	r7, #120	; 0x78
 80030f2:	4680      	mov	r8, r0
 80030f4:	460c      	mov	r4, r1
 80030f6:	469a      	mov	sl, r3
 80030f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030fe:	d807      	bhi.n	8003110 <_printf_i+0x28>
 8003100:	2f62      	cmp	r7, #98	; 0x62
 8003102:	d80a      	bhi.n	800311a <_printf_i+0x32>
 8003104:	2f00      	cmp	r7, #0
 8003106:	f000 80d9 	beq.w	80032bc <_printf_i+0x1d4>
 800310a:	2f58      	cmp	r7, #88	; 0x58
 800310c:	f000 80a4 	beq.w	8003258 <_printf_i+0x170>
 8003110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003118:	e03a      	b.n	8003190 <_printf_i+0xa8>
 800311a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800311e:	2b15      	cmp	r3, #21
 8003120:	d8f6      	bhi.n	8003110 <_printf_i+0x28>
 8003122:	a101      	add	r1, pc, #4	; (adr r1, 8003128 <_printf_i+0x40>)
 8003124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003128:	08003181 	.word	0x08003181
 800312c:	08003195 	.word	0x08003195
 8003130:	08003111 	.word	0x08003111
 8003134:	08003111 	.word	0x08003111
 8003138:	08003111 	.word	0x08003111
 800313c:	08003111 	.word	0x08003111
 8003140:	08003195 	.word	0x08003195
 8003144:	08003111 	.word	0x08003111
 8003148:	08003111 	.word	0x08003111
 800314c:	08003111 	.word	0x08003111
 8003150:	08003111 	.word	0x08003111
 8003154:	080032a3 	.word	0x080032a3
 8003158:	080031c5 	.word	0x080031c5
 800315c:	08003285 	.word	0x08003285
 8003160:	08003111 	.word	0x08003111
 8003164:	08003111 	.word	0x08003111
 8003168:	080032c5 	.word	0x080032c5
 800316c:	08003111 	.word	0x08003111
 8003170:	080031c5 	.word	0x080031c5
 8003174:	08003111 	.word	0x08003111
 8003178:	08003111 	.word	0x08003111
 800317c:	0800328d 	.word	0x0800328d
 8003180:	682b      	ldr	r3, [r5, #0]
 8003182:	1d1a      	adds	r2, r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	602a      	str	r2, [r5, #0]
 8003188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800318c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003190:	2301      	movs	r3, #1
 8003192:	e0a4      	b.n	80032de <_printf_i+0x1f6>
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	6829      	ldr	r1, [r5, #0]
 8003198:	0606      	lsls	r6, r0, #24
 800319a:	f101 0304 	add.w	r3, r1, #4
 800319e:	d50a      	bpl.n	80031b6 <_printf_i+0xce>
 80031a0:	680e      	ldr	r6, [r1, #0]
 80031a2:	602b      	str	r3, [r5, #0]
 80031a4:	2e00      	cmp	r6, #0
 80031a6:	da03      	bge.n	80031b0 <_printf_i+0xc8>
 80031a8:	232d      	movs	r3, #45	; 0x2d
 80031aa:	4276      	negs	r6, r6
 80031ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031b0:	230a      	movs	r3, #10
 80031b2:	485e      	ldr	r0, [pc, #376]	; (800332c <_printf_i+0x244>)
 80031b4:	e019      	b.n	80031ea <_printf_i+0x102>
 80031b6:	680e      	ldr	r6, [r1, #0]
 80031b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031bc:	602b      	str	r3, [r5, #0]
 80031be:	bf18      	it	ne
 80031c0:	b236      	sxthne	r6, r6
 80031c2:	e7ef      	b.n	80031a4 <_printf_i+0xbc>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	1d19      	adds	r1, r3, #4
 80031ca:	6029      	str	r1, [r5, #0]
 80031cc:	0601      	lsls	r1, r0, #24
 80031ce:	d501      	bpl.n	80031d4 <_printf_i+0xec>
 80031d0:	681e      	ldr	r6, [r3, #0]
 80031d2:	e002      	b.n	80031da <_printf_i+0xf2>
 80031d4:	0646      	lsls	r6, r0, #25
 80031d6:	d5fb      	bpl.n	80031d0 <_printf_i+0xe8>
 80031d8:	881e      	ldrh	r6, [r3, #0]
 80031da:	2f6f      	cmp	r7, #111	; 0x6f
 80031dc:	bf0c      	ite	eq
 80031de:	2308      	moveq	r3, #8
 80031e0:	230a      	movne	r3, #10
 80031e2:	4852      	ldr	r0, [pc, #328]	; (800332c <_printf_i+0x244>)
 80031e4:	2100      	movs	r1, #0
 80031e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031ea:	6865      	ldr	r5, [r4, #4]
 80031ec:	2d00      	cmp	r5, #0
 80031ee:	bfa8      	it	ge
 80031f0:	6821      	ldrge	r1, [r4, #0]
 80031f2:	60a5      	str	r5, [r4, #8]
 80031f4:	bfa4      	itt	ge
 80031f6:	f021 0104 	bicge.w	r1, r1, #4
 80031fa:	6021      	strge	r1, [r4, #0]
 80031fc:	b90e      	cbnz	r6, 8003202 <_printf_i+0x11a>
 80031fe:	2d00      	cmp	r5, #0
 8003200:	d04d      	beq.n	800329e <_printf_i+0x1b6>
 8003202:	4615      	mov	r5, r2
 8003204:	fbb6 f1f3 	udiv	r1, r6, r3
 8003208:	fb03 6711 	mls	r7, r3, r1, r6
 800320c:	5dc7      	ldrb	r7, [r0, r7]
 800320e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003212:	4637      	mov	r7, r6
 8003214:	42bb      	cmp	r3, r7
 8003216:	460e      	mov	r6, r1
 8003218:	d9f4      	bls.n	8003204 <_printf_i+0x11c>
 800321a:	2b08      	cmp	r3, #8
 800321c:	d10b      	bne.n	8003236 <_printf_i+0x14e>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	07de      	lsls	r6, r3, #31
 8003222:	d508      	bpl.n	8003236 <_printf_i+0x14e>
 8003224:	6923      	ldr	r3, [r4, #16]
 8003226:	6861      	ldr	r1, [r4, #4]
 8003228:	4299      	cmp	r1, r3
 800322a:	bfde      	ittt	le
 800322c:	2330      	movle	r3, #48	; 0x30
 800322e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003232:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003236:	1b52      	subs	r2, r2, r5
 8003238:	6122      	str	r2, [r4, #16]
 800323a:	464b      	mov	r3, r9
 800323c:	4621      	mov	r1, r4
 800323e:	4640      	mov	r0, r8
 8003240:	f8cd a000 	str.w	sl, [sp]
 8003244:	aa03      	add	r2, sp, #12
 8003246:	f7ff fedf 	bl	8003008 <_printf_common>
 800324a:	3001      	adds	r0, #1
 800324c:	d14c      	bne.n	80032e8 <_printf_i+0x200>
 800324e:	f04f 30ff 	mov.w	r0, #4294967295
 8003252:	b004      	add	sp, #16
 8003254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003258:	4834      	ldr	r0, [pc, #208]	; (800332c <_printf_i+0x244>)
 800325a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800325e:	6829      	ldr	r1, [r5, #0]
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	f851 6b04 	ldr.w	r6, [r1], #4
 8003266:	6029      	str	r1, [r5, #0]
 8003268:	061d      	lsls	r5, r3, #24
 800326a:	d514      	bpl.n	8003296 <_printf_i+0x1ae>
 800326c:	07df      	lsls	r7, r3, #31
 800326e:	bf44      	itt	mi
 8003270:	f043 0320 	orrmi.w	r3, r3, #32
 8003274:	6023      	strmi	r3, [r4, #0]
 8003276:	b91e      	cbnz	r6, 8003280 <_printf_i+0x198>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	f023 0320 	bic.w	r3, r3, #32
 800327e:	6023      	str	r3, [r4, #0]
 8003280:	2310      	movs	r3, #16
 8003282:	e7af      	b.n	80031e4 <_printf_i+0xfc>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	f043 0320 	orr.w	r3, r3, #32
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	2378      	movs	r3, #120	; 0x78
 800328e:	4828      	ldr	r0, [pc, #160]	; (8003330 <_printf_i+0x248>)
 8003290:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003294:	e7e3      	b.n	800325e <_printf_i+0x176>
 8003296:	0659      	lsls	r1, r3, #25
 8003298:	bf48      	it	mi
 800329a:	b2b6      	uxthmi	r6, r6
 800329c:	e7e6      	b.n	800326c <_printf_i+0x184>
 800329e:	4615      	mov	r5, r2
 80032a0:	e7bb      	b.n	800321a <_printf_i+0x132>
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	6826      	ldr	r6, [r4, #0]
 80032a6:	1d18      	adds	r0, r3, #4
 80032a8:	6961      	ldr	r1, [r4, #20]
 80032aa:	6028      	str	r0, [r5, #0]
 80032ac:	0635      	lsls	r5, r6, #24
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	d501      	bpl.n	80032b6 <_printf_i+0x1ce>
 80032b2:	6019      	str	r1, [r3, #0]
 80032b4:	e002      	b.n	80032bc <_printf_i+0x1d4>
 80032b6:	0670      	lsls	r0, r6, #25
 80032b8:	d5fb      	bpl.n	80032b2 <_printf_i+0x1ca>
 80032ba:	8019      	strh	r1, [r3, #0]
 80032bc:	2300      	movs	r3, #0
 80032be:	4615      	mov	r5, r2
 80032c0:	6123      	str	r3, [r4, #16]
 80032c2:	e7ba      	b.n	800323a <_printf_i+0x152>
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	2100      	movs	r1, #0
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	602a      	str	r2, [r5, #0]
 80032cc:	681d      	ldr	r5, [r3, #0]
 80032ce:	6862      	ldr	r2, [r4, #4]
 80032d0:	4628      	mov	r0, r5
 80032d2:	f000 f831 	bl	8003338 <memchr>
 80032d6:	b108      	cbz	r0, 80032dc <_printf_i+0x1f4>
 80032d8:	1b40      	subs	r0, r0, r5
 80032da:	6060      	str	r0, [r4, #4]
 80032dc:	6863      	ldr	r3, [r4, #4]
 80032de:	6123      	str	r3, [r4, #16]
 80032e0:	2300      	movs	r3, #0
 80032e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032e6:	e7a8      	b.n	800323a <_printf_i+0x152>
 80032e8:	462a      	mov	r2, r5
 80032ea:	4649      	mov	r1, r9
 80032ec:	4640      	mov	r0, r8
 80032ee:	6923      	ldr	r3, [r4, #16]
 80032f0:	47d0      	blx	sl
 80032f2:	3001      	adds	r0, #1
 80032f4:	d0ab      	beq.n	800324e <_printf_i+0x166>
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	079b      	lsls	r3, r3, #30
 80032fa:	d413      	bmi.n	8003324 <_printf_i+0x23c>
 80032fc:	68e0      	ldr	r0, [r4, #12]
 80032fe:	9b03      	ldr	r3, [sp, #12]
 8003300:	4298      	cmp	r0, r3
 8003302:	bfb8      	it	lt
 8003304:	4618      	movlt	r0, r3
 8003306:	e7a4      	b.n	8003252 <_printf_i+0x16a>
 8003308:	2301      	movs	r3, #1
 800330a:	4632      	mov	r2, r6
 800330c:	4649      	mov	r1, r9
 800330e:	4640      	mov	r0, r8
 8003310:	47d0      	blx	sl
 8003312:	3001      	adds	r0, #1
 8003314:	d09b      	beq.n	800324e <_printf_i+0x166>
 8003316:	3501      	adds	r5, #1
 8003318:	68e3      	ldr	r3, [r4, #12]
 800331a:	9903      	ldr	r1, [sp, #12]
 800331c:	1a5b      	subs	r3, r3, r1
 800331e:	42ab      	cmp	r3, r5
 8003320:	dcf2      	bgt.n	8003308 <_printf_i+0x220>
 8003322:	e7eb      	b.n	80032fc <_printf_i+0x214>
 8003324:	2500      	movs	r5, #0
 8003326:	f104 0619 	add.w	r6, r4, #25
 800332a:	e7f5      	b.n	8003318 <_printf_i+0x230>
 800332c:	080037ab 	.word	0x080037ab
 8003330:	080037bc 	.word	0x080037bc

08003334 <__retarget_lock_acquire_recursive>:
 8003334:	4770      	bx	lr

08003336 <__retarget_lock_release_recursive>:
 8003336:	4770      	bx	lr

08003338 <memchr>:
 8003338:	4603      	mov	r3, r0
 800333a:	b510      	push	{r4, lr}
 800333c:	b2c9      	uxtb	r1, r1
 800333e:	4402      	add	r2, r0
 8003340:	4293      	cmp	r3, r2
 8003342:	4618      	mov	r0, r3
 8003344:	d101      	bne.n	800334a <memchr+0x12>
 8003346:	2000      	movs	r0, #0
 8003348:	e003      	b.n	8003352 <memchr+0x1a>
 800334a:	7804      	ldrb	r4, [r0, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	428c      	cmp	r4, r1
 8003350:	d1f6      	bne.n	8003340 <memchr+0x8>
 8003352:	bd10      	pop	{r4, pc}

08003354 <memcpy>:
 8003354:	440a      	add	r2, r1
 8003356:	4291      	cmp	r1, r2
 8003358:	f100 33ff 	add.w	r3, r0, #4294967295
 800335c:	d100      	bne.n	8003360 <memcpy+0xc>
 800335e:	4770      	bx	lr
 8003360:	b510      	push	{r4, lr}
 8003362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003366:	4291      	cmp	r1, r2
 8003368:	f803 4f01 	strb.w	r4, [r3, #1]!
 800336c:	d1f9      	bne.n	8003362 <memcpy+0xe>
 800336e:	bd10      	pop	{r4, pc}

08003370 <memmove>:
 8003370:	4288      	cmp	r0, r1
 8003372:	b510      	push	{r4, lr}
 8003374:	eb01 0402 	add.w	r4, r1, r2
 8003378:	d902      	bls.n	8003380 <memmove+0x10>
 800337a:	4284      	cmp	r4, r0
 800337c:	4623      	mov	r3, r4
 800337e:	d807      	bhi.n	8003390 <memmove+0x20>
 8003380:	1e43      	subs	r3, r0, #1
 8003382:	42a1      	cmp	r1, r4
 8003384:	d008      	beq.n	8003398 <memmove+0x28>
 8003386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800338a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800338e:	e7f8      	b.n	8003382 <memmove+0x12>
 8003390:	4601      	mov	r1, r0
 8003392:	4402      	add	r2, r0
 8003394:	428a      	cmp	r2, r1
 8003396:	d100      	bne.n	800339a <memmove+0x2a>
 8003398:	bd10      	pop	{r4, pc}
 800339a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800339e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033a2:	e7f7      	b.n	8003394 <memmove+0x24>

080033a4 <_realloc_r>:
 80033a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a8:	4680      	mov	r8, r0
 80033aa:	4614      	mov	r4, r2
 80033ac:	460e      	mov	r6, r1
 80033ae:	b921      	cbnz	r1, 80033ba <_realloc_r+0x16>
 80033b0:	4611      	mov	r1, r2
 80033b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033b6:	f7ff bb3f 	b.w	8002a38 <_malloc_r>
 80033ba:	b92a      	cbnz	r2, 80033c8 <_realloc_r+0x24>
 80033bc:	f7ff fad4 	bl	8002968 <_free_r>
 80033c0:	4625      	mov	r5, r4
 80033c2:	4628      	mov	r0, r5
 80033c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033c8:	f000 f81b 	bl	8003402 <_malloc_usable_size_r>
 80033cc:	4284      	cmp	r4, r0
 80033ce:	4607      	mov	r7, r0
 80033d0:	d802      	bhi.n	80033d8 <_realloc_r+0x34>
 80033d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033d6:	d812      	bhi.n	80033fe <_realloc_r+0x5a>
 80033d8:	4621      	mov	r1, r4
 80033da:	4640      	mov	r0, r8
 80033dc:	f7ff fb2c 	bl	8002a38 <_malloc_r>
 80033e0:	4605      	mov	r5, r0
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d0ed      	beq.n	80033c2 <_realloc_r+0x1e>
 80033e6:	42bc      	cmp	r4, r7
 80033e8:	4622      	mov	r2, r4
 80033ea:	4631      	mov	r1, r6
 80033ec:	bf28      	it	cs
 80033ee:	463a      	movcs	r2, r7
 80033f0:	f7ff ffb0 	bl	8003354 <memcpy>
 80033f4:	4631      	mov	r1, r6
 80033f6:	4640      	mov	r0, r8
 80033f8:	f7ff fab6 	bl	8002968 <_free_r>
 80033fc:	e7e1      	b.n	80033c2 <_realloc_r+0x1e>
 80033fe:	4635      	mov	r5, r6
 8003400:	e7df      	b.n	80033c2 <_realloc_r+0x1e>

08003402 <_malloc_usable_size_r>:
 8003402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003406:	1f18      	subs	r0, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	bfbc      	itt	lt
 800340c:	580b      	ldrlt	r3, [r1, r0]
 800340e:	18c0      	addlt	r0, r0, r3
 8003410:	4770      	bx	lr
	...

08003414 <_init>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr

08003420 <_fini>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr
