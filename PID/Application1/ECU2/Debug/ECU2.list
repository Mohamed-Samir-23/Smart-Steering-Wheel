
ECU2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080030a4  080030a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080030a4  080030a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080030a4  080030a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a4  080030a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080030ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000008  080030b0  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080030b0  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c2b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d34  00000000  00000000  00023c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  000249d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000027f  00000000  00000000  00024d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ec8  00000000  00000000  00024fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000260d  00000000  00000000  00026e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a5e4  00000000  00000000  00029494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e68  00000000  00000000  00033a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000348e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	0800308c 	.word	0x0800308c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	0800308c 	.word	0x0800308c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aac:	d2ed      	bcs.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2uiz>:
 8000f94:	0042      	lsls	r2, r0, #1
 8000f96:	d20e      	bcs.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30b      	bcc.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d409      	bmi.n	8000fbc <__aeabi_f2uiz+0x28>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb4:	4770      	bx	lr
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	4770      	bx	lr
 8000fbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc0:	d101      	bne.n	8000fc6 <__aeabi_f2uiz+0x32>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	d102      	bne.n	8000fcc <__aeabi_f2uiz+0x38>
 8000fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fca:	4770      	bx	lr
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <HHBDG_voidInit>:

void HHBDG_voidInit
(
	void
)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	/*intitalization pin motor 1 & 2*/
	MGPIO_stderrorPinModeSelect(HHBDG_PIN_MOTOR1_PWM,ALTFUN_PUSH_PULL_SPEED_50MHZ);
 8000fd8:	220b      	movs	r2, #11
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 fdc5 	bl	8001b6c <MGPIO_stderrorPinModeSelect>
	MGPIO_stderrorPinModeSelect(HHBDG_PIN_MOTOR2_PWM,ALTFUN_PUSH_PULL_SPEED_50MHZ);
 8000fe2:	220b      	movs	r2, #11
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fdc0 	bl	8001b6c <MGPIO_stderrorPinModeSelect>
	MGPIO_stderrorPinModeSelect(HHBDG_PIN_MOTOR1_DIR2,OUTPUT_PUSH_PULL_SPEED_50MHZ);
	
	MGPIO_stderrorPinModeSelect(HHBDG_PIN_MOTOR2_DIR1,OUTPUT_PUSH_PULL_SPEED_50MHZ);
	MGPIO_stderrorPinModeSelect(HHBDG_PIN_MOT0R2_DIR2,OUTPUT_PUSH_PULL_SPEED_50MHZ);
	*/
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HHBDG_stderrorPWMGeneration>:
	u16 ARG_u16PreScaler,
	u16 ARG_u16PWMFREQ,
	u16 ARG_u16Motor1DutyCycleValue,
	u16 ARG_u16Motor2DutyCycleValue
)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	4603      	mov	r3, r0
 8001004:	80bb      	strh	r3, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
 800100a:	4613      	mov	r3, r2
 800100c:	803b      	strh	r3, [r7, #0]
	STD_error_t L_stderrorError=E_NOK;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
	
	if((ARG_u16Motor1DutyCycleValue<=100)&&(ARG_u16Motor2DutyCycleValue<=100))
 8001012:	883b      	ldrh	r3, [r7, #0]
 8001014:	2b64      	cmp	r3, #100	; 0x64
 8001016:	d810      	bhi.n	800103a <HHBDG_stderrorPWMGeneration+0x4a>
 8001018:	8c3b      	ldrh	r3, [r7, #32]
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d80d      	bhi.n	800103a <HHBDG_stderrorPWMGeneration+0x4a>
	{
		MTIM2_voidPWMGeneration
 800101e:	883b      	ldrh	r3, [r7, #0]
 8001020:	b2dc      	uxtb	r4, r3
 8001022:	8c3b      	ldrh	r3, [r7, #32]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	88b9      	ldrh	r1, [r7, #4]
 800102a:	79f8      	ldrb	r0, [r7, #7]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4623      	mov	r3, r4
 8001030:	f001 fb9c 	bl	800276c <MTIM2_voidPWMGeneration>
			ARG_u16PreScaler,
			ARG_u16PWMFREQ,
			ARG_u16Motor1DutyCycleValue,
			ARG_u16Motor2DutyCycleValue
		);
		L_stderrorError=E_OK;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e001      	b.n	800103e <HHBDG_stderrorPWMGeneration+0x4e>
	}
	else
	{
		L_stderrorError=E_NOK;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <AFIO_VidSetEXTIConfiguration>:
STD_error_t AFIO_VidSetEXTIConfiguration
( 
	MAFIO_Line_t ARG_udtAFIO_Line, 
	MAFIO_Port_Name_t ARG_udtPortMap 
)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	STD_error_t L_stderrorError=E_NOK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
	
	if((ARG_udtAFIO_Line<=15)&&(ARG_udtPortMap<=2))
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	d84a      	bhi.n	80010f8 <AFIO_VidSetEXTIConfiguration+0xb0>
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d847      	bhi.n	80010f8 <AFIO_VidSetEXTIConfiguration+0xb0>
	{
		u8 L_u8RegIndex = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	73bb      	strb	r3, [r7, #14]

		if( ARG_udtAFIO_Line <= 3 )
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d802      	bhi.n	8001078 <AFIO_VidSetEXTIConfiguration+0x30>
		{
			L_u8RegIndex = 0 ;
 8001072:	2300      	movs	r3, #0
 8001074:	73bb      	strb	r3, [r7, #14]
 8001076:	e019      	b.n	80010ac <AFIO_VidSetEXTIConfiguration+0x64>
		}
		else if( ARG_udtAFIO_Line <= 7 )
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b07      	cmp	r3, #7
 800107c:	d805      	bhi.n	800108a <AFIO_VidSetEXTIConfiguration+0x42>
		{
			L_u8RegIndex   = 1 ;
 800107e:	2301      	movs	r3, #1
 8001080:	73bb      	strb	r3, [r7, #14]
			ARG_udtAFIO_Line -= 4 ;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	3b04      	subs	r3, #4
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	e010      	b.n	80010ac <AFIO_VidSetEXTIConfiguration+0x64>
		}
		else if( ARG_udtAFIO_Line <= 11 )
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b0b      	cmp	r3, #11
 800108e:	d805      	bhi.n	800109c <AFIO_VidSetEXTIConfiguration+0x54>
		{
			L_u8RegIndex   = 2 ;
 8001090:	2302      	movs	r3, #2
 8001092:	73bb      	strb	r3, [r7, #14]
			ARG_udtAFIO_Line -= 8 ;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3b08      	subs	r3, #8
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	e007      	b.n	80010ac <AFIO_VidSetEXTIConfiguration+0x64>
		}
		else if( ARG_udtAFIO_Line <= 15 )
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	d804      	bhi.n	80010ac <AFIO_VidSetEXTIConfiguration+0x64>
		{
			L_u8RegIndex   = 3 ;
 80010a2:	2303      	movs	r3, #3
 80010a4:	73bb      	strb	r3, [r7, #14]
			ARG_udtAFIO_Line -= 12 ;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	3b0c      	subs	r3, #12
 80010aa:	71fb      	strb	r3, [r7, #7]
		}

		AFIO->EXTICRx[L_u8RegIndex] &= ~ ( ( 0b1111 )    << ( ARG_udtAFIO_Line * 4 ));
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <AFIO_VidSetEXTIConfiguration+0xc0>)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	210f      	movs	r1, #15
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	4910      	ldr	r1, [pc, #64]	; (8001108 <AFIO_VidSetEXTIConfiguration+0xc0>)
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	4002      	ands	r2, r0
 80010ca:	3302      	adds	r3, #2
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AFIO->EXTICRx[L_u8RegIndex] |= ( ARG_udtPortMap ) << ( ARG_udtAFIO_Line * 4 );
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <AFIO_VidSetEXTIConfiguration+0xc0>)
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	3302      	adds	r3, #2
 80010d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010da:	79b9      	ldrb	r1, [r7, #6]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <AFIO_VidSetEXTIConfiguration+0xc0>)
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	4302      	orrs	r2, r0
 80010ec:	3302      	adds	r3, #2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		
		L_stderrorError=E_OK;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
	{
 80010f6:	e001      	b.n	80010fc <AFIO_VidSetEXTIConfiguration+0xb4>
	}
	else
	{
		L_stderrorError=E_NOK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40010000 	.word	0x40010000

0800110c <MCAN_stderrorInit>:
	u32 ARG_u32Prescaler,
	MCAN_Time_Seg1_t ARG_udtTime_Seg1,
	MCAN_Time_Seg2_t ARG_udtTime_Seg2,
	MCAN_Sync_Jump_Width_t ARG_udtSyncJumpWidth
)
{
 800110c:	b490      	push	{r4, r7}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	4603      	mov	r3, r0
 8001120:	71bb      	strb	r3, [r7, #6]
 8001122:	460b      	mov	r3, r1
 8001124:	717b      	strb	r3, [r7, #5]
 8001126:	4613      	mov	r3, r2
 8001128:	713b      	strb	r3, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
	if
	(
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b01      	cmp	r3, #1
 8001132:	f200 80b6 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udt_TimeTriggeredMode<=1)&&
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	2b01      	cmp	r3, #1
 800113a:	f200 80b2 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtBusOffMode<=1)&&
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	2b01      	cmp	r3, #1
 8001142:	f200 80ae 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtWakeupMode<=1)&&
 8001146:	7e3b      	ldrb	r3, [r7, #24]
 8001148:	2b01      	cmp	r3, #1
 800114a:	f200 80aa 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtReceiveLockedMode<=1)&&
 800114e:	7f3b      	ldrb	r3, [r7, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	f200 80a6 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtTransmitPriority<=1)&&
 8001156:	793b      	ldrb	r3, [r7, #4]
 8001158:	2b01      	cmp	r3, #1
 800115a:	f200 80a2 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtRetransmissionMode<=1)&&
 800115e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001162:	2b03      	cmp	r3, #3
 8001164:	f200 809d 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtCommunicationMode<=3)&&
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116e:	f200 8098 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_u32Prescaler<=1024)&&
 8001172:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001176:	2b0f      	cmp	r3, #15
 8001178:	f200 8093 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtTime_Seg1<=15)&&
 800117c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001180:	2b07      	cmp	r3, #7
 8001182:	f200 808e 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtTime_Seg2<=7)&&
 8001186:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800118a:	2b03      	cmp	r3, #3
 800118c:	f200 8089 	bhi.w	80012a2 <MCAN_stderrorInit+0x196>
		(ARG_udtSyncJumpWidth<=3)
	)
	{
		/*Initialization request*/
		CAN_MCR |=(1<<INRQ);
 8001190:	4b48      	ldr	r3, [pc, #288]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6013      	str	r3, [r2, #0]
		/*Initialization acknowledge*/
		while((1&(CAN_MSR>>INAK))==0);
 800119c:	bf00      	nop
 800119e:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <MCAN_stderrorInit+0x1ac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f9      	beq.n	800119e <MCAN_stderrorInit+0x92>
		/*Sleep mode request exit*/
		CAN_MCR &=~(1<<SLEEP);
 80011aa:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a41      	ldr	r2, [pc, #260]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011b0:	f023 0302 	bic.w	r3, r3, #2
 80011b4:	6013      	str	r3, [r2, #0]
		/*Initialization acknowledge*/
		while((1&(CAN_MSR>>SLAK))!=0);
 80011b6:	bf00      	nop
 80011b8:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <MCAN_stderrorInit+0x1ac>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f9      	bne.n	80011b8 <MCAN_stderrorInit+0xac>
		/*Time triggered communication mode config*/
		CAN_MCR &=~(1<<TTCM);
 80011c4:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ce:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udt_TimeTriggeredMode<<TTCM);
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	01d2      	lsls	r2, r2, #7
 80011d8:	4611      	mov	r1, r2
 80011da:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011dc:	430b      	orrs	r3, r1
 80011de:	6013      	str	r3, [r2, #0]
		/*bus-off management config*/
		CAN_MCR &=~(1<<ABOM);
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011ea:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtBusOffMode<<ABOM);
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	79ba      	ldrb	r2, [r7, #6]
 80011f2:	0192      	lsls	r2, r2, #6
 80011f4:	4611      	mov	r1, r2
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6013      	str	r3, [r2, #0]
		/*wakeup mode config*/
		CAN_MCR &=~(1<<AWUM);
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001202:	f023 0320 	bic.w	r3, r3, #32
 8001206:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtWakeupMode<<AWUM);
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	797a      	ldrb	r2, [r7, #5]
 800120e:	0152      	lsls	r2, r2, #5
 8001210:	4611      	mov	r1, r2
 8001212:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001214:	430b      	orrs	r3, r1
 8001216:	6013      	str	r3, [r2, #0]
		/*retransmission mode config*/
		CAN_MCR &=~(1<<NART);
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 800121e:	f023 0310 	bic.w	r3, r3, #16
 8001222:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtRetransmissionMode<<NART);
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	793a      	ldrb	r2, [r7, #4]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	4611      	mov	r1, r2
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001230:	430b      	orrs	r3, r1
 8001232:	6013      	str	r3, [r2, #0]
		/*Receive FIFO locked mode*/
		CAN_MCR &=~(1<<RFLM);
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 800123a:	f023 0308 	bic.w	r3, r3, #8
 800123e:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtReceiveLockedMode<<RFLM);
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	7e3a      	ldrb	r2, [r7, #24]
 8001246:	00d2      	lsls	r2, r2, #3
 8001248:	4611      	mov	r1, r2
 800124a:	4a1a      	ldr	r2, [pc, #104]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 800124c:	430b      	orrs	r3, r1
 800124e:	6013      	str	r3, [r2, #0]
		/*Transmit FIFO priority mode*/
		CAN_MCR &=~(1<<TXFP);
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001256:	f023 0304 	bic.w	r3, r3, #4
 800125a:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtTransmitPriority<<TXFP);
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	7f3a      	ldrb	r2, [r7, #28]
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4611      	mov	r1, r2
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <MCAN_stderrorInit+0x1a8>)
 8001268:	430b      	orrs	r3, r1
 800126a:	6013      	str	r3, [r2, #0]
		 *SyncJumpWidth
		 *Time Seg1
		 *Time Seg2
		 *Prescaler
		*/
		CAN_BTR = (	(ARG_udtCommunicationMode<<LBKM)|
 800126c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001270:	079a      	lsls	r2, r3, #30
					(ARG_udtSyncJumpWidth<<SJW)|
 8001272:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001276:	061b      	lsls	r3, r3, #24
		CAN_BTR = (	(ARG_udtCommunicationMode<<LBKM)|
 8001278:	431a      	orrs	r2, r3
					(ARG_udtTime_Seg1<<TS1)|
 800127a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800127e:	041b      	lsls	r3, r3, #16
					(ARG_udtSyncJumpWidth<<SJW)|
 8001280:	431a      	orrs	r2, r3
					(ARG_udtTime_Seg2<<TS2)|
 8001282:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001286:	051b      	lsls	r3, r3, #20
					(ARG_udtTime_Seg1<<TS1)|
 8001288:	4313      	orrs	r3, r2
 800128a:	4619      	mov	r1, r3
					((ARG_u32Prescaler-1)<<BRP));
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	3b01      	subs	r3, #1
		CAN_BTR = (	(ARG_udtCommunicationMode<<LBKM)|
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <MCAN_stderrorInit+0x1b0>)
					(ARG_udtTime_Seg2<<TS2)|
 8001292:	430b      	orrs	r3, r1
		CAN_BTR = (	(ARG_udtCommunicationMode<<LBKM)|
 8001294:	6013      	str	r3, [r2, #0]
	
		MCAN_udtState=NODE_INIT_READY;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MCAN_stderrorInit+0x1b4>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]

		L_stderrorError=E_OK;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e001      	b.n	80012a6 <MCAN_stderrorInit+0x19a>
	}
	else
	{
		L_stderrorError=E_NOK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc90      	pop	{r4, r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40006400 	.word	0x40006400
 80012b8:	40006404 	.word	0x40006404
 80012bc:	4000641c 	.word	0x4000641c
 80012c0:	20000024 	.word	0x20000024

080012c4 <MCAN_stderrorCanStart>:

STD_error_t MCAN_stderrorCanStart
(
	void
)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
	STD_error_t L_stderrorError=E_NOK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]
	
	u16 L_u16TimeoutCounter =0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	80bb      	strh	r3, [r7, #4]
	
	if(MCAN_udtState==NODE_INIT_READY)
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MCAN_stderrorCanStart+0x6c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d120      	bne.n	800131e <MCAN_stderrorCanStart+0x5a>
	{
		/*Request to be Normal Mode*/
		CAN_MCR &=~(1<<INRQ);
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MCAN_stderrorCanStart+0x70>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <MCAN_stderrorCanStart+0x70>)
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	6013      	str	r3, [r2, #0]
		/*Normal Mode acknowledge*/
		while(((1&(CAN_MSR>>INAK))!=0)&&(L_u16TimeoutCounter<MCAN_START_TIMEOUT))
 80012e8:	e002      	b.n	80012f0 <MCAN_stderrorCanStart+0x2c>
		{
			L_u16TimeoutCounter++;
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	3301      	adds	r3, #1
 80012ee:	80bb      	strh	r3, [r7, #4]
		while(((1&(CAN_MSR>>INAK))!=0)&&(L_u16TimeoutCounter<MCAN_START_TIMEOUT))
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MCAN_stderrorCanStart+0x74>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <MCAN_stderrorCanStart+0x40>
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001302:	d3f2      	bcc.n	80012ea <MCAN_stderrorCanStart+0x26>
		}
		if(L_u16TimeoutCounter==MCAN_START_TIMEOUT)
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800130a:	d102      	bne.n	8001312 <MCAN_stderrorCanStart+0x4e>
		{
			
			L_stderrorError=E_TIME_OUT;
 800130c:	2303      	movs	r3, #3
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	e007      	b.n	8001322 <MCAN_stderrorCanStart+0x5e>
			
		}
		else
		{
			MCAN_udtState=NODE_NORMAL_LISTENING;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MCAN_stderrorCanStart+0x6c>)
 8001314:	2202      	movs	r2, #2
 8001316:	701a      	strb	r2, [r3, #0]
			L_stderrorError=E_OK;
 8001318:	2301      	movs	r3, #1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	e001      	b.n	8001322 <MCAN_stderrorCanStart+0x5e>
		}
	}
	else
	{
		L_stderrorError=E_NOK;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
	}
	return L_stderrorError;
 8001322:	79fb      	ldrb	r3, [r7, #7]
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000024 	.word	0x20000024
 8001334:	40006400 	.word	0x40006400
 8001338:	40006404 	.word	0x40006404

0800133c <MCAN_u8EmptyMailboxNumber>:

static u8 MCAN_u8EmptyMailboxNumber
(
	void
)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
	u8 L_u8freemailbox=0;
 8001342:	2300      	movs	r3, #0
 8001344:	71fb      	strb	r3, [r7, #7]
	
	if((1&(CAN_TSR>>TME0))!=0)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MCAN_u8EmptyMailboxNumber+0x4c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <MCAN_u8EmptyMailboxNumber+0x1c>
	{
		L_u8freemailbox++;
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	3301      	adds	r3, #1
 8001356:	71fb      	strb	r3, [r7, #7]
	else
	{
		
	}
	
	if((1&(CAN_TSR>>TME1))!=0)
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MCAN_u8EmptyMailboxNumber+0x4c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <MCAN_u8EmptyMailboxNumber+0x2e>
	{
		L_u8freemailbox++;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	3301      	adds	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
	else
	{
		
	}
	
	if((1&(CAN_TSR>>TME2))!=0)
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MCAN_u8EmptyMailboxNumber+0x4c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <MCAN_u8EmptyMailboxNumber+0x40>
	{
		L_u8freemailbox++;
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	3301      	adds	r3, #1
 800137a:	71fb      	strb	r3, [r7, #7]
	else
	{
		
	}
	
	return L_u8freemailbox;
 800137c:	79fb      	ldrb	r3, [r7, #7]
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40006408 	.word	0x40006408

0800138c <MCAN_u8ReadyMailBox>:

static u8 MCAN_u8ReadyMailBox
(
	void
)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	return (3&(CAN_TSR>>MAILBOX_CODE));
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <MCAN_u8ReadyMailBox+0x1c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0e1b      	lsrs	r3, r3, #24
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	b2db      	uxtb	r3, r3
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40006408 	.word	0x40006408

080013ac <MCAN_stderrorSend>:

STD_error_t MCAN_stderrorSend
(
	MCAN_TX_FRAME_S * ARG_pudtFrame
)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pudtFrame != NULL_POINTER)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80bb 	beq.w	8001536 <MCAN_stderrorSend+0x18a>
	{
		u8 L_u8FreeTxMailboxesNumber=0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73bb      	strb	r3, [r7, #14]
		u8 L_u8TransmitMailbox=0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	737b      	strb	r3, [r7, #13]
		
		if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 80013c8:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <MCAN_stderrorSend+0x198>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <MCAN_stderrorSend+0x32>
 80013d2:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <MCAN_stderrorSend+0x198>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	f040 80a9 	bne.w	8001530 <MCAN_stderrorSend+0x184>
		{
			
			L_u8FreeTxMailboxesNumber=MCAN_u8EmptyMailboxNumber();
 80013de:	f7ff ffad 	bl	800133c <MCAN_u8EmptyMailboxNumber>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73bb      	strb	r3, [r7, #14]
			
			if(L_u8FreeTxMailboxesNumber>0)
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 809e 	beq.w	800152a <MCAN_stderrorSend+0x17e>
			{
				
				
				if
				(
					((ARG_pudtFrame->udtID_Type==0)||(ARG_pudtFrame->udtID_Type==4))&&
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	791b      	ldrb	r3, [r3, #4]
				(
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d004      	beq.n	8001400 <MCAN_stderrorSend+0x54>
					((ARG_pudtFrame->udtID_Type==0)||(ARG_pudtFrame->udtID_Type==4))&&
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	f040 8092 	bne.w	8001524 <MCAN_stderrorSend+0x178>
					((ARG_pudtFrame->udtRTR_Type==0)||(ARG_pudtFrame->udtRTR_Type==2))&&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	795b      	ldrb	r3, [r3, #5]
					((ARG_pudtFrame->udtID_Type==0)||(ARG_pudtFrame->udtID_Type==4))&&
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <MCAN_stderrorSend+0x66>
					((ARG_pudtFrame->udtRTR_Type==0)||(ARG_pudtFrame->udtRTR_Type==2))&&
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	795b      	ldrb	r3, [r3, #5]
 800140c:	2b02      	cmp	r3, #2
 800140e:	f040 8089 	bne.w	8001524 <MCAN_stderrorSend+0x178>
					(ARG_pudtFrame->udtDLC_Type<=8)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	799b      	ldrb	r3, [r3, #6]
					((ARG_pudtFrame->udtRTR_Type==0)||(ARG_pudtFrame->udtRTR_Type==2))&&
 8001416:	2b08      	cmp	r3, #8
 8001418:	f200 8084 	bhi.w	8001524 <MCAN_stderrorSend+0x178>
				)
				{
					L_u8TransmitMailbox=MCAN_u8ReadyMailBox();
 800141c:	f7ff ffb6 	bl	800138c <MCAN_u8ReadyMailBox>
 8001420:	4603      	mov	r3, r0
 8001422:	737b      	strb	r3, [r7, #13]
					ARG_pudtFrame->u8TxMailbox=(u8)1<<L_u8TransmitMailbox;
 8001424:	7b7b      	ldrb	r3, [r7, #13]
 8001426:	2201      	movs	r2, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	731a      	strb	r2, [r3, #12]
					
					/*Fram Config MSG ID ,RTR and IDE */
					if(ARG_pudtFrame->udtID_Type==ID_STD)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10e      	bne.n	8001458 <MCAN_stderrorSend+0xac>
					{
						CAN_MailBox[L_u8TransmitMailbox].TIR=(ARG_pudtFrame->u32Msg_Id<<21)|(ARG_pudtFrame->udtRTR_Type);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	055a      	lsls	r2, r3, #21
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	795b      	ldrb	r3, [r3, #5]
 8001444:	4619      	mov	r1, r3
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800144e:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e010      	b.n	800147a <MCAN_stderrorSend+0xce>
					}
					else
					{
						CAN_MailBox[L_u8TransmitMailbox].TIR=(ARG_pudtFrame->u32Msg_Id<<3)|(ARG_pudtFrame->udtRTR_Type)|(ARG_pudtFrame->udtID_Type);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	7952      	ldrb	r2, [r2, #5]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	791b      	ldrb	r3, [r3, #4]
 8001468:	4619      	mov	r1, r3
 800146a:	7b7b      	ldrb	r3, [r7, #13]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001472:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
					}
					
					/*Fram Config DLC*/
					CAN_MailBox[L_u8TransmitMailbox].TDTR=ARG_pudtFrame->udtDLC_Type;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	799a      	ldrb	r2, [r3, #6]
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001486:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 800148a:	605a      	str	r2, [r3, #4]
					/*write data in mailbox reg*/
					CAN_MailBox[L_u8TransmitMailbox].TDHR=	(ARG_pudtFrame->pu8Payload[7]<<24)|
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	3307      	adds	r3, #7
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	061a      	lsls	r2, r3, #24
															(ARG_pudtFrame->pu8Payload[6]<<16)|
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	3306      	adds	r3, #6
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	041b      	lsls	r3, r3, #16
					CAN_MailBox[L_u8TransmitMailbox].TDHR=	(ARG_pudtFrame->pu8Payload[7]<<24)|
 80014a0:	431a      	orrs	r2, r3
															(ARG_pudtFrame->pu8Payload[5]<<8) |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	3305      	adds	r3, #5
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	021b      	lsls	r3, r3, #8
															(ARG_pudtFrame->pu8Payload[6]<<16)|
 80014ac:	4313      	orrs	r3, r2
															(ARG_pudtFrame->pu8Payload[4]<<0) ;
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6892      	ldr	r2, [r2, #8]
 80014b2:	3204      	adds	r2, #4
 80014b4:	7812      	ldrb	r2, [r2, #0]
															(ARG_pudtFrame->pu8Payload[5]<<8) |
 80014b6:	431a      	orrs	r2, r3
					CAN_MailBox[L_u8TransmitMailbox].TDHR=	(ARG_pudtFrame->pu8Payload[7]<<24)|
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014c0:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 80014c4:	60da      	str	r2, [r3, #12]
															
					CAN_MailBox[L_u8TransmitMailbox].TDLR=	(ARG_pudtFrame->pu8Payload[3]<<24)|
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	3303      	adds	r3, #3
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	061a      	lsls	r2, r3, #24
															(ARG_pudtFrame->pu8Payload[2]<<16)|
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	3302      	adds	r3, #2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	041b      	lsls	r3, r3, #16
					CAN_MailBox[L_u8TransmitMailbox].TDLR=	(ARG_pudtFrame->pu8Payload[3]<<24)|
 80014da:	431a      	orrs	r2, r3
															(ARG_pudtFrame->pu8Payload[1]<<8) |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	021b      	lsls	r3, r3, #8
															(ARG_pudtFrame->pu8Payload[2]<<16)|
 80014e6:	4313      	orrs	r3, r2
															(ARG_pudtFrame->pu8Payload[0]<<0) ;
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6892      	ldr	r2, [r2, #8]
 80014ec:	7812      	ldrb	r2, [r2, #0]
															(ARG_pudtFrame->pu8Payload[1]<<8) |
 80014ee:	431a      	orrs	r2, r3
					CAN_MailBox[L_u8TransmitMailbox].TDLR=	(ARG_pudtFrame->pu8Payload[3]<<24)|
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014f8:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 80014fc:	609a      	str	r2, [r3, #8]
					/*Request Transmission*/
					CAN_MailBox[L_u8TransmitMailbox].TIR|=TXRQ;
 80014fe:	7b7b      	ldrb	r3, [r7, #13]
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001506:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001514:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
					
					L_stderrorError=E_OK;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
			if(L_u8FreeTxMailboxesNumber>0)
 8001522:	e00a      	b.n	800153a <MCAN_stderrorSend+0x18e>
				}
				else
				{
					L_stderrorError=E_NOK;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
			if(L_u8FreeTxMailboxesNumber>0)
 8001528:	e007      	b.n	800153a <MCAN_stderrorSend+0x18e>
				}
				
			}
			else
			{
				L_stderrorError=E_NOK;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
			if(L_u8FreeTxMailboxesNumber>0)
 800152e:	e004      	b.n	800153a <MCAN_stderrorSend+0x18e>
			}
			
		}
		else
		{
			L_stderrorError=E_NOK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e001      	b.n	800153a <MCAN_stderrorSend+0x18e>
		}
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 8001536:	2302      	movs	r3, #2
 8001538:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000024 	.word	0x20000024

08001548 <MCAN_stderrorFilterInit>:

STD_error_t MCAN_stderrorFilterInit
(
	MCAN_Filter_Config_s * ARG_pudtFilter
)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	
	STD_error_t L_stderrorError=E_NOK;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pudtFilter != NULL_POINTER)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80e2 	beq.w	8001720 <MCAN_stderrorFilterInit+0x1d8>
	{
		if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 800155c:	4b74      	ldr	r3, [pc, #464]	; (8001730 <MCAN_stderrorFilterInit+0x1e8>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d005      	beq.n	8001572 <MCAN_stderrorFilterInit+0x2a>
 8001566:	4b72      	ldr	r3, [pc, #456]	; (8001730 <MCAN_stderrorFilterInit+0x1e8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	f040 80d4 	bne.w	800171a <MCAN_stderrorFilterInit+0x1d2>
		{
			if
			(
				(ARG_pudtFilter->udtFILTER_ACTIVATION_STATE<=1)&&
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	781b      	ldrb	r3, [r3, #0]
			(
 8001576:	2b01      	cmp	r3, #1
 8001578:	f200 80cc 	bhi.w	8001714 <MCAN_stderrorFilterInit+0x1cc>
				(ARG_pudtFilter->udtSELECT_FILTER_BANK<=13)&&
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	785b      	ldrb	r3, [r3, #1]
				(ARG_pudtFilter->udtFILTER_ACTIVATION_STATE<=1)&&
 8001580:	2b0d      	cmp	r3, #13
 8001582:	f200 80c7 	bhi.w	8001714 <MCAN_stderrorFilterInit+0x1cc>
				(ARG_pudtFilter->udtSET_FILTER_FIFO<=1)&&
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	789b      	ldrb	r3, [r3, #2]
				(ARG_pudtFilter->udtSELECT_FILTER_BANK<=13)&&
 800158a:	2b01      	cmp	r3, #1
 800158c:	f200 80c2 	bhi.w	8001714 <MCAN_stderrorFilterInit+0x1cc>
				(ARG_pudtFilter->udtSET_FILTER_MODE<=1)&&
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7d1b      	ldrb	r3, [r3, #20]
				(ARG_pudtFilter->udtSET_FILTER_FIFO<=1)&&
 8001594:	2b01      	cmp	r3, #1
 8001596:	f200 80bd 	bhi.w	8001714 <MCAN_stderrorFilterInit+0x1cc>
				(ARG_pudtFilter->udtSET_FILTER_SCALE<=1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7d5b      	ldrb	r3, [r3, #21]
				(ARG_pudtFilter->udtSET_FILTER_MODE<=1)&&
 800159e:	2b01      	cmp	r3, #1
 80015a0:	f200 80b8 	bhi.w	8001714 <MCAN_stderrorFilterInit+0x1cc>
			)
			{
				/*enter initialisation Filter Mode*/
				CAN_FMR|=(1<<FINIT);
 80015a4:	4b63      	ldr	r3, [pc, #396]	; (8001734 <MCAN_stderrorFilterInit+0x1ec>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a62      	ldr	r2, [pc, #392]	; (8001734 <MCAN_stderrorFilterInit+0x1ec>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]
				
				/*Deactivation Filter*/
				CAN_FA1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <MCAN_stderrorFilterInit+0x1f0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	7852      	ldrb	r2, [r2, #1]
 80015b8:	4611      	mov	r1, r2
 80015ba:	2201      	movs	r2, #1
 80015bc:	408a      	lsls	r2, r1
 80015be:	43d2      	mvns	r2, r2
 80015c0:	4611      	mov	r1, r2
 80015c2:	4a5d      	ldr	r2, [pc, #372]	; (8001738 <MCAN_stderrorFilterInit+0x1f0>)
 80015c4:	400b      	ands	r3, r1
 80015c6:	6013      	str	r3, [r2, #0]
				
				/*set scale mode 16bit or 32bit*/
				CAN_FS1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 80015c8:	4b5c      	ldr	r3, [pc, #368]	; (800173c <MCAN_stderrorFilterInit+0x1f4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	7852      	ldrb	r2, [r2, #1]
 80015d0:	4611      	mov	r1, r2
 80015d2:	2201      	movs	r2, #1
 80015d4:	408a      	lsls	r2, r1
 80015d6:	43d2      	mvns	r2, r2
 80015d8:	4611      	mov	r1, r2
 80015da:	4a58      	ldr	r2, [pc, #352]	; (800173c <MCAN_stderrorFilterInit+0x1f4>)
 80015dc:	400b      	ands	r3, r1
 80015de:	6013      	str	r3, [r2, #0]
				CAN_FS1R|=(ARG_pudtFilter->udtSET_FILTER_SCALE<<ARG_pudtFilter->udtSELECT_FILTER_BANK);
 80015e0:	4b56      	ldr	r3, [pc, #344]	; (800173c <MCAN_stderrorFilterInit+0x1f4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	7d52      	ldrb	r2, [r2, #21]
 80015e8:	4611      	mov	r1, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	7852      	ldrb	r2, [r2, #1]
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	4611      	mov	r1, r2
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <MCAN_stderrorFilterInit+0x1f4>)
 80015f6:	430b      	orrs	r3, r1
 80015f8:	6013      	str	r3, [r2, #0]
				
				if(ARG_pudtFilter->udtSET_FILTER_SCALE == FILTER_SCALE_16BIT)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7d5b      	ldrb	r3, [r3, #21]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d11a      	bne.n	8001638 <MCAN_stderrorFilterInit+0xf0>
				{
					/*set id and mask*/
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR1=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_LOW) << 16U) |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	0419      	lsls	r1, r3, #16
																			(0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_LOW);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	b29a      	uxth	r2, r3
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR1=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_LOW) << 16U) |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	785b      	ldrb	r3, [r3, #1]
 8001612:	00d8      	lsls	r0, r3, #3
 8001614:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <MCAN_stderrorFilterInit+0x1f8>)
 8001616:	4403      	add	r3, r0
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR2=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_HIGH) << 16U) |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0419      	lsls	r1, r3, #16
																			(0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_HIGH);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	b29a      	uxth	r2, r3
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR2=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_HIGH) << 16U) |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	00d8      	lsls	r0, r3, #3
 800162e:	4b44      	ldr	r3, [pc, #272]	; (8001740 <MCAN_stderrorFilterInit+0x1f8>)
 8001630:	4403      	add	r3, r0
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	e019      	b.n	800166c <MCAN_stderrorFilterInit+0x124>
				}
				else
				{
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR1=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_HIGH) << 16U) |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	0419      	lsls	r1, r3, #16
																						(0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_LOW);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	b29a      	uxth	r2, r3
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR1=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_HIGH) << 16U) |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	00d8      	lsls	r0, r3, #3
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <MCAN_stderrorFilterInit+0x1f8>)
 800164c:	4403      	add	r3, r0
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR2=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_HIGH) << 16U) |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	0419      	lsls	r1, r3, #16
																						(0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_LOW);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	b29a      	uxth	r2, r3
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR2=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_HIGH) << 16U) |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	00d8      	lsls	r0, r3, #3
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <MCAN_stderrorFilterInit+0x1f8>)
 8001666:	4403      	add	r3, r0
 8001668:	430a      	orrs	r2, r1
 800166a:	605a      	str	r2, [r3, #4]
				}
				
				
				/*set mask mode or list mode*/
				CAN_FM1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 800166c:	4b35      	ldr	r3, [pc, #212]	; (8001744 <MCAN_stderrorFilterInit+0x1fc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	7852      	ldrb	r2, [r2, #1]
 8001674:	4611      	mov	r1, r2
 8001676:	2201      	movs	r2, #1
 8001678:	408a      	lsls	r2, r1
 800167a:	43d2      	mvns	r2, r2
 800167c:	4611      	mov	r1, r2
 800167e:	4a31      	ldr	r2, [pc, #196]	; (8001744 <MCAN_stderrorFilterInit+0x1fc>)
 8001680:	400b      	ands	r3, r1
 8001682:	6013      	str	r3, [r2, #0]
				CAN_FM1R|=(ARG_pudtFilter->udtSET_FILTER_MODE<<ARG_pudtFilter->udtSELECT_FILTER_BANK);
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <MCAN_stderrorFilterInit+0x1fc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	7d12      	ldrb	r2, [r2, #20]
 800168c:	4611      	mov	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	7852      	ldrb	r2, [r2, #1]
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4611      	mov	r1, r2
 8001698:	4a2a      	ldr	r2, [pc, #168]	; (8001744 <MCAN_stderrorFilterInit+0x1fc>)
 800169a:	430b      	orrs	r3, r1
 800169c:	6013      	str	r3, [r2, #0]
				
				/*set Filter FIFO*/
				CAN_FFA1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <MCAN_stderrorFilterInit+0x200>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	7852      	ldrb	r2, [r2, #1]
 80016a6:	4611      	mov	r1, r2
 80016a8:	2201      	movs	r2, #1
 80016aa:	408a      	lsls	r2, r1
 80016ac:	43d2      	mvns	r2, r2
 80016ae:	4611      	mov	r1, r2
 80016b0:	4a25      	ldr	r2, [pc, #148]	; (8001748 <MCAN_stderrorFilterInit+0x200>)
 80016b2:	400b      	ands	r3, r1
 80016b4:	6013      	str	r3, [r2, #0]
				CAN_FFA1R|=(ARG_pudtFilter->udtSET_FILTER_FIFO<<ARG_pudtFilter->udtSELECT_FILTER_BANK);
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <MCAN_stderrorFilterInit+0x200>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	7892      	ldrb	r2, [r2, #2]
 80016be:	4611      	mov	r1, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	7852      	ldrb	r2, [r2, #1]
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	4611      	mov	r1, r2
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <MCAN_stderrorFilterInit+0x200>)
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6013      	str	r3, [r2, #0]
				
				/*set Activation State*/
				CAN_FA1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MCAN_stderrorFilterInit+0x1f0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	7852      	ldrb	r2, [r2, #1]
 80016d8:	4611      	mov	r1, r2
 80016da:	2201      	movs	r2, #1
 80016dc:	408a      	lsls	r2, r1
 80016de:	43d2      	mvns	r2, r2
 80016e0:	4611      	mov	r1, r2
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <MCAN_stderrorFilterInit+0x1f0>)
 80016e4:	400b      	ands	r3, r1
 80016e6:	6013      	str	r3, [r2, #0]
				CAN_FA1R|=(ARG_pudtFilter->udtFILTER_ACTIVATION_STATE<<ARG_pudtFilter->udtSELECT_FILTER_BANK);
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MCAN_stderrorFilterInit+0x1f0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	7812      	ldrb	r2, [r2, #0]
 80016f0:	4611      	mov	r1, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	7852      	ldrb	r2, [r2, #1]
 80016f6:	fa01 f202 	lsl.w	r2, r1, r2
 80016fa:	4611      	mov	r1, r2
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <MCAN_stderrorFilterInit+0x1f0>)
 80016fe:	430b      	orrs	r3, r1
 8001700:	6013      	str	r3, [r2, #0]
				
				/*exit initialisation Filter Mode*/
				CAN_FMR&=(~(1<<FINIT));
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MCAN_stderrorFilterInit+0x1ec>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <MCAN_stderrorFilterInit+0x1ec>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6013      	str	r3, [r2, #0]
				
				
				L_stderrorError=E_OK;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
			(
 8001712:	e007      	b.n	8001724 <MCAN_stderrorFilterInit+0x1dc>
			}
			else
			{
				L_stderrorError=E_NOK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]
			(
 8001718:	e004      	b.n	8001724 <MCAN_stderrorFilterInit+0x1dc>
			
			
		}
		else
		{
			L_stderrorError=E_NOK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e001      	b.n	8001724 <MCAN_stderrorFilterInit+0x1dc>
		
		
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 8001720:	2302      	movs	r3, #2
 8001722:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	20000024 	.word	0x20000024
 8001734:	40006600 	.word	0x40006600
 8001738:	4000661c 	.word	0x4000661c
 800173c:	4000660c 	.word	0x4000660c
 8001740:	40006640 	.word	0x40006640
 8001744:	40006604 	.word	0x40006604
 8001748:	40006614 	.word	0x40006614

0800174c <MCAN_u8FIFOMailboxNumber>:
/*is there a massage in fifo*/
static u8 MCAN_u8FIFOMailboxNumber
(
	u8 ARG_u8FIFOINDEX
)	
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
	u8 L_u8FIFOMailboxNumber=0;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]
	
	if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MCAN_u8FIFOMailboxNumber+0x54>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d004      	beq.n	800176e <MCAN_u8FIFOMailboxNumber+0x22>
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MCAN_u8FIFOMailboxNumber+0x54>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d112      	bne.n	8001794 <MCAN_u8FIFOMailboxNumber+0x48>
	{
		
		if(ARG_u8FIFOINDEX == 0)
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d106      	bne.n	8001782 <MCAN_u8FIFOMailboxNumber+0x36>
		{
			L_u8FIFOMailboxNumber = CAN_RF0R & 3U;
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MCAN_u8FIFOMailboxNumber+0x58>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e008      	b.n	8001794 <MCAN_u8FIFOMailboxNumber+0x48>
		}
		else if(ARG_u8FIFOINDEX == 1)
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <MCAN_u8FIFOMailboxNumber+0x48>
		{
			L_u8FIFOMailboxNumber = CAN_RF1R & 3U;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MCAN_u8FIFOMailboxNumber+0x5c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	73fb      	strb	r3, [r7, #15]
	{
		
		
	}
	
	return L_u8FIFOMailboxNumber;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000024 	.word	0x20000024
 80017a4:	4000640c 	.word	0x4000640c
 80017a8:	40006410 	.word	0x40006410

080017ac <MCAN_stderrorReceive>:

STD_error_t MCAN_stderrorReceive
(
	MCAN_RX_FRAME_S * ARG_pudtFrame
)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	
	STD_error_t L_stderrorError=E_NOK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pudtFrame !=NULL_POINTER)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80d5 	beq.w	800196a <MCAN_stderrorReceive+0x1be>
	{
		if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 80017c0:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <MCAN_stderrorReceive+0x1cc>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d005      	beq.n	80017d6 <MCAN_stderrorReceive+0x2a>
 80017ca:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <MCAN_stderrorReceive+0x1cc>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	f040 80c7 	bne.w	8001964 <MCAN_stderrorReceive+0x1b8>
		{
			/*is there a massage in fifo*/
			if(MCAN_u8FIFOMailboxNumber(ARG_pudtFrame->udtSET_FILTER_FIFO)!=0)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ffb6 	bl	800174c <MCAN_u8FIFOMailboxNumber>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80bb 	beq.w	800195e <MCAN_stderrorReceive+0x1b2>
			{
				/*GET IDE*/
				ARG_pudtFrame->udtID_Type=(1&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RIR)>>2));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	011a      	lsls	r2, r3, #4
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 80017f0:	4413      	add	r3, r2
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	721a      	strb	r2, [r3, #8]
				
				/*GET MSG ID*/
				if(ARG_pudtFrame->udtID_Type ==ID_STD)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7a1b      	ldrb	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10b      	bne.n	8001822 <MCAN_stderrorReceive+0x76>
				{
					ARG_pudtFrame->u32Msg_Id=((STIDMSG_FLAG)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RIR)>>21));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	011a      	lsls	r2, r3, #4
 8001810:	4b5a      	ldr	r3, [pc, #360]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	0d5b      	lsrs	r3, r3, #21
 8001818:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	e00a      	b.n	8001838 <MCAN_stderrorReceive+0x8c>
				}
				else
				{
					ARG_pudtFrame->u32Msg_Id=((EXIDMSG_FLAG)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RIR)>>3));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	011a      	lsls	r2, r3, #4
 8001828:	4b54      	ldr	r3, [pc, #336]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 800182a:	4413      	add	r3, r2
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	f023 0207 	bic.w	r2, r3, #7
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]
				}
				/*GET RTR*/
				ARG_pudtFrame->udtRTR_Type=((2)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RIR)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	011a      	lsls	r2, r3, #4
 800183e:	4b4f      	ldr	r3, [pc, #316]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 8001840:	4413      	add	r3, r2
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	b2da      	uxtb	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	725a      	strb	r2, [r3, #9]
				
				/*GET DLC*/
				ARG_pudtFrame->udtDLC_Type=((15)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDTR)));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	011a      	lsls	r2, r3, #4
 8001856:	4b49      	ldr	r3, [pc, #292]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 8001858:	4413      	add	r3, r2
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	b2da      	uxtb	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	729a      	strb	r2, [r3, #10]
				
				/*Get filter match index*/
				ARG_pudtFrame->u32FILTER_MATCH_INDEX=((0xFF)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDTR)>>8));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	011a      	lsls	r2, r3, #4
 800186e:	4b43      	ldr	r3, [pc, #268]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 8001870:	4413      	add	r3, r2
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	b2da      	uxtb	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	60da      	str	r2, [r3, #12]
				
				/*get data*/
				ARG_pudtFrame->pu8Payload[0] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDLR >> 0));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	011a      	lsls	r2, r3, #4
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 8001884:	4413      	add	r3, r2
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[1] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDLR >> 8));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	011a      	lsls	r2, r3, #4
 8001896:	4b39      	ldr	r3, [pc, #228]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 8001898:	4413      	add	r3, r2
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	0a1a      	lsrs	r2, r3, #8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[2] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDLR >> 16));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	011a      	lsls	r2, r3, #4
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 80018b0:	4413      	add	r3, r2
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	0c1a      	lsrs	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	3302      	adds	r3, #2
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[3] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDLR >> 24));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	011a      	lsls	r2, r3, #4
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 80018c8:	4413      	add	r3, r2
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	0e1a      	lsrs	r2, r3, #24
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	3303      	adds	r3, #3
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
				
				ARG_pudtFrame->pu8Payload[4] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDHR >> 0));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	011a      	lsls	r2, r3, #4
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 80018e0:	4413      	add	r3, r2
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	3304      	adds	r3, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[5] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDHR >> 8));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	011a      	lsls	r2, r3, #4
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 80018f6:	4413      	add	r3, r2
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	0a1a      	lsrs	r2, r3, #8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	3305      	adds	r3, #5
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[6] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDHR >> 16));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	011a      	lsls	r2, r3, #4
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 800190e:	4413      	add	r3, r2
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	0c1a      	lsrs	r2, r3, #16
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	3306      	adds	r3, #6
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[7] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDHR >> 24));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	011a      	lsls	r2, r3, #4
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <MCAN_stderrorReceive+0x1d0>)
 8001926:	4413      	add	r3, r2
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	0e1a      	lsrs	r2, r3, #24
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	3307      	adds	r3, #7
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

				/*Release fifo*/
				if (ARG_pudtFrame->udtSET_FILTER_FIFO == FILTER_FIFO0) 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <MCAN_stderrorReceive+0x1a0>
				{
				  CAN_RF0R|=(1<<RFOM0);
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MCAN_stderrorReceive+0x1d4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <MCAN_stderrorReceive+0x1d4>)
 8001944:	f043 0320 	orr.w	r3, r3, #32
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e005      	b.n	8001958 <MCAN_stderrorReceive+0x1ac>
				}
				else 
				{
				  
				  CAN_RF1R|=(1<<RFOM0);
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <MCAN_stderrorReceive+0x1d8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <MCAN_stderrorReceive+0x1d8>)
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	6013      	str	r3, [r2, #0]
				}
				
				L_stderrorError=E_OK;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
			if(MCAN_u8FIFOMailboxNumber(ARG_pudtFrame->udtSET_FILTER_FIFO)!=0)
 800195c:	e007      	b.n	800196e <MCAN_stderrorReceive+0x1c2>
				
			}
			else
			{
				L_stderrorError=E_NOK;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
			if(MCAN_u8FIFOMailboxNumber(ARG_pudtFrame->udtSET_FILTER_FIFO)!=0)
 8001962:	e004      	b.n	800196e <MCAN_stderrorReceive+0x1c2>
			}
		}
		else
		{
			L_stderrorError=E_NOK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e001      	b.n	800196e <MCAN_stderrorReceive+0x1c2>
		}
		
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 800196a:	2302      	movs	r3, #2
 800196c:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 800196e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000024 	.word	0x20000024
 800197c:	400065b0 	.word	0x400065b0
 8001980:	4000640c 	.word	0x4000640c
 8001984:	40006410 	.word	0x40006410

08001988 <MCAN_stderrorEnableInterrupt>:

STD_error_t MCAN_stderrorEnableInterrupt
(
	MCAN_interrupt_t  ARG_pudtFrame
)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]

	if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MCAN_stderrorEnableInterrupt+0x58>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d004      	beq.n	80019aa <MCAN_stderrorEnableInterrupt+0x22>
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MCAN_stderrorEnableInterrupt+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d112      	bne.n	80019d0 <MCAN_stderrorEnableInterrupt+0x48>
	{

		if((ARG_pudtFrame <=17))
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b11      	cmp	r3, #17
 80019ae:	d80c      	bhi.n	80019ca <MCAN_stderrorEnableInterrupt+0x42>
		{
			CAN_IER|=(1<<ARG_pudtFrame);
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MCAN_stderrorEnableInterrupt+0x5c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	4611      	mov	r1, r2
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <MCAN_stderrorEnableInterrupt+0x5c>)
 80019c0:	430b      	orrs	r3, r1
 80019c2:	6013      	str	r3, [r2, #0]
			L_stderrorError=E_OK;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
		if((ARG_pudtFrame <=17))
 80019c8:	e004      	b.n	80019d4 <MCAN_stderrorEnableInterrupt+0x4c>
		}
		else
		{
			L_stderrorError=E_NOK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
		if((ARG_pudtFrame <=17))
 80019ce:	e001      	b.n	80019d4 <MCAN_stderrorEnableInterrupt+0x4c>
		}

	}
	else
	{
		L_stderrorError=E_NOK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
	}

	return L_stderrorError;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000024 	.word	0x20000024
 80019e4:	40006414 	.word	0x40006414

080019e8 <MCAN_stderrorSetCallBackFIFO0>:

STD_error_t MCAN_stderrorSetCallBackFIFO0
(
	void (*ARG_pvoidfUserFunction)(void)
)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
	if(NULL_POINTER!=ARG_pvoidfUserFunction)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <MCAN_stderrorSetCallBackFIFO0+0x1e>
	{
		pvoidfUserFunctionFIFO0=ARG_pvoidfUserFunction;
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <MCAN_stderrorSetCallBackFIFO0+0x30>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6013      	str	r3, [r2, #0]
		L_stderrorError=E_NOK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <MCAN_stderrorSetCallBackFIFO0+0x22>
	}
	else
	{
		L_stderrorError = E_NULL_POINTER;
 8001a06:	2302      	movs	r3, #2
 8001a08:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000028 	.word	0x20000028

08001a1c <MEXTI_stderrorTriggerMode>:
STD_error_t MEXTI_stderrorTriggerMode
(
	MEXTI_Line_t ARG_udtEXTILine,
	MEXTI_ModeTrigger_t ARG_udtEXTIMode
)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	71bb      	strb	r3, [r7, #6]
	STD_error_t L_stderrorError=E_NOK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
	
	if((ARG_udtEXTILine<=15)&&(ARG_udtEXTIMode<=2))
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	d83b      	bhi.n	8001aae <MEXTI_stderrorTriggerMode+0x92>
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d838      	bhi.n	8001aae <MEXTI_stderrorTriggerMode+0x92>
	{
		
		switch(ARG_udtEXTIMode)
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d01c      	beq.n	8001a7c <MEXTI_stderrorTriggerMode+0x60>
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	dc2f      	bgt.n	8001aa6 <MEXTI_stderrorTriggerMode+0x8a>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <MEXTI_stderrorTriggerMode+0x34>
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d00b      	beq.n	8001a66 <MEXTI_stderrorTriggerMode+0x4a>
				break;
			}
			default:
			{
				/*Nothing*/
				break;
 8001a4e:	e02a      	b.n	8001aa6 <MEXTI_stderrorTriggerMode+0x8a>
				EXTI->RTSR |= (1<<ARG_udtEXTILine);;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <MEXTI_stderrorTriggerMode+0xa4>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <MEXTI_stderrorTriggerMode+0xa4>)
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6093      	str	r3, [r2, #8]
				break;
 8001a64:	e020      	b.n	8001aa8 <MEXTI_stderrorTriggerMode+0x8c>
				EXTI->FTSR |= (1<<ARG_udtEXTILine);;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MEXTI_stderrorTriggerMode+0xa4>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	4611      	mov	r1, r2
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <MEXTI_stderrorTriggerMode+0xa4>)
 8001a76:	430b      	orrs	r3, r1
 8001a78:	60d3      	str	r3, [r2, #12]
				break;
 8001a7a:	e015      	b.n	8001aa8 <MEXTI_stderrorTriggerMode+0x8c>
				EXTI->RTSR |=(1<<ARG_udtEXTILine);;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MEXTI_stderrorTriggerMode+0xa4>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	2101      	movs	r1, #1
 8001a84:	fa01 f202 	lsl.w	r2, r1, r2
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <MEXTI_stderrorTriggerMode+0xa4>)
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6093      	str	r3, [r2, #8]
				EXTI->FTSR |=(1<<ARG_udtEXTILine);;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MEXTI_stderrorTriggerMode+0xa4>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	79fa      	ldrb	r2, [r7, #7]
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <MEXTI_stderrorTriggerMode+0xa4>)
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	60d3      	str	r3, [r2, #12]
				break;
 8001aa4:	e000      	b.n	8001aa8 <MEXTI_stderrorTriggerMode+0x8c>
				break;
 8001aa6:	bf00      	nop
			}
		}
		
		L_stderrorError=E_OK;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e001      	b.n	8001ab2 <MEXTI_stderrorTriggerMode+0x96>
	}
	else
	{
		L_stderrorError=E_NOK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <MEXTI_VoidEnableEXTI>:

void MEXTI_VoidEnableEXTI
( 
	MEXTI_Line_t ARG_udtEXTILine
)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	EXTI->IMR |=(1<<ARG_udtEXTILine);
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MEXTI_VoidEnableEXTI+0x28>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4611      	mov	r1, r2
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <MEXTI_VoidEnableEXTI+0x28>)
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6013      	str	r3, [r2, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40010400 	.word	0x40010400

08001af0 <MEXTI_VoidSetCallBack>:

STD_error_t MEXTI_VoidSetCallBack
( 
	void (*ARG_pvoidfUserFunction) (MEXTI_Line_t ARG_udtEXTILine) 
)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
	
	if(NULL_POINTER!=ARG_pvoidfUserFunction)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <MEXTI_VoidSetCallBack+0x1e>
	{
		MEXTI_pvoidfCallBack = ARG_pvoidfUserFunction;
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <MEXTI_VoidSetCallBack+0x30>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6013      	str	r3, [r2, #0]
		L_stderrorError=E_OK;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e001      	b.n	8001b12 <MEXTI_VoidSetCallBack+0x22>
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	2000002c 	.word	0x2000002c

08001b24 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	MEXTI_pvoidfCallBack(EXTI_LINE2);
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <EXTI2_IRQHandler+0x1c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	4798      	blx	r3
	
	EXTI->PR |=(1<<EXTI_LINE2);
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <EXTI2_IRQHandler+0x20>)
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <EXTI2_IRQHandler+0x20>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6153      	str	r3, [r2, #20]
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000002c 	.word	0x2000002c
 8001b44:	40010400 	.word	0x40010400

08001b48 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	MEXTI_pvoidfCallBack(EXTI_LINE3);
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <EXTI3_IRQHandler+0x1c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2003      	movs	r0, #3
 8001b52:	4798      	blx	r3
	EXTI->PR |=(1<<EXTI_LINE3);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <EXTI3_IRQHandler+0x20>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <EXTI3_IRQHandler+0x20>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6153      	str	r3, [r2, #20]
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000002c 	.word	0x2000002c
 8001b68:	40010400 	.word	0x40010400

08001b6c <MGPIO_stderrorPinModeSelect>:
(
	MGPIO_Port_Name_t ARG_udtGPIOPort, 
	MGPIO_Pin_Number_t ARG_udtGPIOPin,
	MGPIO_Pin_Mode_t ARG_udtGPIOMode
)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	460b      	mov	r3, r1
 8001b78:	71bb      	strb	r3, [r7, #6]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	717b      	strb	r3, [r7, #5]
	
	STD_error_t L_stderrorError=E_NOK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtGPIOPort <= 4 && ARG_udtGPIOPin <= 15 && ARG_udtGPIOMode <= 15)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	f200 812e 	bhi.w	8001de6 <MGPIO_stderrorPinModeSelect+0x27a>
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	f200 812a 	bhi.w	8001de6 <MGPIO_stderrorPinModeSelect+0x27a>
 8001b92:	797b      	ldrb	r3, [r7, #5]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	f200 8126 	bhi.w	8001de6 <MGPIO_stderrorPinModeSelect+0x27a>
	{
		
		switch(ARG_udtGPIOPort)
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	f200 8120 	bhi.w	8001de2 <MGPIO_stderrorPinModeSelect+0x276>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <MGPIO_stderrorPinModeSelect+0x3c>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001bbd 	.word	0x08001bbd
 8001bac:	08001c2b 	.word	0x08001c2b
 8001bb0:	08001c99 	.word	0x08001c99
 8001bb4:	08001d07 	.word	0x08001d07
 8001bb8:	08001d75 	.word	0x08001d75
		{
			case GPIOA:
			{
				
				if(ARG_udtGPIOPin<=7)
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d816      	bhi.n	8001bf0 <MGPIO_stderrorPinModeSelect+0x84>
				{
					GPIOA_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8001bc2:	4b8d      	ldr	r3, [pc, #564]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	210f      	movs	r1, #15
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4989      	ldr	r1, [pc, #548]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
					GPIOA_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8001bd8:	4b87      	ldr	r3, [pc, #540]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	7979      	ldrb	r1, [r7, #5]
 8001bde:	79ba      	ldrb	r2, [r7, #6]
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	4611      	mov	r1, r2
 8001be8:	4a83      	ldr	r2, [pc, #524]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001bea:	430b      	orrs	r3, r1
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e019      	b.n	8001c24 <MGPIO_stderrorPinModeSelect+0xb8>
				}
				else
				{
					GPIOA_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8001bf0:	4b82      	ldr	r3, [pc, #520]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	79bb      	ldrb	r3, [r7, #6]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	210f      	movs	r1, #15
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	497d      	ldr	r1, [pc, #500]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
					GPIOA_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8001c0a:	4b7c      	ldr	r3, [pc, #496]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	7979      	ldrb	r1, [r7, #5]
 8001c10:	79ba      	ldrb	r2, [r7, #6]
 8001c12:	f002 0207 	and.w	r2, r2, #7
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4a77      	ldr	r2, [pc, #476]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
				break;
 8001c28:	e0dc      	b.n	8001de4 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOB:
			{
				if(ARG_udtGPIOPin<=7)
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	2b07      	cmp	r3, #7
 8001c2e:	d816      	bhi.n	8001c5e <MGPIO_stderrorPinModeSelect+0xf2>
				{
					GPIOB_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8001c30:	4b71      	ldr	r3, [pc, #452]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	79bb      	ldrb	r3, [r7, #6]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	210f      	movs	r1, #15
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	496d      	ldr	r1, [pc, #436]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
					GPIOB_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8001c46:	4b6c      	ldr	r3, [pc, #432]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	7979      	ldrb	r1, [r7, #5]
 8001c4c:	79ba      	ldrb	r2, [r7, #6]
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	4611      	mov	r1, r2
 8001c56:	4a68      	ldr	r2, [pc, #416]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e019      	b.n	8001c92 <MGPIO_stderrorPinModeSelect+0x126>
				}
				else
				{
					GPIOB_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	79bb      	ldrb	r3, [r7, #6]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4962      	ldr	r1, [pc, #392]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
					GPIOB_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8001c78:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	7979      	ldrb	r1, [r7, #5]
 8001c7e:	79ba      	ldrb	r2, [r7, #6]
 8001c80:	f002 0207 	and.w	r2, r2, #7
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4a5b      	ldr	r2, [pc, #364]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
				break;
 8001c96:	e0a5      	b.n	8001de4 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOC:
			{
				if(ARG_udtGPIOPin<=7)
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d816      	bhi.n	8001ccc <MGPIO_stderrorPinModeSelect+0x160>
				{
					GPIOC_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8001c9e:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4952      	ldr	r1, [pc, #328]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
					GPIOC_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	7979      	ldrb	r1, [r7, #5]
 8001cba:	79ba      	ldrb	r2, [r7, #6]
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4a4c      	ldr	r2, [pc, #304]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e019      	b.n	8001d00 <MGPIO_stderrorPinModeSelect+0x194>
				}
				else
				{
					GPIOC_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	79bb      	ldrb	r3, [r7, #6]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	210f      	movs	r1, #15
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	4946      	ldr	r1, [pc, #280]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
					GPIOC_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8001ce6:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	7979      	ldrb	r1, [r7, #5]
 8001cec:	79ba      	ldrb	r2, [r7, #6]
 8001cee:	f002 0207 	and.w	r2, r2, #7
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4a40      	ldr	r2, [pc, #256]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
				break;
 8001d04:	e06e      	b.n	8001de4 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOD:
			{
				if(ARG_udtGPIOPin<=7)
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	2b07      	cmp	r3, #7
 8001d0a:	d816      	bhi.n	8001d3a <MGPIO_stderrorPinModeSelect+0x1ce>
				{
					GPIOD_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	210f      	movs	r1, #15
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4936      	ldr	r1, [pc, #216]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
					GPIOD_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8001d22:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	7979      	ldrb	r1, [r7, #5]
 8001d28:	79ba      	ldrb	r2, [r7, #6]
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	4611      	mov	r1, r2
 8001d32:	4a31      	ldr	r2, [pc, #196]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e019      	b.n	8001d6e <MGPIO_stderrorPinModeSelect+0x202>
				}
				else
				{
					GPIOD_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	210f      	movs	r1, #15
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	492b      	ldr	r1, [pc, #172]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
					GPIOD_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8001d54:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	7979      	ldrb	r1, [r7, #5]
 8001d5a:	79ba      	ldrb	r2, [r7, #6]
 8001d5c:	f002 0207 	and.w	r2, r2, #7
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	4611      	mov	r1, r2
 8001d68:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
				break;
 8001d72:	e037      	b.n	8001de4 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOE:
			{
				if(ARG_udtGPIOPin<=7)
 8001d74:	79bb      	ldrb	r3, [r7, #6]
 8001d76:	2b07      	cmp	r3, #7
 8001d78:	d816      	bhi.n	8001da8 <MGPIO_stderrorPinModeSelect+0x23c>
				{
					GPIOE_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	79bb      	ldrb	r3, [r7, #6]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	210f      	movs	r1, #15
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	491b      	ldr	r1, [pc, #108]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
					GPIOE_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	7979      	ldrb	r1, [r7, #5]
 8001d96:	79ba      	ldrb	r2, [r7, #6]
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <MGPIO_stderrorPinModeSelect+0x28c>)
 8001da2:	430b      	orrs	r3, r1
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e019      	b.n	8001ddc <MGPIO_stderrorPinModeSelect+0x270>
				}
				else
				{
					GPIOE_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	210f      	movs	r1, #15
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	490f      	ldr	r1, [pc, #60]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
					GPIOE_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	7979      	ldrb	r1, [r7, #5]
 8001dc8:	79ba      	ldrb	r2, [r7, #6]
 8001dca:	f002 0207 	and.w	r2, r2, #7
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <MGPIO_stderrorPinModeSelect+0x290>)
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
				break;
 8001de0:	e000      	b.n	8001de4 <MGPIO_stderrorPinModeSelect+0x278>
			}
			default :
			{
				/*nothing*/
				break;
 8001de2:	bf00      	nop
		switch(ARG_udtGPIOPort)
 8001de4:	e001      	b.n	8001dea <MGPIO_stderrorPinModeSelect+0x27e>
			}
		}
	}
	else
	{
		L_stderrorError=E_NOK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	40010804 	.word	0x40010804

08001e00 <MGPIO_stderrorGetPinValue>:
(
	MGPIO_Port_Name_t ARG_udtGPIOPort, 
	MGPIO_Pin_Number_t ARG_udtGPIOPin, 
	u8* ARG_pu8Value
)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	603a      	str	r2, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	71bb      	strb	r3, [r7, #6]
	STD_error_t L_stderrorError=E_NOK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pu8Value != NULL_POINTER )
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d061      	beq.n	8001ede <MGPIO_stderrorGetPinValue+0xde>
	{
		
		if(ARG_udtGPIOPort <= 4 && ARG_udtGPIOPin <= 15 )
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d85b      	bhi.n	8001ed8 <MGPIO_stderrorGetPinValue+0xd8>
 8001e20:	79bb      	ldrb	r3, [r7, #6]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	d858      	bhi.n	8001ed8 <MGPIO_stderrorGetPinValue+0xd8>
		{
		
			switch(ARG_udtGPIOPort)
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d853      	bhi.n	8001ed4 <MGPIO_stderrorGetPinValue+0xd4>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <MGPIO_stderrorGetPinValue+0x34>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001e49 	.word	0x08001e49
 8001e38:	08001e65 	.word	0x08001e65
 8001e3c:	08001e81 	.word	0x08001e81
 8001e40:	08001e9d 	.word	0x08001e9d
 8001e44:	08001eb9 	.word	0x08001eb9
			{
				case GPIOA:
				{
					*ARG_pu8Value =((GPIOA_IDR>>ARG_udtGPIOPin)&1U);
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <MGPIO_stderrorGetPinValue+0xf0>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	701a      	strb	r2, [r3, #0]
					L_stderrorError=E_OK;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
					break;
 8001e62:	e038      	b.n	8001ed6 <MGPIO_stderrorGetPinValue+0xd6>
				}
				case GPIOB:
				{
					*ARG_pu8Value =((GPIOB_IDR>>ARG_udtGPIOPin)&1U);
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <MGPIO_stderrorGetPinValue+0xf0>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	701a      	strb	r2, [r3, #0]
					L_stderrorError=E_OK;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
					break;
 8001e7e:	e02a      	b.n	8001ed6 <MGPIO_stderrorGetPinValue+0xd6>
				}
				case GPIOC:
				{
					*ARG_pu8Value =((GPIOC_IDR>>ARG_udtGPIOPin)&1U);
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <MGPIO_stderrorGetPinValue+0xf0>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	701a      	strb	r2, [r3, #0]
					L_stderrorError=E_OK;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
					break;
 8001e9a:	e01c      	b.n	8001ed6 <MGPIO_stderrorGetPinValue+0xd6>
				}
				case GPIOD:
				{
					*ARG_pu8Value =((GPIOD_IDR>>ARG_udtGPIOPin)&1U);
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MGPIO_stderrorGetPinValue+0xf0>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	701a      	strb	r2, [r3, #0]
					L_stderrorError=E_OK;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
					break;
 8001eb6:	e00e      	b.n	8001ed6 <MGPIO_stderrorGetPinValue+0xd6>
				}
				case GPIOE:
				{
					*ARG_pu8Value =((GPIOE_IDR>>ARG_udtGPIOPin)&1U);
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <MGPIO_stderrorGetPinValue+0xf0>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	701a      	strb	r2, [r3, #0]
					L_stderrorError=E_OK;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
					break;
 8001ed2:	e000      	b.n	8001ed6 <MGPIO_stderrorGetPinValue+0xd6>
				}
				default :
				{
					/*nothing*/
					break;
 8001ed4:	bf00      	nop
			switch(ARG_udtGPIOPort)
 8001ed6:	e004      	b.n	8001ee2 <MGPIO_stderrorGetPinValue+0xe2>
				
			}
		}
		else
		{
			L_stderrorError=E_NOK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e001      	b.n	8001ee2 <MGPIO_stderrorGetPinValue+0xe2>
		}
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40010808 	.word	0x40010808

08001ef4 <MGPIO_stderrorSetPinValueBSSR>:
(
	MGPIO_Port_Name_t ARG_udtGPIOPort, 
	MGPIO_Pin_Number_t ARG_udtGPIOPin, 
	MGPIO_Output_State_t ARG_udtValue
)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
 8001efe:	460b      	mov	r3, r1
 8001f00:	71bb      	strb	r3, [r7, #6]
 8001f02:	4613      	mov	r3, r2
 8001f04:	717b      	strb	r3, [r7, #5]
	
	STD_error_t L_stderrorError=E_NOK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtGPIOPort <= 7 && ARG_udtGPIOPin <= 15 && ARG_udtValue <= 1)
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b07      	cmp	r3, #7
 8001f0e:	f200 80b8 	bhi.w	8002082 <MGPIO_stderrorSetPinValueBSSR+0x18e>
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	f200 80b4 	bhi.w	8002082 <MGPIO_stderrorSetPinValueBSSR+0x18e>
 8001f1a:	797b      	ldrb	r3, [r7, #5]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f200 80b0 	bhi.w	8002082 <MGPIO_stderrorSetPinValueBSSR+0x18e>
	{
		
		if(ARG_udtValue==LOW)
 8001f22:	797b      	ldrb	r3, [r7, #5]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d157      	bne.n	8001fd8 <MGPIO_stderrorSetPinValueBSSR+0xe4>
		{
			
			switch(ARG_udtGPIOPort)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	f200 80a5 	bhi.w	800207a <MGPIO_stderrorSetPinValueBSSR+0x186>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <MGPIO_stderrorSetPinValueBSSR+0x44>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f4d 	.word	0x08001f4d
 8001f3c:	08001f69 	.word	0x08001f69
 8001f40:	08001f85 	.word	0x08001f85
 8001f44:	08001fa1 	.word	0x08001fa1
 8001f48:	08001fbd 	.word	0x08001fbd
			{
				case GPIOA:
				{
					GPIOA_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8001f4c:	4b51      	ldr	r3, [pc, #324]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	79ba      	ldrb	r2, [r7, #6]
 8001f52:	3210      	adds	r2, #16
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4a4d      	ldr	r2, [pc, #308]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
					break;
 8001f66:	e08b      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOB:
				{
					GPIOB_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8001f68:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	79ba      	ldrb	r2, [r7, #6]
 8001f6e:	3210      	adds	r2, #16
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	4611      	mov	r1, r2
 8001f78:	4a46      	ldr	r2, [pc, #280]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
					break;
 8001f82:	e07d      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOC:
				{
					GPIOC_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	79ba      	ldrb	r2, [r7, #6]
 8001f8a:	3210      	adds	r2, #16
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	4611      	mov	r1, r2
 8001f94:	4a3f      	ldr	r2, [pc, #252]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001f96:	430b      	orrs	r3, r1
 8001f98:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
					break;
 8001f9e:	e06f      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOD:
				{
					GPIOD_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8001fa0:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	79ba      	ldrb	r2, [r7, #6]
 8001fa6:	3210      	adds	r2, #16
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4a38      	ldr	r2, [pc, #224]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
					break;
 8001fba:	e061      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOE:
				{
					GPIOE_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	79ba      	ldrb	r2, [r7, #6]
 8001fc2:	3210      	adds	r2, #16
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4a31      	ldr	r2, [pc, #196]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
					break;
 8001fd6:	e053      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
			}
			
		}
		else
		{
			switch(ARG_udtGPIOPort)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d84f      	bhi.n	800207e <MGPIO_stderrorSetPinValueBSSR+0x18a>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <MGPIO_stderrorSetPinValueBSSR+0xf0>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ff9 	.word	0x08001ff9
 8001fe8:	08002013 	.word	0x08002013
 8001fec:	0800202d 	.word	0x0800202d
 8001ff0:	08002047 	.word	0x08002047
 8001ff4:	08002061 	.word	0x08002061
			{
				case GPIOA:
				{
					GPIOA_BSRR |=(1<<(ARG_udtGPIOPin));
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	79ba      	ldrb	r2, [r7, #6]
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f202 	lsl.w	r2, r1, r2
 8002004:	4611      	mov	r1, r2
 8002006:	4a23      	ldr	r2, [pc, #140]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8002008:	430b      	orrs	r3, r1
 800200a:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
					break;
 8002010:	e036      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOB:
				{
					GPIOB_BSRR |=(1<<(ARG_udtGPIOPin));
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	79ba      	ldrb	r2, [r7, #6]
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4611      	mov	r1, r2
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8002022:	430b      	orrs	r3, r1
 8002024:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
					break;
 800202a:	e029      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOC:
				{
					GPIOC_BSRR |=(1<<(ARG_udtGPIOPin));
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	79ba      	ldrb	r2, [r7, #6]
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	4611      	mov	r1, r2
 800203a:	4a16      	ldr	r2, [pc, #88]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 800203c:	430b      	orrs	r3, r1
 800203e:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
					break;
 8002044:	e01c      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOD:
				{
					GPIOD_BSRR |=(1<<(ARG_udtGPIOPin));
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	79ba      	ldrb	r2, [r7, #6]
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	4611      	mov	r1, r2
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8002056:	430b      	orrs	r3, r1
 8002058:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
					break;
 800205e:	e00f      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOE:
				{
					GPIOE_BSRR |=(1<<(ARG_udtGPIOPin));
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4611      	mov	r1, r2
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8002070:	430b      	orrs	r3, r1
 8002072:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
					break;
 8002078:	e002      	b.n	8002080 <MGPIO_stderrorSetPinValueBSSR+0x18c>
					break;
 800207a:	bf00      	nop
 800207c:	e003      	b.n	8002086 <MGPIO_stderrorSetPinValueBSSR+0x192>
				}
				default :
				{
					/*nothing*/
					break;
 800207e:	bf00      	nop
		if(ARG_udtValue==LOW)
 8002080:	e001      	b.n	8002086 <MGPIO_stderrorSetPinValueBSSR+0x192>
		}
		
	}
	else
	{
		L_stderrorError=E_NOK;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40010810 	.word	0x40010810

08002098 <MGPIO_stderrorSetPinPull_Up_Down>:
(
	MGPIO_Port_Name_t ARG_udtGPIOPort, 
	MGPIO_Pin_Number_t ARG_udtGPIOPin, 
	MGPIO_Pull_t ARG_udtPullType
)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
 80020a2:	460b      	mov	r3, r1
 80020a4:	71bb      	strb	r3, [r7, #6]
 80020a6:	4613      	mov	r3, r2
 80020a8:	717b      	strb	r3, [r7, #5]
	
	STD_error_t L_stderrorError=E_NOK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtGPIOPort <= 4 && ARG_udtGPIOPin <= 15 && ARG_udtPullType <= 1)
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	f200 8093 	bhi.w	80021dc <MGPIO_stderrorSetPinPull_Up_Down+0x144>
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	f200 808f 	bhi.w	80021dc <MGPIO_stderrorSetPinPull_Up_Down+0x144>
 80020be:	797b      	ldrb	r3, [r7, #5]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	f200 808b 	bhi.w	80021dc <MGPIO_stderrorSetPinPull_Up_Down+0x144>
	{
		switch(ARG_udtGPIOPort)
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	f200 8085 	bhi.w	80021d8 <MGPIO_stderrorSetPinPull_Up_Down+0x140>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <MGPIO_stderrorSetPinPull_Up_Down+0x3c>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e9 	.word	0x080020e9
 80020d8:	08002119 	.word	0x08002119
 80020dc:	08002149 	.word	0x08002149
 80020e0:	08002179 	.word	0x08002179
 80020e4:	080021a9 	.word	0x080021a9
		{
			case GPIOA:
			{
				GPIOA_ODR =(GPIOA_ODR&(~(1<<(ARG_udtGPIOPin))));
 80020e8:	4b40      	ldr	r3, [pc, #256]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	79ba      	ldrb	r2, [r7, #6]
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	43d2      	mvns	r2, r2
 80020f6:	4611      	mov	r1, r2
 80020f8:	4a3c      	ldr	r2, [pc, #240]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 80020fa:	400b      	ands	r3, r1
 80020fc:	6013      	str	r3, [r2, #0]
				GPIOA_ODR|=(ARG_udtPullType<<(ARG_udtGPIOPin));
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	7979      	ldrb	r1, [r7, #5]
 8002104:	79ba      	ldrb	r2, [r7, #6]
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	4611      	mov	r1, r2
 800210c:	4a37      	ldr	r2, [pc, #220]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800210e:	430b      	orrs	r3, r1
 8002110:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
				break;
 8002116:	e060      	b.n	80021da <MGPIO_stderrorSetPinPull_Up_Down+0x142>
			}
			case GPIOB:
			{
				GPIOB_ODR =(GPIOB_ODR&(~(1<<(ARG_udtGPIOPin))));
 8002118:	4b34      	ldr	r3, [pc, #208]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	79ba      	ldrb	r2, [r7, #6]
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	43d2      	mvns	r2, r2
 8002126:	4611      	mov	r1, r2
 8002128:	4a30      	ldr	r2, [pc, #192]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800212a:	400b      	ands	r3, r1
 800212c:	6013      	str	r3, [r2, #0]
				GPIOB_ODR|=(ARG_udtPullType<<(ARG_udtGPIOPin));
 800212e:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	7979      	ldrb	r1, [r7, #5]
 8002134:	79ba      	ldrb	r2, [r7, #6]
 8002136:	fa01 f202 	lsl.w	r2, r1, r2
 800213a:	4611      	mov	r1, r2
 800213c:	4a2b      	ldr	r2, [pc, #172]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800213e:	430b      	orrs	r3, r1
 8002140:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
				break;
 8002146:	e048      	b.n	80021da <MGPIO_stderrorSetPinPull_Up_Down+0x142>
			}
			case GPIOC:
			{
				GPIOC_ODR =(GPIOC_ODR&(~(1<<(ARG_udtGPIOPin))));
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	79ba      	ldrb	r2, [r7, #6]
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	43d2      	mvns	r2, r2
 8002156:	4611      	mov	r1, r2
 8002158:	4a24      	ldr	r2, [pc, #144]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800215a:	400b      	ands	r3, r1
 800215c:	6013      	str	r3, [r2, #0]
				GPIOC_ODR|=(ARG_udtPullType<<(ARG_udtGPIOPin));
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	7979      	ldrb	r1, [r7, #5]
 8002164:	79ba      	ldrb	r2, [r7, #6]
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	4611      	mov	r1, r2
 800216c:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800216e:	430b      	orrs	r3, r1
 8002170:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
				break;
 8002176:	e030      	b.n	80021da <MGPIO_stderrorSetPinPull_Up_Down+0x142>
			}
			case GPIOD:
			{
				GPIOD_ODR =(GPIOD_ODR&(~(1<<(ARG_udtGPIOPin))));
 8002178:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	79ba      	ldrb	r2, [r7, #6]
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	43d2      	mvns	r2, r2
 8002186:	4611      	mov	r1, r2
 8002188:	4a18      	ldr	r2, [pc, #96]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800218a:	400b      	ands	r3, r1
 800218c:	6013      	str	r3, [r2, #0]
				GPIOD_ODR|=(ARG_udtPullType<<(ARG_udtGPIOPin));
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	7979      	ldrb	r1, [r7, #5]
 8002194:	79ba      	ldrb	r2, [r7, #6]
 8002196:	fa01 f202 	lsl.w	r2, r1, r2
 800219a:	4611      	mov	r1, r2
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 800219e:	430b      	orrs	r3, r1
 80021a0:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
				break;
 80021a6:	e018      	b.n	80021da <MGPIO_stderrorSetPinPull_Up_Down+0x142>
			}
			case GPIOE:
			{
				GPIOE_ODR =(GPIOE_ODR&(~(1<<(ARG_udtGPIOPin))));
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	79ba      	ldrb	r2, [r7, #6]
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	43d2      	mvns	r2, r2
 80021b6:	4611      	mov	r1, r2
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 80021ba:	400b      	ands	r3, r1
 80021bc:	6013      	str	r3, [r2, #0]
				GPIOE_ODR|=(ARG_udtPullType<<(ARG_udtGPIOPin));
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	7979      	ldrb	r1, [r7, #5]
 80021c4:	79ba      	ldrb	r2, [r7, #6]
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	4611      	mov	r1, r2
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <MGPIO_stderrorSetPinPull_Up_Down+0x154>)
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6013      	str	r3, [r2, #0]
				L_stderrorError=E_OK;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
				break;
 80021d6:	e000      	b.n	80021da <MGPIO_stderrorSetPinPull_Up_Down+0x142>
			}
			default :
			{
				/*nothing*/
				break;
 80021d8:	bf00      	nop
		switch(ARG_udtGPIOPort)
 80021da:	e001      	b.n	80021e0 <MGPIO_stderrorSetPinPull_Up_Down+0x148>
			}
		}
	}
	else
	{
		L_stderrorError=E_NOK;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
	
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	4001080c 	.word	0x4001080c

080021f0 <MGPIO_stderrorSerialWireJTAGConfiguration>:

STD_error_t MGPIO_stderrorSerialWireJTAGConfiguration
(
	MGPIO_JTAG_Configuration_t ARG_udtJTAGConfiguration
)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]

	if((ARG_udtJTAGConfiguration<=2)||(ARG_udtJTAGConfiguration==4))
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d902      	bls.n	800220a <MGPIO_stderrorSerialWireJTAGConfiguration+0x1a>
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b04      	cmp	r3, #4
 8002208:	d110      	bne.n	800222c <MGPIO_stderrorSerialWireJTAGConfiguration+0x3c>
	{
		/*Serial wire JTAG configuration*/
		AFIO_MAPR&=(~(SWJ_CFG_FLAG<<SWJ_CFG));
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MGPIO_stderrorSerialWireJTAGConfiguration+0x4c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <MGPIO_stderrorSerialWireJTAGConfiguration+0x4c>)
 8002210:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002214:	6013      	str	r3, [r2, #0]
		AFIO_MAPR|=(ARG_udtJTAGConfiguration<<SWJ_CFG);
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MGPIO_stderrorSerialWireJTAGConfiguration+0x4c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	79fa      	ldrb	r2, [r7, #7]
 800221c:	0612      	lsls	r2, r2, #24
 800221e:	4611      	mov	r1, r2
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <MGPIO_stderrorSerialWireJTAGConfiguration+0x4c>)
 8002222:	430b      	orrs	r3, r1
 8002224:	6013      	str	r3, [r2, #0]

		L_stderrorError=E_OK;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e001      	b.n	8002230 <MGPIO_stderrorSerialWireJTAGConfiguration+0x40>

	}
	else
	{

		L_stderrorError=E_NOK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]

	}

	return L_stderrorError;
 8002230:	7bfb      	ldrb	r3, [r7, #15]

}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40010004 	.word	0x40010004

08002240 <MNVIC_stderrorEnableIRQ>:

STD_error_t MNVIC_stderrorEnableIRQ
(
	IRQ_t ARG_udtIRQn
)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtIRQn<=59)
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b3b      	cmp	r3, #59	; 0x3b
 8002252:	d80e      	bhi.n	8002272 <MNVIC_stderrorEnableIRQ+0x32>
	{
		MNVIC->ISER[ARG_udtIRQn/32]= (1<<(ARG_udtIRQn%32));
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2201      	movs	r2, #1
 800225c:	fa02 f103 	lsl.w	r1, r2, r3
 8002260:	4a08      	ldr	r2, [pc, #32]	; (8002284 <MNVIC_stderrorEnableIRQ+0x44>)
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		L_stderrorError=E_OK;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e001      	b.n	8002276 <MNVIC_stderrorEnableIRQ+0x36>
	}
	else
	{
		L_stderrorError=E_NOK;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100

08002288 <MNVIC_stderrorDisableIRQ>:

STD_error_t MNVIC_stderrorDisableIRQ
(
	IRQ_t ARG_udtIRQn
)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
	if(ARG_udtIRQn<=59)
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b3b      	cmp	r3, #59	; 0x3b
 800229a:	d80f      	bhi.n	80022bc <MNVIC_stderrorDisableIRQ+0x34>
	{
		MNVIC->ICER[ARG_udtIRQn/32] = (1<<(ARG_udtIRQn%32));
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	2201      	movs	r2, #1
 80022a4:	fa02 f103 	lsl.w	r1, r2, r3
 80022a8:	4a08      	ldr	r2, [pc, #32]	; (80022cc <MNVIC_stderrorDisableIRQ+0x44>)
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	3320      	adds	r3, #32
 80022b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		L_stderrorError=E_OK;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e001      	b.n	80022c0 <MNVIC_stderrorDisableIRQ+0x38>
	}
	else
	{
		L_stderrorError=E_NOK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <MRCC_stderrorInit>:
	RCC_ClkSrc_t 		ARG_udtClkSrc ,
	RCC_AHBPreScaler_t 	ARG_udtAHBPreScaler,
	RCC_APBPreScaler_t 	ARG_udtAPB1PreScaler,
	RCC_APBPreScaler_t 	ARG_udtAPB2PreScaler
)
{
 80022d0:	b490      	push	{r4, r7}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4604      	mov	r4, r0
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	4603      	mov	r3, r0
 80022e4:	71bb      	strb	r3, [r7, #6]
 80022e6:	460b      	mov	r3, r1
 80022e8:	717b      	strb	r3, [r7, #5]
 80022ea:	4613      	mov	r3, r2
 80022ec:	713b      	strb	r3, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
	
	if((ARG_udtClkSrc<=4)&&(((ARG_udtAHBPreScaler>=8)&&(ARG_udtAHBPreScaler<=15))||(ARG_udtAHBPreScaler==0))&&(((ARG_udtAPB1PreScaler>=3)&&(ARG_udtAPB1PreScaler<=7))||(ARG_udtAPB1PreScaler==0))&&(((ARG_udtAPB2PreScaler>=3)&&(ARG_udtAPB2PreScaler<=7))||(ARG_udtAPB2PreScaler==0)))
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	f200 8137 	bhi.w	8002568 <MRCC_stderrorInit+0x298>
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	2b07      	cmp	r3, #7
 80022fe:	d902      	bls.n	8002306 <MRCC_stderrorInit+0x36>
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	d903      	bls.n	800230e <MRCC_stderrorInit+0x3e>
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 812d 	bne.w	8002568 <MRCC_stderrorInit+0x298>
 800230e:	797b      	ldrb	r3, [r7, #5]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d902      	bls.n	800231a <MRCC_stderrorInit+0x4a>
 8002314:	797b      	ldrb	r3, [r7, #5]
 8002316:	2b07      	cmp	r3, #7
 8002318:	d903      	bls.n	8002322 <MRCC_stderrorInit+0x52>
 800231a:	797b      	ldrb	r3, [r7, #5]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 8123 	bne.w	8002568 <MRCC_stderrorInit+0x298>
 8002322:	793b      	ldrb	r3, [r7, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d902      	bls.n	800232e <MRCC_stderrorInit+0x5e>
 8002328:	793b      	ldrb	r3, [r7, #4]
 800232a:	2b07      	cmp	r3, #7
 800232c:	d903      	bls.n	8002336 <MRCC_stderrorInit+0x66>
 800232e:	793b      	ldrb	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 8119 	bne.w	8002568 <MRCC_stderrorInit+0x298>
	{
		switch(ARG_udtClkSrc)
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b05      	cmp	r3, #5
 800233a:	f200 80e7 	bhi.w	800250c <MRCC_stderrorInit+0x23c>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <MRCC_stderrorInit+0x74>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	0800235d 	.word	0x0800235d
 8002348:	080023a3 	.word	0x080023a3
 800234c:	080023e9 	.word	0x080023e9
 8002350:	08002417 	.word	0x08002417
 8002354:	0800246d 	.word	0x0800246d
 8002358:	080024c3 	.word	0x080024c3
		{
			case HSE_Crystal:
			{
				MRCC_u8PllCk=0;
 800235c:	4b86      	ldr	r3, [pc, #536]	; (8002578 <MRCC_stderrorInit+0x2a8>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSE*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 8002362:	4b86      	ldr	r3, [pc, #536]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a85      	ldr	r2, [pc, #532]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002368:	f023 0303 	bic.w	r3, r3, #3
 800236c:	6013      	str	r3, [r2, #0]
				RCC_CFGR|=(HSE_FLAG);
 800236e:	4b83      	ldr	r3, [pc, #524]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a82      	ldr	r2, [pc, #520]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6013      	str	r3, [r2, #0]
				/*Disable bypass*/
				RCC_CR	&=~(1U<<HSEBYP);
 800237a:	4b81      	ldr	r3, [pc, #516]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a80      	ldr	r2, [pc, #512]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 8002386:	4b7e      	ldr	r3, [pc, #504]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7d      	ldr	r2, [pc, #500]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 8002392:	bf00      	nop
 8002394:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f9      	beq.n	8002394 <MRCC_stderrorInit+0xc4>
				break;
 80023a0:	e0b5      	b.n	800250e <MRCC_stderrorInit+0x23e>
			}
			case HSE_RC:
			{
				MRCC_u8PllCk=0;
 80023a2:	4b75      	ldr	r3, [pc, #468]	; (8002578 <MRCC_stderrorInit+0x2a8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSE*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 80023a8:	4b74      	ldr	r3, [pc, #464]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a73      	ldr	r2, [pc, #460]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	6013      	str	r3, [r2, #0]
				RCC_CFGR|=(HSE_FLAG);
 80023b4:	4b71      	ldr	r3, [pc, #452]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a70      	ldr	r2, [pc, #448]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6013      	str	r3, [r2, #0]
				/*Enable bypass*/
				RCC_CR|=(1U<<HSEBYP);
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80023c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ca:	6013      	str	r3, [r2, #0]
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 80023cc:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6b      	ldr	r2, [pc, #428]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 80023d8:	bf00      	nop
 80023da:	4b69      	ldr	r3, [pc, #420]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f9      	beq.n	80023da <MRCC_stderrorInit+0x10a>
				break;
 80023e6:	e092      	b.n	800250e <MRCC_stderrorInit+0x23e>
			}
			case HSI:
			{
				MRCC_u8PllCk=0;
 80023e8:	4b63      	ldr	r3, [pc, #396]	; (8002578 <MRCC_stderrorInit+0x2a8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSI*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a62      	ldr	r2, [pc, #392]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80023f4:	f023 0303 	bic.w	r3, r3, #3
 80023f8:	6013      	str	r3, [r2, #0]
				/*Enable HSI*/
				RCC_CR|=(1U<<HSION);
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a60      	ldr	r2, [pc, #384]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSIRDY)&1))==0);
 8002406:	bf00      	nop
 8002408:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f9      	beq.n	8002408 <MRCC_stderrorInit+0x138>
				
				
				break;
 8002414:	e07b      	b.n	800250e <MRCC_stderrorInit+0x23e>
			}
			case PLL_HSE:
			{
				MRCC_u8PllCk=1;
 8002416:	4b58      	ldr	r3, [pc, #352]	; (8002578 <MRCC_stderrorInit+0x2a8>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 800241c:	4b58      	ldr	r3, [pc, #352]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a57      	ldr	r2, [pc, #348]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002426:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 8002428:	bf00      	nop
 800242a:	4b55      	ldr	r3, [pc, #340]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0e5b      	lsrs	r3, r3, #25
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d0f8      	beq.n	800242a <MRCC_stderrorInit+0x15a>
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 8002438:	4b51      	ldr	r3, [pc, #324]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a50      	ldr	r2, [pc, #320]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 800243e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 8002444:	bf00      	nop
 8002446:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f9      	beq.n	8002446 <MRCC_stderrorInit+0x176>
				/*PLL HSE SELECT*/
				RCC_CFGR|=(1U<<PLLSRC);
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a49      	ldr	r2, [pc, #292]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
				/*PLL NO DIVIDED HSE */
				RCC_CFGR&=(~(1<<PLLXTPRE));
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a46      	ldr	r2, [pc, #280]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002464:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002468:	6013      	str	r3, [r2, #0]
				break;
 800246a:	e050      	b.n	800250e <MRCC_stderrorInit+0x23e>
			}
			case PLL_HSE_DIVIDED_BY_2:
			{
				MRCC_u8PllCk=1;
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <MRCC_stderrorInit+0x2a8>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 8002472:	4b43      	ldr	r3, [pc, #268]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a42      	ldr	r2, [pc, #264]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247c:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 800247e:	bf00      	nop
 8002480:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e5b      	lsrs	r3, r3, #25
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d0f8      	beq.n	8002480 <MRCC_stderrorInit+0x1b0>
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 800248e:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3b      	ldr	r2, [pc, #236]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 800249a:	bf00      	nop
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f9      	beq.n	800249c <MRCC_stderrorInit+0x1cc>
				/*PLL HSE SELECT*/
				RCC_CFGR|=(1U<<PLLSRC);
 80024a8:	4b34      	ldr	r3, [pc, #208]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
				/*PLL NO DIVIDED HSE */
				RCC_CFGR|=(1U<<PLLXTPRE);
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a30      	ldr	r2, [pc, #192]	; (800257c <MRCC_stderrorInit+0x2ac>)
 80024ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024be:	6013      	str	r3, [r2, #0]
				break;
 80024c0:	e025      	b.n	800250e <MRCC_stderrorInit+0x23e>
			}
			case PLL_HSI_DIVIDED_BY_2:
			{
				MRCC_u8PllCk=1;
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <MRCC_stderrorInit+0x2a8>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80024ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d2:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 80024d4:	bf00      	nop
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0e5b      	lsrs	r3, r3, #25
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d0f8      	beq.n	80024d6 <MRCC_stderrorInit+0x206>
				/*Enable HSI*/
				RCC_CR|=(1U<<HSION);
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSIRDY)&1))==0);
 80024f0:	bf00      	nop
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <MRCC_stderrorInit+0x2b0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f9      	beq.n	80024f2 <MRCC_stderrorInit+0x222>
				/*PLL HSI SELECT*/
				RCC_CFGR&=~(1U<<PLLSRC);
 80024fe:	4b1f      	ldr	r3, [pc, #124]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1e      	ldr	r2, [pc, #120]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
				break;
 800250a:	e000      	b.n	800250e <MRCC_stderrorInit+0x23e>
			}
			default : 
			{
				/*nothing*/
				break;
 800250c:	bf00      	nop
			}
		}
		
		/*AHB1*/
		RCC_CFGR=(RCC_CFGR&AHB_FLAG);
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1a      	ldr	r2, [pc, #104]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002518:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAHBPreScaler<<HPRE);
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <MRCC_stderrorInit+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	79ba      	ldrb	r2, [r7, #6]
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	4611      	mov	r1, r2
 8002524:	4a15      	ldr	r2, [pc, #84]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002526:	430b      	orrs	r3, r1
 8002528:	6013      	str	r3, [r2, #0]
		/*APB1*/
		RCC_CFGR=(RCC_CFGR&APB1_FLAG);
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <MRCC_stderrorInit+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002530:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002534:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAPB1PreScaler<<PPRE1);
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	797a      	ldrb	r2, [r7, #5]
 800253c:	0212      	lsls	r2, r2, #8
 800253e:	4611      	mov	r1, r2
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002542:	430b      	orrs	r3, r1
 8002544:	6013      	str	r3, [r2, #0]
		/*APB2*/
		RCC_CFGR=(RCC_CFGR&APB2_FLAG);
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <MRCC_stderrorInit+0x2ac>)
 800254c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002550:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAPB2PreScaler<<PPRE2);
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <MRCC_stderrorInit+0x2ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	793a      	ldrb	r2, [r7, #4]
 8002558:	02d2      	lsls	r2, r2, #11
 800255a:	4611      	mov	r1, r2
 800255c:	4a07      	ldr	r2, [pc, #28]	; (800257c <MRCC_stderrorInit+0x2ac>)
 800255e:	430b      	orrs	r3, r1
 8002560:	6013      	str	r3, [r2, #0]
		
		L_stderrorError = E_OK;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e001      	b.n	800256c <MRCC_stderrorInit+0x29c>
	}
	else
	{
		L_stderrorError=E_NOK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bc90      	pop	{r4, r7}
 8002576:	4770      	bx	lr
 8002578:	20000030 	.word	0x20000030
 800257c:	40021004 	.word	0x40021004
 8002580:	40021000 	.word	0x40021000

08002584 <RCC_EnablePeripheralClk>:
STD_error_t RCC_EnablePeripheralClk
(
	RCC_Bus_t 			ARG_udtBus,
	RCC_PeripheraName_t ARG_udtPeripheraName
)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	460a      	mov	r2, r1
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	4613      	mov	r3, r2
 8002592:	71bb      	strb	r3, [r7, #6]
	
	STD_error_t L_stderrorError=E_NOK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
	
	switch(ARG_udtBus)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d01e      	beq.n	80025dc <RCC_EnablePeripheralClk+0x58>
 800259e:	2b02      	cmp	r3, #2
 80025a0:	dc28      	bgt.n	80025f4 <RCC_EnablePeripheralClk+0x70>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <RCC_EnablePeripheralClk+0x28>
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d00c      	beq.n	80025c4 <RCC_EnablePeripheralClk+0x40>
 80025aa:	e023      	b.n	80025f4 <RCC_EnablePeripheralClk+0x70>
	{
		case AHB1:
		{
			RCC_AHBENR|=(1U<<ARG_udtPeripheraName);
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <RCC_EnablePeripheralClk+0x84>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	4913      	ldr	r1, [pc, #76]	; (8002608 <RCC_EnablePeripheralClk+0x84>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
			break;
 80025c2:	e01a      	b.n	80025fa <RCC_EnablePeripheralClk+0x76>
		}
		case APB1:
		{
			RCC_APB1ENR|=(1U<<ARG_udtPeripheraName);
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <RCC_EnablePeripheralClk+0x88>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	79bb      	ldrb	r3, [r7, #6]
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <RCC_EnablePeripheralClk+0x88>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
			break;
 80025da:	e00e      	b.n	80025fa <RCC_EnablePeripheralClk+0x76>
		}
		case APB2:
		{
			RCC_APB2ENR|=(1U<<ARG_udtPeripheraName);
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <RCC_EnablePeripheralClk+0x8c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	4909      	ldr	r1, [pc, #36]	; (8002610 <RCC_EnablePeripheralClk+0x8c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
			break;
 80025f2:	e002      	b.n	80025fa <RCC_EnablePeripheralClk+0x76>
		}
		
		default:
		{
			L_stderrorError=E_NOK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
			break;
 80025f8:	bf00      	nop
		}
			
	}
	return L_stderrorError;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
	
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021014 	.word	0x40021014
 800260c:	4002101c 	.word	0x4002101c
 8002610:	40021018 	.word	0x40021018

08002614 <MSYSTICK_stderrorInit>:

STD_error_t MSYSTICK_stderrorInit
(
	MSYSTICK_CLkSRC_t ARG_udtCLkSRC
)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtCLkSRC <=1)
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d810      	bhi.n	800264a <MSYSTICK_stderrorInit+0x36>
	{
		/*Disable SysTick peripheral and SysTick interrupt*/
		STK_CTRL =(STK_CTRL&(~STK_CTRL_Flag));
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MSYSTICK_stderrorInit+0x48>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0b      	ldr	r2, [pc, #44]	; (800265c <MSYSTICK_stderrorInit+0x48>)
 800262e:	f023 0307 	bic.w	r3, r3, #7
 8002632:	6013      	str	r3, [r2, #0]
		/*Select Clock Source*/
		STK_CTRL|=(ARG_udtCLkSRC<<2);
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <MSYSTICK_stderrorInit+0x48>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	79fa      	ldrb	r2, [r7, #7]
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	4611      	mov	r1, r2
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <MSYSTICK_stderrorInit+0x48>)
 8002640:	430b      	orrs	r3, r1
 8002642:	6013      	str	r3, [r2, #0]
		L_stderrorError=E_OK;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e001      	b.n	800264e <MSYSTICK_stderrorInit+0x3a>
		
	}
	else
	{
		L_stderrorError=E_NOK;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000e010 	.word	0xe000e010

08002660 <MSYSTICK_stderrorSetSingleInterval>:
STD_error_t MSYSTICK_stderrorSetSingleInterval
(
	u32 ARG_u32Ticks,
	void (*ARG_pvoidfUserFunction)(void)
)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	STD_error_t L_stderrorError=E_NOK;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pvoidfUserFunction != NULL_POINTER)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d011      	beq.n	8002698 <MSYSTICK_stderrorSetSingleInterval+0x38>
	{
		MSYSTICK_u8SelectISR=0;
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MSYSTICK_stderrorSetSingleInterval+0x48>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
		MSYSTICK_pvoidfUserFunctionSysTick=ARG_pvoidfUserFunction;
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <MSYSTICK_stderrorSetSingleInterval+0x4c>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6013      	str	r3, [r2, #0]
		STK_LOAD =ARG_u32Ticks;
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <MSYSTICK_stderrorSetSingleInterval+0x50>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
		STK_CTRL |=3U;
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <MSYSTICK_stderrorSetSingleInterval+0x54>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <MSYSTICK_stderrorSetSingleInterval+0x54>)
 800268c:	f043 0303 	orr.w	r3, r3, #3
 8002690:	6013      	str	r3, [r2, #0]
		L_stderrorError=E_OK;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e001      	b.n	800269c <MSYSTICK_stderrorSetSingleInterval+0x3c>
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 8002698:	2302      	movs	r3, #2
 800269a:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000038 	.word	0x20000038
 80026ac:	20000034 	.word	0x20000034
 80026b0:	e000e014 	.word	0xe000e014
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <MSYSTICK_voidElepsedTime>:

u32 MSYSTICK_voidElepsedTime
(
	void
)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	return (STK_LOAD-STK_VAL);
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <MSYSTICK_voidElepsedTime+0x18>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <MSYSTICK_voidElepsedTime+0x1c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	1ad3      	subs	r3, r2, r3
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e014 	.word	0xe000e014
 80026d4:	e000e018 	.word	0xe000e018

080026d8 <SysTick_Handler>:
	MSYSTICK_stderrorSetBusyWait(ARG_u32Time);
}


void SysTick_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	
	if(MSYSTICK_u8SelectISR ==0)
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <SysTick_Handler+0x34>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <SysTick_Handler+0x20>
	{
		
		MSYSTICK_pvoidfUserFunctionSysTick();
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <SysTick_Handler+0x38>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4798      	blx	r3
		STK_CTRL &=~(3U);
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <SysTick_Handler+0x3c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <SysTick_Handler+0x3c>)
 80026f0:	f023 0303 	bic.w	r3, r3, #3
 80026f4:	6013      	str	r3, [r2, #0]
	}
	else
	{
		
	}
}
 80026f6:	e006      	b.n	8002706 <SysTick_Handler+0x2e>
	else if(MSYSTICK_u8SelectISR ==1)
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <SysTick_Handler+0x34>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d102      	bne.n	8002706 <SysTick_Handler+0x2e>
		MSYSTICK_pvoidfUserFunctionSysTick();
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <SysTick_Handler+0x38>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4798      	blx	r3
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000038 	.word	0x20000038
 8002710:	20000034 	.word	0x20000034
 8002714:	e000e010 	.word	0xe000e010

08002718 <MTIM2_voidStartCount>:

void MTIM2_voidStartCount
(
	void
)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
	TIMER2 -> TIM2_CR1 |=(1U<<CR1_CEN);
 800271c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <MTIM2_voidStopCount>:

void MTIM2_voidStopCount
(
	void
)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
	TIMER2 -> TIM2_CR1 &=(~(1U<<CR1_CEN));
 8002738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <MTIM2_voidDisabledUpdataEvent>:

void MTIM2_voidDisabledUpdataEvent
(
	void
)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	TIMER2 -> TIM2_CR1 |=(1U<<CR1_UDIS);
 8002754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <MTIM2_voidPWMGeneration>:
	u16 ARG_u16PreScaler,
	u16 ARG_u16PWMFREQ,
	u8 ARG_u8PWMDutyCycleChannelCC1,
	u8 ARG_u8PWMDutyCycleChannelCC2
)
{
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4604      	mov	r4, r0
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4623      	mov	r3, r4
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	4603      	mov	r3, r0
 8002780:	80bb      	strh	r3, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	807b      	strh	r3, [r7, #2]
 8002786:	4613      	mov	r3, r2
 8002788:	71bb      	strb	r3, [r7, #6]
	MTIM2_voidStopCount();
 800278a:	f7ff ffd3 	bl	8002734 <MTIM2_voidStopCount>
	
	MTIM2_voidDisabledUpdataEvent();
 800278e:	f7ff ffdf 	bl	8002750 <MTIM2_voidDisabledUpdataEvent>

	/*set a PreScaler & auto-reload*/
	TIMER2 -> TIM2_PSC = ARG_u16PreScaler-1;
 8002792:	88bb      	ldrh	r3, [r7, #4]
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
	TIMER2 -> TIM2_ARR = (u32)(((ARG_u8SysClk*1000000)/(ARG_u16PreScaler*ARG_u16PWMFREQ*1.0))-1);
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4a76      	ldr	r2, [pc, #472]	; (8002978 <MTIM2_voidPWMGeneration+0x20c>)
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe35 	bl	8000414 <__aeabi_i2d>
 80027aa:	4604      	mov	r4, r0
 80027ac:	460d      	mov	r5, r1
 80027ae:	88bb      	ldrh	r3, [r7, #4]
 80027b0:	887a      	ldrh	r2, [r7, #2]
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fe2c 	bl	8000414 <__aeabi_i2d>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fd ffba 	bl	800073c <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	4b69      	ldr	r3, [pc, #420]	; (800297c <MTIM2_voidPWMGeneration+0x210>)
 80027d6:	f7fd fccf 	bl	8000178 <__aeabi_dsub>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	f7fe f891 	bl	800090c <__aeabi_d2uiz>
 80027ea:	4603      	mov	r3, r0
 80027ec:	62e3      	str	r3, [r4, #44]	; 0x2c

	/*set a DutyCycle Channel*/
	TIMER2 -> TIM2_CCR1  = (u32)(((ARG_u8PWMDutyCycleChannelCC1*(TIMER2 -> TIM2_ARR + 1.0 ))/100)-1)*(ARG_u8PWMDutyCycleChannelCC1 != 0);
 80027ee:	79bb      	ldrb	r3, [r7, #6]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fe0f 	bl	8000414 <__aeabi_i2d>
 80027f6:	4604      	mov	r4, r0
 80027f8:	460d      	mov	r5, r1
 80027fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fdf7 	bl	80003f4 <__aeabi_ui2d>
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <MTIM2_voidPWMGeneration+0x210>)
 800280c:	f7fd fcb6 	bl	800017c <__adddf3>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4620      	mov	r0, r4
 8002816:	4629      	mov	r1, r5
 8002818:	f7fd fe66 	bl	80004e8 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4b55      	ldr	r3, [pc, #340]	; (8002980 <MTIM2_voidPWMGeneration+0x214>)
 800282a:	f7fd ff87 	bl	800073c <__aeabi_ddiv>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <MTIM2_voidPWMGeneration+0x210>)
 800283c:	f7fd fc9c 	bl	8000178 <__aeabi_dsub>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f7fe f860 	bl	800090c <__aeabi_d2uiz>
 800284c:	4602      	mov	r2, r0
 800284e:	79bb      	ldrb	r3, [r7, #6]
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	634b      	str	r3, [r1, #52]	; 0x34
	TIMER2 -> TIM2_CCR2  = (u32)(((ARG_u8PWMDutyCycleChannelCC2*(TIMER2 -> TIM2_ARR + 1.0 ))/100)-1)*(ARG_u8PWMDutyCycleChannelCC2 != 0);
 8002864:	7e3b      	ldrb	r3, [r7, #24]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fdd4 	bl	8000414 <__aeabi_i2d>
 800286c:	4604      	mov	r4, r0
 800286e:	460d      	mov	r5, r1
 8002870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fdbc 	bl	80003f4 <__aeabi_ui2d>
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	4b3e      	ldr	r3, [pc, #248]	; (800297c <MTIM2_voidPWMGeneration+0x210>)
 8002882:	f7fd fc7b 	bl	800017c <__adddf3>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4620      	mov	r0, r4
 800288c:	4629      	mov	r1, r5
 800288e:	f7fd fe2b 	bl	80004e8 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <MTIM2_voidPWMGeneration+0x214>)
 80028a0:	f7fd ff4c 	bl	800073c <__aeabi_ddiv>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <MTIM2_voidPWMGeneration+0x210>)
 80028b2:	f7fd fc61 	bl	8000178 <__aeabi_dsub>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f825 	bl	800090c <__aeabi_d2uiz>
 80028c2:	4602      	mov	r2, r0
 80028c4:	7e3b      	ldrb	r3, [r7, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf14      	ite	ne
 80028ca:	2301      	movne	r3, #1
 80028cc:	2300      	moveq	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	638b      	str	r3, [r1, #56]	; 0x38

	/*Counter used as upcounter*/
	TIMER2 -> TIM2_CR1 &=~(1<<CR1_DIR);
 80028da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	6013      	str	r3, [r2, #0]
	
	/* ENABLE Capture/Compare output  CH1 & CH2*/
	TIMER2 -> TIM2_CCER |= (1<<CCER_CC1E);
 80028ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6213      	str	r3, [r2, #32]
	TIMER2 -> TIM2_CCER |= (1<<CCER_CC2E);
 80028fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002904:	f043 0310 	orr.w	r3, r3, #16
 8002908:	6213      	str	r3, [r2, #32]
	
	/* Auto-reload preload enable*/
	TIMER2 -> TIM2_CR1 |= (1<<CR1_ARPE);
 800290a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002918:	6013      	str	r3, [r2, #0]
	
	/*CLEAR CH1 & CH2*/
	TIMER2 -> TIM2_CCMR1 &= ~(15<<CCMR1_OC1PE);
 800291a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002924:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8002928:	6193      	str	r3, [r2, #24]
	TIMER2 -> TIM2_CCMR1 &= ~(15<<CCMR1_OC2PE);
 800292a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002934:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002938:	6193      	str	r3, [r2, #24]
	
	/*CH1 & CH2 Active PWM Mode1 & Preload*/
	TIMER2 -> TIM2_CCMR1 |= (13<<CCMR1_OC1PE);
 800293a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002944:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8002948:	6193      	str	r3, [r2, #24]
	TIMER2 -> TIM2_CCMR1 |= (13<<CCMR1_OC2PE);
 800294a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002954:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8002958:	6193      	str	r3, [r2, #24]
	
	/*enable update generation*/
	TIMER2 -> TIM2_EGR |=(1<<EGR_UG);
 800295a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6153      	str	r3, [r2, #20]
	
	/*enable timer generation*/
	MTIM2_voidStartCount();
 800296a:	f7ff fed5 	bl	8002718 <MTIM2_voidStartCount>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	bf00      	nop
 8002978:	000f4240 	.word	0x000f4240
 800297c:	3ff00000 	.word	0x3ff00000
 8002980:	40590000 	.word	0x40590000

08002984 <main>:

u8 ECU2_u8PIDState=0 ;


int main(void)
{
 8002984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002988:	b09d      	sub	sp, #116	; 0x74
 800298a:	af08      	add	r7, sp, #32
	MRCC_stderrorInit(HSI,AHB_PreScaler1,APB_PreScaler1,APB_PreScaler1);
 800298c:	2300      	movs	r3, #0
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	2002      	movs	r0, #2
 8002994:	f7ff fc9c 	bl	80022d0 <MRCC_stderrorInit>
	RCC_EnablePeripheralClk(APB2, GPIOA_PER);
 8002998:	2102      	movs	r1, #2
 800299a:	2002      	movs	r0, #2
 800299c:	f7ff fdf2 	bl	8002584 <RCC_EnablePeripheralClk>
	RCC_EnablePeripheralClk(APB2, AFIOEN_PER);
 80029a0:	2100      	movs	r1, #0
 80029a2:	2002      	movs	r0, #2
 80029a4:	f7ff fdee 	bl	8002584 <RCC_EnablePeripheralClk>
	RCC_EnablePeripheralClk(APB1, TIM2EN_PER);
 80029a8:	2100      	movs	r1, #0
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7ff fdea 	bl	8002584 <RCC_EnablePeripheralClk>
	RCC_EnablePeripheralClk(APB1, PWREN_PER);
 80029b0:	211c      	movs	r1, #28
 80029b2:	2001      	movs	r0, #1
 80029b4:	f7ff fde6 	bl	8002584 <RCC_EnablePeripheralClk>
	RCC_EnablePeripheralClk(APB1, CAN1EN_PER);
 80029b8:	2119      	movs	r1, #25
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7ff fde2 	bl	8002584 <RCC_EnablePeripheralClk>

	/*GPIO CONFIG*/
	MGPIO_stderrorPinModeSelect(GPIOA, PIN6, OUTPUT_PUSH_PULL_SPEED_10MHZ);
 80029c0:	2201      	movs	r2, #1
 80029c2:	2106      	movs	r1, #6
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff f8d1 	bl	8001b6c <MGPIO_stderrorPinModeSelect>
	MGPIO_stderrorSetPinValueBSSR(GPIOA, PIN6, LOW);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2106      	movs	r1, #6
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7ff fa90 	bl	8001ef4 <MGPIO_stderrorSetPinValueBSSR>

	/*enable Serial Debugger*/
	MGPIO_stderrorSerialWireJTAGConfiguration(JTAG_DISABLED_AND_SW_ENABLED);
 80029d4:	2002      	movs	r0, #2
 80029d6:	f7ff fc0b 	bl	80021f0 <MGPIO_stderrorSerialWireJTAGConfiguration>

	/*systick initialization */
	MSYSTICK_stderrorInit(AHB_DIV_8);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7ff fe1a 	bl	8002614 <MSYSTICK_stderrorInit>

	/*H-bridge CONFIG*/
	HHBDG_voidInit();
 80029e0:	f7fe faf8 	bl	8000fd4 <HHBDG_voidInit>

	/*encoder CONFIG*/
	MGPIO_stderrorPinModeSelect(GPIOA, PIN2, INPUT_PULL_UP_DOWN);
 80029e4:	2208      	movs	r2, #8
 80029e6:	2102      	movs	r1, #2
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff f8bf 	bl	8001b6c <MGPIO_stderrorPinModeSelect>
	MGPIO_stderrorPinModeSelect(GPIOA, PIN3, INPUT_PULL_UP_DOWN);
 80029ee:	2208      	movs	r2, #8
 80029f0:	2103      	movs	r1, #3
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7ff f8ba 	bl	8001b6c <MGPIO_stderrorPinModeSelect>

	MGPIO_stderrorSetPinPull_Up_Down(GPIOA, PIN2,PULL_UP);
 80029f8:	2201      	movs	r2, #1
 80029fa:	2102      	movs	r1, #2
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff fb4b 	bl	8002098 <MGPIO_stderrorSetPinPull_Up_Down>
	MGPIO_stderrorSetPinPull_Up_Down(GPIOA, PIN3,PULL_UP);
 8002a02:	2201      	movs	r2, #1
 8002a04:	2103      	movs	r1, #3
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff fb46 	bl	8002098 <MGPIO_stderrorSetPinPull_Up_Down>

	MNVIC_stderrorEnableIRQ(EXTI2);
 8002a0c:	2008      	movs	r0, #8
 8002a0e:	f7ff fc17 	bl	8002240 <MNVIC_stderrorEnableIRQ>

	AFIO_VidSetEXTIConfiguration(AFIO_EXTI2,MAFIO_GPIOA);
 8002a12:	2100      	movs	r1, #0
 8002a14:	2002      	movs	r0, #2
 8002a16:	f7fe fb17 	bl	8001048 <AFIO_VidSetEXTIConfiguration>
	AFIO_VidSetEXTIConfiguration(AFIO_EXTI3,MAFIO_GPIOA);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	f7fe fb13 	bl	8001048 <AFIO_VidSetEXTIConfiguration>

	MEXTI_VoidSetCallBack(ECU2_ENCODER);
 8002a22:	48b1      	ldr	r0, [pc, #708]	; (8002ce8 <main+0x364>)
 8002a24:	f7ff f864 	bl	8001af0 <MEXTI_VoidSetCallBack>

	MEXTI_stderrorTriggerMode(EXTI_LINE2,RISING_EDGE);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2002      	movs	r0, #2
 8002a2c:	f7fe fff6 	bl	8001a1c <MEXTI_stderrorTriggerMode>
	MEXTI_stderrorTriggerMode(EXTI_LINE3,RISING_EDGE);
 8002a30:	2100      	movs	r1, #0
 8002a32:	2003      	movs	r0, #3
 8002a34:	f7fe fff2 	bl	8001a1c <MEXTI_stderrorTriggerMode>

	MEXTI_VoidEnableEXTI(EXTI_LINE2);
 8002a38:	2002      	movs	r0, #2
 8002a3a:	f7ff f843 	bl	8001ac4 <MEXTI_VoidEnableEXTI>
	MEXTI_VoidEnableEXTI(EXTI_LINE3);
 8002a3e:	2003      	movs	r0, #3
 8002a40:	f7ff f840 	bl	8001ac4 <MEXTI_VoidEnableEXTI>

	/*CAN BUS CONFIG*/
	MGPIO_stderrorPinModeSelect(GPIOA, PIN11, INPUT_FLOAT);
 8002a44:	2204      	movs	r2, #4
 8002a46:	210b      	movs	r1, #11
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff f88f 	bl	8001b6c <MGPIO_stderrorPinModeSelect>
	MGPIO_stderrorPinModeSelect(GPIOA, PIN12, ALTFUN_PUSH_PULL_SPEED_50MHZ);
 8002a4e:	220b      	movs	r2, #11
 8002a50:	210c      	movs	r1, #12
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7ff f88a 	bl	8001b6c <MGPIO_stderrorPinModeSelect>

	/*CAN CALCULATION*/
	MCAN_stderrorInit
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9306      	str	r3, [sp, #24]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9305      	str	r3, [sp, #20]
 8002a60:	2305      	movs	r3, #5
 8002a62:	9304      	str	r3, [sp, #16]
 8002a64:	2301      	movs	r3, #1
 8002a66:	9303      	str	r3, [sp, #12]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	9302      	str	r3, [sp, #8]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	2300      	movs	r3, #0
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2300      	movs	r3, #0
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe fb46 	bl	800110c <MCAN_stderrorInit>
			RJW_1
	);


	/*CAN TX FRAM*/
	ECU2_udtPIDMsgFram.udtDLC_Type=DLC8byte;
 8002a80:	4b9a      	ldr	r3, [pc, #616]	; (8002cec <main+0x368>)
 8002a82:	2208      	movs	r2, #8
 8002a84:	719a      	strb	r2, [r3, #6]
	ECU2_udtPIDMsgFram.udtID_Type=ID_STD;
 8002a86:	4b99      	ldr	r3, [pc, #612]	; (8002cec <main+0x368>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	711a      	strb	r2, [r3, #4]
	ECU2_udtPIDMsgFram.udtRTR_Type=DATA_FRAME;
 8002a8c:	4b97      	ldr	r3, [pc, #604]	; (8002cec <main+0x368>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	715a      	strb	r2, [r3, #5]
	ECU2_udtPIDMsgFram.u32Msg_Id=0;
 8002a92:	4b96      	ldr	r3, [pc, #600]	; (8002cec <main+0x368>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
	ECU2_udtPIDMsgFram.pu8Payload=TxData;
 8002a98:	4b94      	ldr	r3, [pc, #592]	; (8002cec <main+0x368>)
 8002a9a:	4a95      	ldr	r2, [pc, #596]	; (8002cf0 <main+0x36c>)
 8002a9c:	609a      	str	r2, [r3, #8]
	ECU2_udtPIDMsgFram.u8TxMailbox=10;
 8002a9e:	4b93      	ldr	r3, [pc, #588]	; (8002cec <main+0x368>)
 8002aa0:	220a      	movs	r2, #10
 8002aa2:	731a      	strb	r2, [r3, #12]

	/*CAN RX FRAM*/
	ECU2_udtPIDResiveMsgFram.udtSET_FILTER_FIFO=FILTER_FIFO0;
 8002aa4:	4b93      	ldr	r3, [pc, #588]	; (8002cf4 <main+0x370>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
	ECU2_udtPIDResiveMsgFram.udtID_Type=ID_STD;
 8002aaa:	4b92      	ldr	r3, [pc, #584]	; (8002cf4 <main+0x370>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	721a      	strb	r2, [r3, #8]
	ECU2_udtPIDResiveMsgFram.pu8Payload=RxData;
 8002ab0:	4b90      	ldr	r3, [pc, #576]	; (8002cf4 <main+0x370>)
 8002ab2:	4a91      	ldr	r2, [pc, #580]	; (8002cf8 <main+0x374>)
 8002ab4:	611a      	str	r2, [r3, #16]


	/*filter one*/
	MCAN_Filter_Config_s ECU2_udtMsgsFilter;
	ECU2_udtMsgsFilter.udtFILTER_ACTIVATION_STATE=FILTER_ENABLED;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	713b      	strb	r3, [r7, #4]
	ECU2_udtMsgsFilter.udtSELECT_FILTER_BANK=FILTER_BANK0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	717b      	strb	r3, [r7, #5]
	ECU2_udtMsgsFilter.udtSET_FILTER_FIFO=FILTER_FIFO0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	71bb      	strb	r3, [r7, #6]
	ECU2_udtMsgsFilter.u32SET_FILTER_ID_HIGH=(0x30)<<5;
 8002ac2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ac6:	60bb      	str	r3, [r7, #8]
	ECU2_udtMsgsFilter.u32SET_FILTER_ID_LOW=(0x31)<<5;
 8002ac8:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8002acc:	60fb      	str	r3, [r7, #12]
	ECU2_udtMsgsFilter.u32SET_FILTER_MASK_HIGH=(0x32)<<5;
 8002ace:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002ad2:	613b      	str	r3, [r7, #16]
	ECU2_udtMsgsFilter.u32SET_FILTER_MASK_LOW=(0x33)<<5;
 8002ad4:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002ad8:	617b      	str	r3, [r7, #20]
	ECU2_udtMsgsFilter.udtSET_FILTER_MODE=FILTER_IDLIST;
 8002ada:	2301      	movs	r3, #1
 8002adc:	763b      	strb	r3, [r7, #24]
	ECU2_udtMsgsFilter.udtSET_FILTER_SCALE=FILTER_SCALE_16BIT;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	767b      	strb	r3, [r7, #25]

	MCAN_stderrorFilterInit(&ECU2_udtMsgsFilter);
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fd2f 	bl	8001548 <MCAN_stderrorFilterInit>

	MCAN_stderrorSetCallBackFIFO0(ECU2_voidNewMsg);
 8002aea:	4884      	ldr	r0, [pc, #528]	; (8002cfc <main+0x378>)
 8002aec:	f7fe ff7c 	bl	80019e8 <MCAN_stderrorSetCallBackFIFO0>

	/*Start can*/
	if(MCAN_stderrorCanStart()!=E_OK)
 8002af0:	f7fe fbe8 	bl	80012c4 <MCAN_stderrorCanStart>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d005      	beq.n	8002b06 <main+0x182>
	{
		while(1)
		{
			/*ERROR INDECATION*/
			MGPIO_stderrorSetPinValueBSSR(GPIOA, PIN6, HIGH);
 8002afa:	2201      	movs	r2, #1
 8002afc:	2106      	movs	r1, #6
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7ff f9f8 	bl	8001ef4 <MGPIO_stderrorSetPinValueBSSR>
 8002b04:	e7f9      	b.n	8002afa <main+0x176>
		}
	}

	MCAN_stderrorEnableInterrupt(FIFO0_MESSAGE_PENDING);
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7fe ff3e 	bl	8001988 <MCAN_stderrorEnableInterrupt>



	while(1)
	{
		if(ECU2_u8PIDState==1)
 8002b0c:	4b7c      	ldr	r3, [pc, #496]	; (8002d00 <main+0x37c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 80e3 	bne.w	8002cdc <main+0x358>
		{
			/*PID*/
			float L_fKp=1.0;
 8002b16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b1a:	647b      	str	r3, [r7, #68]	; 0x44
			float L_fKd=0.0;
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	643b      	str	r3, [r7, #64]	; 0x40
			float L_fKi=0.0;
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c

			MSYSTICK_stderrorSetSingleInterval(16000000UL, ECU2_voidUpdateTime);
 8002b28:	4976      	ldr	r1, [pc, #472]	; (8002d04 <main+0x380>)
 8002b2a:	4877      	ldr	r0, [pc, #476]	; (8002d08 <main+0x384>)
 8002b2c:	f7ff fd98 	bl	8002660 <MSYSTICK_stderrorSetSingleInterval>
			/*calculate current time*/
			u64 CTTime=((ECU2_u32CountOverFlow*16000000UL)+(MSYSTICK_voidElepsedTime()));
 8002b30:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <main+0x388>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a74      	ldr	r2, [pc, #464]	; (8002d08 <main+0x384>)
 8002b36:	fb02 f603 	mul.w	r6, r2, r3
 8002b3a:	f7ff fdbd 	bl	80026b8 <MSYSTICK_voidElepsedTime>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4433      	add	r3, r6
 8002b42:	2200      	movs	r2, #0
 8002b44:	469a      	mov	sl, r3
 8002b46:	4693      	mov	fp, r2
 8002b48:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
			double L_DuDeltaT = ((float)(CTTime-ECU2_u32PVTime))/(1000000);
 8002b4c:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <main+0x38c>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b56:	1a84      	subs	r4, r0, r2
 8002b58:	eb61 0503 	sbc.w	r5, r1, r3
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4629      	mov	r1, r5
 8002b60:	f7fe f80c 	bl	8000b7c <__aeabi_ul2f>
 8002b64:	4603      	mov	r3, r0
 8002b66:	496b      	ldr	r1, [pc, #428]	; (8002d14 <main+0x390>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f901 	bl	8000d70 <__aeabi_fdiv>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fc61 	bl	8000438 <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			ECU2_u32PVTime=CTTime;
 8002b7e:	4964      	ldr	r1, [pc, #400]	; (8002d10 <main+0x38c>)
 8002b80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b84:	e9c1 2300 	strd	r2, r3, [r1]

			ECU2_u32CTPosition=0;
 8002b88:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <main+0x394>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]

			/*take Encoder value*/
			MNVIC_stderrorDisableIRQ(EXTI_LINE2);
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f7ff fb7a 	bl	8002288 <MNVIC_stderrorDisableIRQ>
			ECU2_u32CTPosition=ECU2_s32Encodercounter;
 8002b94:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <main+0x398>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a5f      	ldr	r2, [pc, #380]	; (8002d18 <main+0x394>)
 8002b9a:	6013      	str	r3, [r2, #0]
			MEXTI_VoidEnableEXTI(EXTI_LINE2);
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f7fe ff91 	bl	8001ac4 <MEXTI_VoidEnableEXTI>


			/*Proportional*/
			s32 Error = ECU2_u32CTPosition-ECU2_u32SetPoint;
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <main+0x394>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b5d      	ldr	r3, [pc, #372]	; (8002d20 <main+0x39c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

			/*Derivative*/
			float L_fDeltaError = (Error-ECU2_u32PVError)/L_DuDeltaT;
 8002bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bb2:	f7fd ffd5 	bl	8000b60 <__aeabi_i2f>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <main+0x3a0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f7fd ff18 	bl	80009f4 <__aeabi_fsub>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fc36 	bl	8000438 <__aeabi_f2d>
 8002bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bd0:	f7fd fdb4 	bl	800073c <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fd feb6 	bl	800094c <__aeabi_d2f>
 8002be0:	4603      	mov	r3, r0
 8002be2:	623b      	str	r3, [r7, #32]

			/*Integral*/
			ECU2_u32CTError+=Error*L_DuDeltaT;
 8002be4:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <main+0x3a4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fc25 	bl	8000438 <__aeabi_f2d>
 8002bee:	4680      	mov	r8, r0
 8002bf0:	4689      	mov	r9, r1
 8002bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bf4:	f7fd fc0e 	bl	8000414 <__aeabi_i2d>
 8002bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bfc:	f7fd fc74 	bl	80004e8 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4640      	mov	r0, r8
 8002c06:	4649      	mov	r1, r9
 8002c08:	f7fd fab8 	bl	800017c <__adddf3>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd fe9a 	bl	800094c <__aeabi_d2f>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4a43      	ldr	r2, [pc, #268]	; (8002d28 <main+0x3a4>)
 8002c1c:	6013      	str	r3, [r2, #0]

			/*PID Equation*/
			float System_Control_signal = (L_fKp*Error)+(L_fKd*L_fDeltaError)+(L_fKi*ECU2_u32CTError);
 8002c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c20:	f7fd ff9e 	bl	8000b60 <__aeabi_i2f>
 8002c24:	4603      	mov	r3, r0
 8002c26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd ffed 	bl	8000c08 <__aeabi_fmul>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461e      	mov	r6, r3
 8002c32:	6a39      	ldr	r1, [r7, #32]
 8002c34:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c36:	f7fd ffe7 	bl	8000c08 <__aeabi_fmul>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4630      	mov	r0, r6
 8002c40:	f7fd feda 	bl	80009f8 <__addsf3>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461e      	mov	r6, r3
 8002c48:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <main+0x3a4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd ffda 	bl	8000c08 <__aeabi_fmul>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4619      	mov	r1, r3
 8002c58:	4630      	mov	r0, r6
 8002c5a:	f7fd fecd 	bl	80009f8 <__addsf3>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	61fb      	str	r3, [r7, #28]

			ECU2_u32PVError=Error;
 8002c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c64:	f7fd ff7c 	bl	8000b60 <__aeabi_i2f>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <main+0x3a0>)
 8002c6c:	6013      	str	r3, [r2, #0]

			float L_fPWM=System_Control_signal;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	64fb      	str	r3, [r7, #76]	; 0x4c

			L_fPWM=fabs(L_fPWM);
 8002c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c78:	64fb      	str	r3, [r7, #76]	; 0x4c

			if(L_fPWM>100)
 8002c7a:	492c      	ldr	r1, [pc, #176]	; (8002d2c <main+0x3a8>)
 8002c7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c7e:	f7fe f97f 	bl	8000f80 <__aeabi_fcmpgt>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <main+0x308>
			{
				L_fPWM=100;
 8002c88:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <main+0x3a8>)
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			u8 L_u8Direction_Motor=1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			if(System_Control_signal<0)
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	69f8      	ldr	r0, [r7, #28]
 8002c98:	f7fe f954 	bl	8000f44 <__aeabi_fcmplt>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <main+0x324>
			{
				L_u8Direction_Motor=0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			else
			{

			}

			if(fabs(ECU2_u32SetPoint-ECU2_s32Encodercounter)<=1)
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <main+0x39c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <main+0x398>)
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d806      	bhi.n	8002cc4 <main+0x340>
			{
				/*stop motor control*/
				ECU2_voidMotorControlWithSoftStarters(0 ,L_u8Direction_Motor);
 8002cb6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002cba:	4619      	mov	r1, r3
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f000 f86b 	bl	8002d98 <ECU2_voidMotorControlWithSoftStarters>
 8002cc2:	e723      	b.n	8002b0c <main+0x188>
			}
			else
			{
				/*motor control*/
				ECU2_voidMotorControlWithSoftStarters(((u8)L_fPWM) ,L_u8Direction_Motor);
 8002cc4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002cc6:	f7fe f965 	bl	8000f94 <__aeabi_f2uiz>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f85f 	bl	8002d98 <ECU2_voidMotorControlWithSoftStarters>
 8002cda:	e717      	b.n	8002b0c <main+0x188>
			}
		}
		else
		{
			/*stop motor control*/
			ECU2_voidMotorControlWithSoftStarters(0 ,0);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f000 f85a 	bl	8002d98 <ECU2_voidMotorControlWithSoftStarters>
		if(ECU2_u8PIDState==1)
 8002ce4:	e712      	b.n	8002b0c <main+0x188>
 8002ce6:	bf00      	nop
 8002ce8:	08002d31 	.word	0x08002d31
 8002cec:	20000068 	.word	0x20000068
 8002cf0:	20000058 	.word	0x20000058
 8002cf4:	20000078 	.word	0x20000078
 8002cf8:	20000060 	.word	0x20000060
 8002cfc:	08002f09 	.word	0x08002f09
 8002d00:	2000008c 	.word	0x2000008c
 8002d04:	08002d7d 	.word	0x08002d7d
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	20000040 	.word	0x20000040
 8002d10:	20000048 	.word	0x20000048
 8002d14:	49742400 	.word	0x49742400
 8002d18:	20000044 	.word	0x20000044
 8002d1c:	2000003c 	.word	0x2000003c
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000050 	.word	0x20000050
 8002d28:	20000054 	.word	0x20000054
 8002d2c:	42c80000 	.word	0x42c80000

08002d30 <ECU2_ENCODER>:

}


void ECU2_ENCODER(MEXTI_Line_t ARG_udtEXTILine)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]

	if(ARG_udtEXTILine ==EXTI_LINE2)
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d116      	bne.n	8002d6e <ECU2_ENCODER+0x3e>
	{

		u8 L_u8A=LOW;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]

		MGPIO_stderrorGetPinValue(GPIOA, PIN3,&L_u8A);
 8002d44:	f107 030f 	add.w	r3, r7, #15
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7ff f857 	bl	8001e00 <MGPIO_stderrorGetPinValue>

		if(L_u8A==LOW)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <ECU2_ENCODER+0x34>
		{
			ECU2_s32Encodercounter++;//right
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <ECU2_ENCODER+0x48>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <ECU2_ENCODER+0x48>)
 8002d60:	6013      	str	r3, [r2, #0]
	else
	{


	}
}
 8002d62:	e004      	b.n	8002d6e <ECU2_ENCODER+0x3e>
			ECU2_s32Encodercounter--;//left
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <ECU2_ENCODER+0x48>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <ECU2_ENCODER+0x48>)
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000003c 	.word	0x2000003c

08002d7c <ECU2_voidUpdateTime>:


void ECU2_voidUpdateTime(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
	ECU2_u32CountOverFlow++;
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <ECU2_voidUpdateTime+0x18>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a03      	ldr	r2, [pc, #12]	; (8002d94 <ECU2_voidUpdateTime+0x18>)
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000040 	.word	0x20000040

08002d98 <ECU2_voidMotorControlWithSoftStarters>:


void ECU2_voidMotorControlWithSoftStarters(u8 ARG_u8PWMValue , u8 ARG_u8DIR)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	4603      	mov	r3, r0
 8002da0:	460a      	mov	r2, r1
 8002da2:	71fb      	strb	r3, [r7, #7]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71bb      	strb	r3, [r7, #6]
	if(ARG_u8PWMValue !=0)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d052      	beq.n	8002e54 <ECU2_voidMotorControlWithSoftStarters+0xbc>
	{
		ARG_u8PWMValue=ECU2_u8Map(ARG_u8PWMValue,0,100,15,40);
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	b298      	uxth	r0, r3
 8002db2:	2328      	movs	r3, #40	; 0x28
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	230f      	movs	r3, #15
 8002db8:	2264      	movs	r2, #100	; 0x64
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f000 f87e 	bl	8002ebc <ECU2_u8Map>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	71fb      	strb	r3, [r7, #7]

		if(ARG_u8DIR ==0)
 8002dc4:	79bb      	ldrb	r3, [r7, #6]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d120      	bne.n	8002e0c <ECU2_voidMotorControlWithSoftStarters+0x74>
		{
			ECU2_u8counterdr0 =0;
 8002dca:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <ECU2_voidMotorControlWithSoftStarters+0xd8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]

			for(ECU2_u8counterdr0 =15;ECU2_u8counterdr0<=ARG_u8PWMValue;ECU2_u8counterdr0+=1)
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <ECU2_voidMotorControlWithSoftStarters+0xd8>)
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e013      	b.n	8002e00 <ECU2_voidMotorControlWithSoftStarters+0x68>
			{
				HHBDG_stderrorPWMGeneration(8,1,5000,ECU2_u8counterdr0,0);
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <ECU2_voidMotorControlWithSoftStarters+0xd8>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2200      	movs	r2, #0
 8002de0:	9200      	str	r2, [sp, #0]
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	2101      	movs	r1, #1
 8002de8:	2008      	movs	r0, #8
 8002dea:	f7fe f901 	bl	8000ff0 <HHBDG_stderrorPWMGeneration>
				ECU2_voidDelay(10);
 8002dee:	200a      	movs	r0, #10
 8002df0:	f000 f842 	bl	8002e78 <ECU2_voidDelay>
			for(ECU2_u8counterdr0 =15;ECU2_u8counterdr0<=ARG_u8PWMValue;ECU2_u8counterdr0+=1)
 8002df4:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <ECU2_voidMotorControlWithSoftStarters+0xd8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <ECU2_voidMotorControlWithSoftStarters+0xd8>)
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <ECU2_voidMotorControlWithSoftStarters+0xd8>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	79fa      	ldrb	r2, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d2e6      	bcs.n	8002dd8 <ECU2_voidMotorControlWithSoftStarters+0x40>
	}
	else
	{
		HHBDG_stderrorPWMGeneration(8,1,5000,0,0);
	}
}
 8002e0a:	e02c      	b.n	8002e66 <ECU2_voidMotorControlWithSoftStarters+0xce>
		else if(ARG_u8DIR ==1)
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d129      	bne.n	8002e66 <ECU2_voidMotorControlWithSoftStarters+0xce>
			ECU2_u8counterdr1 =0;
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <ECU2_voidMotorControlWithSoftStarters+0xdc>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
			for(ECU2_u8counterdr1 =15;ECU2_u8counterdr1<=ARG_u8PWMValue;ECU2_u8counterdr1+=1)
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <ECU2_voidMotorControlWithSoftStarters+0xdc>)
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e013      	b.n	8002e48 <ECU2_voidMotorControlWithSoftStarters+0xb0>
				HHBDG_stderrorPWMGeneration(8,1,5000,0,ECU2_u8counterdr1);
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <ECU2_voidMotorControlWithSoftStarters+0xdc>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	2101      	movs	r1, #1
 8002e30:	2008      	movs	r0, #8
 8002e32:	f7fe f8dd 	bl	8000ff0 <HHBDG_stderrorPWMGeneration>
				ECU2_voidDelay(10);
 8002e36:	200a      	movs	r0, #10
 8002e38:	f000 f81e 	bl	8002e78 <ECU2_voidDelay>
			for(ECU2_u8counterdr1 =15;ECU2_u8counterdr1<=ARG_u8PWMValue;ECU2_u8counterdr1+=1)
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <ECU2_voidMotorControlWithSoftStarters+0xdc>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <ECU2_voidMotorControlWithSoftStarters+0xdc>)
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <ECU2_voidMotorControlWithSoftStarters+0xdc>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	79fa      	ldrb	r2, [r7, #7]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d2e6      	bcs.n	8002e20 <ECU2_voidMotorControlWithSoftStarters+0x88>
}
 8002e52:	e008      	b.n	8002e66 <ECU2_voidMotorControlWithSoftStarters+0xce>
		HHBDG_stderrorPWMGeneration(8,1,5000,0,0);
 8002e54:	2300      	movs	r3, #0
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	2101      	movs	r1, #1
 8002e60:	2008      	movs	r0, #8
 8002e62:	f7fe f8c5 	bl	8000ff0 <HHBDG_stderrorPWMGeneration>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000039 	.word	0x20000039
 8002e74:	2000003a 	.word	0x2000003a

08002e78 <ECU2_voidDelay>:


void ECU2_voidDelay(u32 ARG_u32Milliseconds)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    u32 L_u8counter;
    u32 L_u32loopCount = (ARG_u32Milliseconds * 8000)/10;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <ECU2_voidDelay+0x40>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	08db      	lsrs	r3, r3, #3
 8002e92:	60bb      	str	r3, [r7, #8]

    for (L_u8counter = 0; L_u8counter < L_u32loopCount; ++L_u8counter)
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e003      	b.n	8002ea2 <ECU2_voidDelay+0x2a>
    {
        asm("NOP");
 8002e9a:	bf00      	nop
    for (L_u8counter = 0; L_u8counter < L_u32loopCount; ++L_u8counter)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3f7      	bcc.n	8002e9a <ECU2_voidDelay+0x22>
    }
}
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	cccccccd 	.word	0xcccccccd

08002ebc <ECU2_u8Map>:


u8 ECU2_u8Map(u16 x, u16 in_min, u16 in_max, u16 out_min, u16 out_max)
{
 8002ebc:	b490      	push	{r4, r7}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4623      	mov	r3, r4
 8002ecc:	80fb      	strh	r3, [r7, #6]
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80bb      	strh	r3, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	807b      	strh	r3, [r7, #2]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	803b      	strh	r3, [r7, #0]
  return (u8)((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	88bb      	ldrh	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	8a39      	ldrh	r1, [r7, #16]
 8002ee2:	883a      	ldrh	r2, [r7, #0]
 8002ee4:	1a8a      	subs	r2, r1, r2
 8002ee6:	fb03 f202 	mul.w	r2, r3, r2
 8002eea:	8879      	ldrh	r1, [r7, #2]
 8002eec:	88bb      	ldrh	r3, [r7, #4]
 8002eee:	1acb      	subs	r3, r1, r3
 8002ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	883b      	ldrh	r3, [r7, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	b2db      	uxtb	r3, r3
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc90      	pop	{r4, r7}
 8002f06:	4770      	bx	lr

08002f08 <ECU2_voidNewMsg>:

void ECU2_voidNewMsg(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0

	if(MCAN_stderrorReceive(&ECU2_udtPIDResiveMsgFram)!=E_OK)
 8002f0c:	4832      	ldr	r0, [pc, #200]	; (8002fd8 <ECU2_voidNewMsg+0xd0>)
 8002f0e:	f7fe fc4d 	bl	80017ac <MCAN_stderrorReceive>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d005      	beq.n	8002f24 <ECU2_voidNewMsg+0x1c>
	{
		while(1)
		{
			/*ERROR INDECATION*/
			MGPIO_stderrorSetPinValueBSSR(GPIOA, PIN6, HIGH);
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2106      	movs	r1, #6
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fe ffe9 	bl	8001ef4 <MGPIO_stderrorSetPinValueBSSR>
 8002f22:	e7f9      	b.n	8002f18 <ECU2_voidNewMsg+0x10>
	{
		/*Nothing*/
	}


	switch(ECU2_udtPIDResiveMsgFram.u32Msg_Id)
 8002f24:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <ECU2_voidNewMsg+0xd0>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	3b30      	subs	r3, #48	; 0x30
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d852      	bhi.n	8002fd4 <ECU2_voidNewMsg+0xcc>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <ECU2_voidNewMsg+0x2c>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002f55 	.word	0x08002f55
 8002f3c:	08002f99 	.word	0x08002f99
 8002f40:	08002fd3 	.word	0x08002fd3
	{
		case 0x30:
		{
			/*PID state*/
			ECU2_u8PIDState^=1;
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <ECU2_voidNewMsg+0xd4>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f083 0301 	eor.w	r3, r3, #1
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <ECU2_voidNewMsg+0xd4>)
 8002f50:	701a      	strb	r2, [r3, #0]
			break;
 8002f52:	e03f      	b.n	8002fd4 <ECU2_voidNewMsg+0xcc>
		}
		case 0x31:
		{
			/*get Set Point*/
			if(ECU2_udtPIDResiveMsgFram.pu8Payload[2]=='-')
 8002f54:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <ECU2_voidNewMsg+0xd0>)
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	3302      	adds	r3, #2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b2d      	cmp	r3, #45	; 0x2d
 8002f5e:	d10d      	bne.n	8002f7c <ECU2_voidNewMsg+0x74>
			{
				ECU2_u32SetPoint =(u32)(ECU2_udtPIDResiveMsgFram.pu8Payload[1]|(ECU2_udtPIDResiveMsgFram.pu8Payload[0]<<8))*-1;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <ECU2_voidNewMsg+0xd0>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	3301      	adds	r3, #1
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <ECU2_voidNewMsg+0xd0>)
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	4313      	orrs	r3, r2
 8002f74:	425b      	negs	r3, r3
 8002f76:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <ECU2_voidNewMsg+0xd8>)
 8002f78:	6013      	str	r3, [r2, #0]
			}
			else
			{
				ECU2_u32SetPoint =(u32)(ECU2_udtPIDResiveMsgFram.pu8Payload[1]|(ECU2_udtPIDResiveMsgFram.pu8Payload[0]<<8));
			}
			break;
 8002f7a:	e02b      	b.n	8002fd4 <ECU2_voidNewMsg+0xcc>
				ECU2_u32SetPoint =(u32)(ECU2_udtPIDResiveMsgFram.pu8Payload[1]|(ECU2_udtPIDResiveMsgFram.pu8Payload[0]<<8));
 8002f7c:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <ECU2_voidNewMsg+0xd0>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	3301      	adds	r3, #1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <ECU2_voidNewMsg+0xd0>)
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <ECU2_voidNewMsg+0xd8>)
 8002f94:	601a      	str	r2, [r3, #0]
			break;
 8002f96:	e01d      	b.n	8002fd4 <ECU2_voidNewMsg+0xcc>
		}
		case 0x32:
		{
			/*Send Encoder value*/
			ECU2_udtPIDMsgFram.u32Msg_Id=0x40;
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <ECU2_voidNewMsg+0xdc>)
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	601a      	str	r2, [r3, #0]
			TxData[0]=(u8)((ECU2_s32Encodercounter>>8)&0xFF);
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <ECU2_voidNewMsg+0xe0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	121b      	asrs	r3, r3, #8
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <ECU2_voidNewMsg+0xe4>)
 8002fa8:	701a      	strb	r2, [r3, #0]
			TxData[1]=(u8)((ECU2_s32Encodercounter)&0xFF);
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <ECU2_voidNewMsg+0xe0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <ECU2_voidNewMsg+0xe4>)
 8002fb2:	705a      	strb	r2, [r3, #1]
			if(ECU2_s32Encodercounter>0)
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <ECU2_voidNewMsg+0xe0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	dd03      	ble.n	8002fc4 <ECU2_voidNewMsg+0xbc>
			{
				TxData[2]='+';
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <ECU2_voidNewMsg+0xe4>)
 8002fbe:	222b      	movs	r2, #43	; 0x2b
 8002fc0:	709a      	strb	r2, [r3, #2]
 8002fc2:	e002      	b.n	8002fca <ECU2_voidNewMsg+0xc2>
			}
			else
			{
				TxData[2]='-';
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <ECU2_voidNewMsg+0xe4>)
 8002fc6:	222d      	movs	r2, #45	; 0x2d
 8002fc8:	709a      	strb	r2, [r3, #2]
			}
			MCAN_stderrorSend(&ECU2_udtPIDMsgFram);
 8002fca:	4806      	ldr	r0, [pc, #24]	; (8002fe4 <ECU2_voidNewMsg+0xdc>)
 8002fcc:	f7fe f9ee 	bl	80013ac <MCAN_stderrorSend>
			break;
 8002fd0:	e000      	b.n	8002fd4 <ECU2_voidNewMsg+0xcc>
		}
		case 0x33:
		{
			/*Flash*/
			break;
 8002fd2:	bf00      	nop
		}
	}
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000078 	.word	0x20000078
 8002fdc:	2000008c 	.word	0x2000008c
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	20000068 	.word	0x20000068
 8002fe8:	2000003c 	.word	0x2000003c
 8002fec:	20000058 	.word	0x20000058

08002ff0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ff0:	480d      	ldr	r0, [pc, #52]	; (8003028 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ff2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ff4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff8:	480c      	ldr	r0, [pc, #48]	; (800302c <LoopForever+0x6>)
  ldr r1, =_edata
 8002ffa:	490d      	ldr	r1, [pc, #52]	; (8003030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <LoopForever+0xe>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003000:	e002      	b.n	8003008 <LoopCopyDataInit>

08003002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003006:	3304      	adds	r3, #4

08003008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800300c:	d3f9      	bcc.n	8003002 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003010:	4c0a      	ldr	r4, [pc, #40]	; (800303c <LoopForever+0x16>)
  movs r3, #0
 8003012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003014:	e001      	b.n	800301a <LoopFillZerobss>

08003016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003018:	3204      	adds	r2, #4

0800301a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800301c:	d3fb      	bcc.n	8003016 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800301e:	f000 f811 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003022:	f7ff fcaf 	bl	8002984 <main>

08003026 <LoopForever>:

LoopForever:
  b LoopForever
 8003026:	e7fe      	b.n	8003026 <LoopForever>
  ldr   r0, =_estack
 8003028:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800302c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003030:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003034:	080030ac 	.word	0x080030ac
  ldr r2, =_sbss
 8003038:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800303c:	20000090 	.word	0x20000090

08003040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003040:	e7fe      	b.n	8003040 <ADC1_2_IRQHandler>
	...

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	2600      	movs	r6, #0
 8003048:	4d0c      	ldr	r5, [pc, #48]	; (800307c <__libc_init_array+0x38>)
 800304a:	4c0d      	ldr	r4, [pc, #52]	; (8003080 <__libc_init_array+0x3c>)
 800304c:	1b64      	subs	r4, r4, r5
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	42a6      	cmp	r6, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	f000 f81a 	bl	800308c <_init>
 8003058:	2600      	movs	r6, #0
 800305a:	4d0a      	ldr	r5, [pc, #40]	; (8003084 <__libc_init_array+0x40>)
 800305c:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <__libc_init_array+0x44>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	42a6      	cmp	r6, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	f855 3b04 	ldr.w	r3, [r5], #4
 800306c:	4798      	blx	r3
 800306e:	3601      	adds	r6, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	f855 3b04 	ldr.w	r3, [r5], #4
 8003076:	4798      	blx	r3
 8003078:	3601      	adds	r6, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	080030a4 	.word	0x080030a4
 8003080:	080030a4 	.word	0x080030a4
 8003084:	080030a4 	.word	0x080030a4
 8003088:	080030a8 	.word	0x080030a8

0800308c <_init>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr

08003098 <_fini>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr
