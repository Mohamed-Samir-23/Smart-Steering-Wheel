
Test_can_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800170c  08001714  00011714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800170c  0800170c  00011714  2**0
                  CONTENTS
  4 .ARM          00000000  0800170c  0800170c  00011714  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800170c  08001714  00011714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800170c  0800170c  0001170c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001710  08001710  00011710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  08001714  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001714  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011714  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001173d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d04  00000000  00000000  00011780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000881  00000000  00000000  00014484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00014d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c2  00000000  00000000  00014f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010aa  00000000  00000000  0001513a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a14  00000000  00000000  000161e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005ce9  00000000  00000000  00017bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000890  00000000  00000000  0001d8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0001e174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080016f4 	.word	0x080016f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080016f4 	.word	0x080016f4

08000170 <MCAN_stderrorInit>:
	u32 ARG_u32Prescaler,
	MCAN_Time_Seg1_t ARG_udtTime_Seg1,
	MCAN_Time_Seg2_t ARG_udtTime_Seg2,
	MCAN_Sync_Jump_Width_t ARG_udtSyncJumpWidth
)
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4603      	mov	r3, r0
 8000184:	71bb      	strb	r3, [r7, #6]
 8000186:	460b      	mov	r3, r1
 8000188:	717b      	strb	r3, [r7, #5]
 800018a:	4613      	mov	r3, r2
 800018c:	713b      	strb	r3, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 800018e:	2300      	movs	r3, #0
 8000190:	73fb      	strb	r3, [r7, #15]
	if
	(
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	2b01      	cmp	r3, #1
 8000196:	f200 80b6 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udt_TimeTriggeredMode<=1)&&
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b01      	cmp	r3, #1
 800019e:	f200 80b2 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtBusOffMode<=1)&&
 80001a2:	797b      	ldrb	r3, [r7, #5]
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	f200 80ae 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtWakeupMode<=1)&&
 80001aa:	7e3b      	ldrb	r3, [r7, #24]
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	f200 80aa 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtReceiveLockedMode<=1)&&
 80001b2:	7f3b      	ldrb	r3, [r7, #28]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	f200 80a6 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtTransmitPriority<=1)&&
 80001ba:	793b      	ldrb	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	f200 80a2 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtRetransmissionMode<=1)&&
 80001c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80001c6:	2b03      	cmp	r3, #3
 80001c8:	f200 809d 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtCommunicationMode<=3)&&
 80001cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001d2:	f200 8098 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_u32Prescaler<=1024)&&
 80001d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80001da:	2b0f      	cmp	r3, #15
 80001dc:	f200 8093 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtTime_Seg1<=15)&&
 80001e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80001e4:	2b07      	cmp	r3, #7
 80001e6:	f200 808e 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtTime_Seg2<=7)&&
 80001ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	f200 8089 	bhi.w	8000306 <MCAN_stderrorInit+0x196>
		(ARG_udtSyncJumpWidth<=3)
	)
	{
		/*Initialization request*/
		CAN_MCR |=(1<<INRQ);
 80001f4:	4b48      	ldr	r3, [pc, #288]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a47      	ldr	r2, [pc, #284]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
		/*Initialization acknowledge*/
		while((1&(CAN_MSR>>INAK))==0);
 8000200:	bf00      	nop
 8000202:	4b46      	ldr	r3, [pc, #280]	; (800031c <MCAN_stderrorInit+0x1ac>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <MCAN_stderrorInit+0x92>
		/*Sleep mode request exit*/
		CAN_MCR &=~(1<<SLEEP);
 800020e:	4b42      	ldr	r3, [pc, #264]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a41      	ldr	r2, [pc, #260]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000214:	f023 0302 	bic.w	r3, r3, #2
 8000218:	6013      	str	r3, [r2, #0]
		/*Initialization acknowledge*/
		while((1&(CAN_MSR>>SLAK))!=0);
 800021a:	bf00      	nop
 800021c:	4b3f      	ldr	r3, [pc, #252]	; (800031c <MCAN_stderrorInit+0x1ac>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f003 0302 	and.w	r3, r3, #2
 8000224:	2b00      	cmp	r3, #0
 8000226:	d1f9      	bne.n	800021c <MCAN_stderrorInit+0xac>
		/*Time triggered communication mode config*/
		CAN_MCR &=~(1<<TTCM);
 8000228:	4b3b      	ldr	r3, [pc, #236]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a3a      	ldr	r2, [pc, #232]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800022e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000232:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udt_TimeTriggeredMode<<TTCM);
 8000234:	4b38      	ldr	r3, [pc, #224]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	79fa      	ldrb	r2, [r7, #7]
 800023a:	01d2      	lsls	r2, r2, #7
 800023c:	4611      	mov	r1, r2
 800023e:	4a36      	ldr	r2, [pc, #216]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000240:	430b      	orrs	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
		/*bus-off management config*/
		CAN_MCR &=~(1<<ABOM);
 8000244:	4b34      	ldr	r3, [pc, #208]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a33      	ldr	r2, [pc, #204]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800024a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800024e:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtBusOffMode<<ABOM);
 8000250:	4b31      	ldr	r3, [pc, #196]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	79ba      	ldrb	r2, [r7, #6]
 8000256:	0192      	lsls	r2, r2, #6
 8000258:	4611      	mov	r1, r2
 800025a:	4a2f      	ldr	r2, [pc, #188]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800025c:	430b      	orrs	r3, r1
 800025e:	6013      	str	r3, [r2, #0]
		/*wakeup mode config*/
		CAN_MCR &=~(1<<AWUM);
 8000260:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000266:	f023 0320 	bic.w	r3, r3, #32
 800026a:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtWakeupMode<<AWUM);
 800026c:	4b2a      	ldr	r3, [pc, #168]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	797a      	ldrb	r2, [r7, #5]
 8000272:	0152      	lsls	r2, r2, #5
 8000274:	4611      	mov	r1, r2
 8000276:	4a28      	ldr	r2, [pc, #160]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000278:	430b      	orrs	r3, r1
 800027a:	6013      	str	r3, [r2, #0]
		/*retransmission mode config*/
		CAN_MCR &=~(1<<NART);
 800027c:	4b26      	ldr	r3, [pc, #152]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a25      	ldr	r2, [pc, #148]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000282:	f023 0310 	bic.w	r3, r3, #16
 8000286:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtRetransmissionMode<<NART);
 8000288:	4b23      	ldr	r3, [pc, #140]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	793a      	ldrb	r2, [r7, #4]
 800028e:	0112      	lsls	r2, r2, #4
 8000290:	4611      	mov	r1, r2
 8000292:	4a21      	ldr	r2, [pc, #132]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 8000294:	430b      	orrs	r3, r1
 8000296:	6013      	str	r3, [r2, #0]
		/*Receive FIFO locked mode*/
		CAN_MCR &=~(1<<RFLM);
 8000298:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1e      	ldr	r2, [pc, #120]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 800029e:	f023 0308 	bic.w	r3, r3, #8
 80002a2:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtReceiveLockedMode<<RFLM);
 80002a4:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	7e3a      	ldrb	r2, [r7, #24]
 80002aa:	00d2      	lsls	r2, r2, #3
 80002ac:	4611      	mov	r1, r2
 80002ae:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 80002b0:	430b      	orrs	r3, r1
 80002b2:	6013      	str	r3, [r2, #0]
		/*Transmit FIFO priority mode*/
		CAN_MCR &=~(1<<TXFP);
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a17      	ldr	r2, [pc, #92]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 80002ba:	f023 0304 	bic.w	r3, r3, #4
 80002be:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(ARG_udtTransmitPriority<<TXFP);
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	7f3a      	ldrb	r2, [r7, #28]
 80002c6:	0092      	lsls	r2, r2, #2
 80002c8:	4611      	mov	r1, r2
 80002ca:	4a13      	ldr	r2, [pc, #76]	; (8000318 <MCAN_stderrorInit+0x1a8>)
 80002cc:	430b      	orrs	r3, r1
 80002ce:	6013      	str	r3, [r2, #0]
		 *SyncJumpWidth
		 *Time Seg1
		 *Time Seg2
		 *Prescaler
		*/
		CAN_BTR = (	(ARG_udtCommunicationMode<<LBKM)|
 80002d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80002d4:	079a      	lsls	r2, r3, #30
					(ARG_udtSyncJumpWidth<<SJW)|
 80002d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80002da:	061b      	lsls	r3, r3, #24
		CAN_BTR = (	(ARG_udtCommunicationMode<<LBKM)|
 80002dc:	431a      	orrs	r2, r3
					(ARG_udtTime_Seg1<<TS1)|
 80002de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80002e2:	041b      	lsls	r3, r3, #16
					(ARG_udtSyncJumpWidth<<SJW)|
 80002e4:	431a      	orrs	r2, r3
					(ARG_udtTime_Seg2<<TS2)|
 80002e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80002ea:	051b      	lsls	r3, r3, #20
					(ARG_udtTime_Seg1<<TS1)|
 80002ec:	4313      	orrs	r3, r2
 80002ee:	4619      	mov	r1, r3
					((ARG_u32Prescaler-1)<<BRP));
 80002f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f2:	3b01      	subs	r3, #1
		CAN_BTR = (	(ARG_udtCommunicationMode<<LBKM)|
 80002f4:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <MCAN_stderrorInit+0x1b0>)
					(ARG_udtTime_Seg2<<TS2)|
 80002f6:	430b      	orrs	r3, r1
		CAN_BTR = (	(ARG_udtCommunicationMode<<LBKM)|
 80002f8:	6013      	str	r3, [r2, #0]
	
		MCAN_udtState=NODE_INIT_READY;
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MCAN_stderrorInit+0x1b4>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]

		L_stderrorError=E_OK;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <MCAN_stderrorInit+0x19a>
	}
	else
	{
		L_stderrorError=E_NOK;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bc90      	pop	{r4, r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40006400 	.word	0x40006400
 800031c:	40006404 	.word	0x40006404
 8000320:	4000641c 	.word	0x4000641c
 8000324:	2000001c 	.word	0x2000001c

08000328 <MCAN_stderrorCanStart>:

STD_error_t MCAN_stderrorCanStart
(
	void
)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	STD_error_t L_stderrorError=E_NOK;
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
	
	u16 L_u16TimeoutCounter =0;
 8000332:	2300      	movs	r3, #0
 8000334:	80bb      	strh	r3, [r7, #4]
	
	if(MCAN_udtState==NODE_INIT_READY)
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <MCAN_stderrorCanStart+0x64>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	2b01      	cmp	r3, #1
 800033e:	d11d      	bne.n	800037c <MCAN_stderrorCanStart+0x54>
	{
		/*Request to be Normal Mode*/
		CAN_MCR &=~(1<<INRQ);
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <MCAN_stderrorCanStart+0x68>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a12      	ldr	r2, [pc, #72]	; (8000390 <MCAN_stderrorCanStart+0x68>)
 8000346:	f023 0301 	bic.w	r3, r3, #1
 800034a:	6013      	str	r3, [r2, #0]


		/*Normal Mode acknowledge*/
		while(((1&(CAN_MSR>>INAK))!=0)&&(L_u16TimeoutCounter<MCAN_START_TIMEOUT))
 800034c:	bf00      	nop
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MCAN_stderrorCanStart+0x6c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d003      	beq.n	8000362 <MCAN_stderrorCanStart+0x3a>
 800035a:	88bb      	ldrh	r3, [r7, #4]
 800035c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000360:	d3f5      	bcc.n	800034e <MCAN_stderrorCanStart+0x26>
		{
			//L_u16TimeoutCounter++;
		}
		if(L_u16TimeoutCounter==MCAN_START_TIMEOUT)
 8000362:	88bb      	ldrh	r3, [r7, #4]
 8000364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000368:	d102      	bne.n	8000370 <MCAN_stderrorCanStart+0x48>
		{
			
			L_stderrorError=E_TIME_OUT;
 800036a:	2303      	movs	r3, #3
 800036c:	71fb      	strb	r3, [r7, #7]
 800036e:	e007      	b.n	8000380 <MCAN_stderrorCanStart+0x58>
			
		}
		else
		{
			MCAN_udtState=NODE_NORMAL_LISTENING;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MCAN_stderrorCanStart+0x64>)
 8000372:	2202      	movs	r2, #2
 8000374:	701a      	strb	r2, [r3, #0]
			L_stderrorError=E_OK;
 8000376:	2301      	movs	r3, #1
 8000378:	71fb      	strb	r3, [r7, #7]
 800037a:	e001      	b.n	8000380 <MCAN_stderrorCanStart+0x58>
		}
	}
	else
	{
		L_stderrorError=E_NOK;
 800037c:	2300      	movs	r3, #0
 800037e:	71fb      	strb	r3, [r7, #7]
	}
	return L_stderrorError;
 8000380:	79fb      	ldrb	r3, [r7, #7]
}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	2000001c 	.word	0x2000001c
 8000390:	40006400 	.word	0x40006400
 8000394:	40006404 	.word	0x40006404

08000398 <MCAN_u8EmptyMailboxNumber>:

static u8 MCAN_u8EmptyMailboxNumber
(
	void
)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
	u8 L_u8freemailbox=0;
 800039e:	2300      	movs	r3, #0
 80003a0:	71fb      	strb	r3, [r7, #7]
	
	if((1&(CAN_TSR>>TME0))!=0)
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MCAN_u8EmptyMailboxNumber+0x4c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d002      	beq.n	80003b4 <MCAN_u8EmptyMailboxNumber+0x1c>
	{
		L_u8freemailbox++;
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	3301      	adds	r3, #1
 80003b2:	71fb      	strb	r3, [r7, #7]
	else
	{
		
	}
	
	if((1&(CAN_TSR>>TME1))!=0)
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MCAN_u8EmptyMailboxNumber+0x4c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d002      	beq.n	80003c6 <MCAN_u8EmptyMailboxNumber+0x2e>
	{
		L_u8freemailbox++;
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	3301      	adds	r3, #1
 80003c4:	71fb      	strb	r3, [r7, #7]
	else
	{
		
	}
	
	if((1&(CAN_TSR>>TME2))!=0)
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <MCAN_u8EmptyMailboxNumber+0x4c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d002      	beq.n	80003d8 <MCAN_u8EmptyMailboxNumber+0x40>
	{
		L_u8freemailbox++;
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	3301      	adds	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
	else
	{
		
	}
	
	return L_u8freemailbox;
 80003d8:	79fb      	ldrb	r3, [r7, #7]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40006408 	.word	0x40006408

080003e8 <MCAN_u8ReadyMailBox>:

static u8 MCAN_u8ReadyMailBox
(
	void
)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	return (3&(CAN_TSR>>MAILBOX_CODE));
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <MCAN_u8ReadyMailBox+0x1c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	0e1b      	lsrs	r3, r3, #24
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	f003 0303 	and.w	r3, r3, #3
 80003f8:	b2db      	uxtb	r3, r3
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40006408 	.word	0x40006408

08000408 <MCAN_stderrorSend>:

STD_error_t MCAN_stderrorSend
(
	MCAN_TX_FRAME_S * ARG_pudtFrame
)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 8000410:	2300      	movs	r3, #0
 8000412:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pudtFrame != NULL_POINTER)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2b00      	cmp	r3, #0
 8000418:	f000 80bb 	beq.w	8000592 <MCAN_stderrorSend+0x18a>
	{
		u8 L_u8FreeTxMailboxesNumber=0;
 800041c:	2300      	movs	r3, #0
 800041e:	73bb      	strb	r3, [r7, #14]
		u8 L_u8TransmitMailbox=0;
 8000420:	2300      	movs	r3, #0
 8000422:	737b      	strb	r3, [r7, #13]
		
		if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 8000424:	4b5e      	ldr	r3, [pc, #376]	; (80005a0 <MCAN_stderrorSend+0x198>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	2b01      	cmp	r3, #1
 800042c:	d005      	beq.n	800043a <MCAN_stderrorSend+0x32>
 800042e:	4b5c      	ldr	r3, [pc, #368]	; (80005a0 <MCAN_stderrorSend+0x198>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b2db      	uxtb	r3, r3
 8000434:	2b02      	cmp	r3, #2
 8000436:	f040 80a9 	bne.w	800058c <MCAN_stderrorSend+0x184>
		{
			
			L_u8FreeTxMailboxesNumber=MCAN_u8EmptyMailboxNumber();
 800043a:	f7ff ffad 	bl	8000398 <MCAN_u8EmptyMailboxNumber>
 800043e:	4603      	mov	r3, r0
 8000440:	73bb      	strb	r3, [r7, #14]
			
			if(L_u8FreeTxMailboxesNumber>0)
 8000442:	7bbb      	ldrb	r3, [r7, #14]
 8000444:	2b00      	cmp	r3, #0
 8000446:	f000 809e 	beq.w	8000586 <MCAN_stderrorSend+0x17e>
			{
				
				
				if
				(
					((ARG_pudtFrame->udtID_Type==0)||(ARG_pudtFrame->udtID_Type==4))&&
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	791b      	ldrb	r3, [r3, #4]
				(
 800044e:	2b00      	cmp	r3, #0
 8000450:	d004      	beq.n	800045c <MCAN_stderrorSend+0x54>
					((ARG_pudtFrame->udtID_Type==0)||(ARG_pudtFrame->udtID_Type==4))&&
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	2b04      	cmp	r3, #4
 8000458:	f040 8092 	bne.w	8000580 <MCAN_stderrorSend+0x178>
					((ARG_pudtFrame->udtRTR_Type==0)||(ARG_pudtFrame->udtRTR_Type==2))&&
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
					((ARG_pudtFrame->udtID_Type==0)||(ARG_pudtFrame->udtID_Type==4))&&
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <MCAN_stderrorSend+0x66>
					((ARG_pudtFrame->udtRTR_Type==0)||(ARG_pudtFrame->udtRTR_Type==2))&&
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	2b02      	cmp	r3, #2
 800046a:	f040 8089 	bne.w	8000580 <MCAN_stderrorSend+0x178>
					(ARG_pudtFrame->udtDLC_Type<=8)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	799b      	ldrb	r3, [r3, #6]
					((ARG_pudtFrame->udtRTR_Type==0)||(ARG_pudtFrame->udtRTR_Type==2))&&
 8000472:	2b08      	cmp	r3, #8
 8000474:	f200 8084 	bhi.w	8000580 <MCAN_stderrorSend+0x178>
				)
				{
					L_u8TransmitMailbox=MCAN_u8ReadyMailBox();
 8000478:	f7ff ffb6 	bl	80003e8 <MCAN_u8ReadyMailBox>
 800047c:	4603      	mov	r3, r0
 800047e:	737b      	strb	r3, [r7, #13]
					ARG_pudtFrame->u8TxMailbox=(u8)1<<L_u8TransmitMailbox;
 8000480:	7b7b      	ldrb	r3, [r7, #13]
 8000482:	2201      	movs	r2, #1
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	b2da      	uxtb	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	731a      	strb	r2, [r3, #12]
					
					/*Fram Config MSG ID ,RTR and IDE */
					if(ARG_pudtFrame->udtID_Type==ID_STD)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d10e      	bne.n	80004b4 <MCAN_stderrorSend+0xac>
					{
						CAN_MailBox[L_u8TransmitMailbox].TIR=(ARG_pudtFrame->u32Msg_Id<<21)|(ARG_pudtFrame->udtRTR_Type);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	055a      	lsls	r2, r3, #21
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	795b      	ldrb	r3, [r3, #5]
 80004a0:	4619      	mov	r1, r3
 80004a2:	7b7b      	ldrb	r3, [r7, #13]
 80004a4:	011b      	lsls	r3, r3, #4
 80004a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004aa:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 80004ae:	430a      	orrs	r2, r1
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	e010      	b.n	80004d6 <MCAN_stderrorSend+0xce>
					}
					else
					{
						CAN_MailBox[L_u8TransmitMailbox].TIR=(ARG_pudtFrame->u32Msg_Id<<3)|(ARG_pudtFrame->udtRTR_Type)|(ARG_pudtFrame->udtID_Type);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	7952      	ldrb	r2, [r2, #5]
 80004be:	431a      	orrs	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	4619      	mov	r1, r3
 80004c6:	7b7b      	ldrb	r3, [r7, #13]
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004ce:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 80004d2:	430a      	orrs	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]
					}
					
					/*Fram Config DLC*/
					CAN_MailBox[L_u8TransmitMailbox].TDTR=ARG_pudtFrame->udtDLC_Type;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	799a      	ldrb	r2, [r3, #6]
 80004da:	7b7b      	ldrb	r3, [r7, #13]
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004e2:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 80004e6:	605a      	str	r2, [r3, #4]
					/*write data in mailbox reg*/
					CAN_MailBox[L_u8TransmitMailbox].TDHR=	(ARG_pudtFrame->pu8Payload[7]<<24)|
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	3307      	adds	r3, #7
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	061a      	lsls	r2, r3, #24
															(ARG_pudtFrame->pu8Payload[6]<<16)|
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	3306      	adds	r3, #6
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	041b      	lsls	r3, r3, #16
					CAN_MailBox[L_u8TransmitMailbox].TDHR=	(ARG_pudtFrame->pu8Payload[7]<<24)|
 80004fc:	431a      	orrs	r2, r3
															(ARG_pudtFrame->pu8Payload[5]<<8) |
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	3305      	adds	r3, #5
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	021b      	lsls	r3, r3, #8
															(ARG_pudtFrame->pu8Payload[6]<<16)|
 8000508:	4313      	orrs	r3, r2
															(ARG_pudtFrame->pu8Payload[4]<<0) ;
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	6892      	ldr	r2, [r2, #8]
 800050e:	3204      	adds	r2, #4
 8000510:	7812      	ldrb	r2, [r2, #0]
															(ARG_pudtFrame->pu8Payload[5]<<8) |
 8000512:	431a      	orrs	r2, r3
					CAN_MailBox[L_u8TransmitMailbox].TDHR=	(ARG_pudtFrame->pu8Payload[7]<<24)|
 8000514:	7b7b      	ldrb	r3, [r7, #13]
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800051c:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8000520:	60da      	str	r2, [r3, #12]
															
					CAN_MailBox[L_u8TransmitMailbox].TDLR=	(ARG_pudtFrame->pu8Payload[3]<<24)|
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	3303      	adds	r3, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	061a      	lsls	r2, r3, #24
															(ARG_pudtFrame->pu8Payload[2]<<16)|
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	3302      	adds	r3, #2
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	041b      	lsls	r3, r3, #16
					CAN_MailBox[L_u8TransmitMailbox].TDLR=	(ARG_pudtFrame->pu8Payload[3]<<24)|
 8000536:	431a      	orrs	r2, r3
															(ARG_pudtFrame->pu8Payload[1]<<8) |
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	3301      	adds	r3, #1
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	021b      	lsls	r3, r3, #8
															(ARG_pudtFrame->pu8Payload[2]<<16)|
 8000542:	4313      	orrs	r3, r2
															(ARG_pudtFrame->pu8Payload[0]<<0) ;
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	6892      	ldr	r2, [r2, #8]
 8000548:	7812      	ldrb	r2, [r2, #0]
															(ARG_pudtFrame->pu8Payload[1]<<8) |
 800054a:	431a      	orrs	r2, r3
					CAN_MailBox[L_u8TransmitMailbox].TDLR=	(ARG_pudtFrame->pu8Payload[3]<<24)|
 800054c:	7b7b      	ldrb	r3, [r7, #13]
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000554:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8000558:	609a      	str	r2, [r3, #8]
					/*Request Transmission*/
					CAN_MailBox[L_u8TransmitMailbox].TIR|=TXRQ;
 800055a:	7b7b      	ldrb	r3, [r7, #13]
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000562:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	7b7b      	ldrb	r3, [r7, #13]
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000570:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8000574:	f042 0201 	orr.w	r2, r2, #1
 8000578:	601a      	str	r2, [r3, #0]
					
					L_stderrorError=E_OK;
 800057a:	2301      	movs	r3, #1
 800057c:	73fb      	strb	r3, [r7, #15]
			if(L_u8FreeTxMailboxesNumber>0)
 800057e:	e00a      	b.n	8000596 <MCAN_stderrorSend+0x18e>
				}
				else
				{
					L_stderrorError=E_NOK;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
			if(L_u8FreeTxMailboxesNumber>0)
 8000584:	e007      	b.n	8000596 <MCAN_stderrorSend+0x18e>
				}
				
			}
			else
			{
				L_stderrorError=E_NOK;
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
			if(L_u8FreeTxMailboxesNumber>0)
 800058a:	e004      	b.n	8000596 <MCAN_stderrorSend+0x18e>
			}
			
		}
		else
		{
			L_stderrorError=E_NOK;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e001      	b.n	8000596 <MCAN_stderrorSend+0x18e>
		}
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 8000592:	2302      	movs	r3, #2
 8000594:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000001c 	.word	0x2000001c

080005a4 <MCAN_stderrorFilterInit>:

STD_error_t MCAN_stderrorFilterInit
(
	MCAN_Filter_Config_s * ARG_pudtFilter
)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	
	STD_error_t L_stderrorError=E_NOK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pudtFilter != NULL_POINTER)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	f000 80e2 	beq.w	800077c <MCAN_stderrorFilterInit+0x1d8>
	{
		if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 80005b8:	4b74      	ldr	r3, [pc, #464]	; (800078c <MCAN_stderrorFilterInit+0x1e8>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d005      	beq.n	80005ce <MCAN_stderrorFilterInit+0x2a>
 80005c2:	4b72      	ldr	r3, [pc, #456]	; (800078c <MCAN_stderrorFilterInit+0x1e8>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	f040 80d4 	bne.w	8000776 <MCAN_stderrorFilterInit+0x1d2>
		{
			if
			(
				(ARG_pudtFilter->udtFILTER_ACTIVATION_STATE<=1)&&
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
			(
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	f200 80cc 	bhi.w	8000770 <MCAN_stderrorFilterInit+0x1cc>
				(ARG_pudtFilter->udtSELECT_FILTER_BANK<=13)&&
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	785b      	ldrb	r3, [r3, #1]
				(ARG_pudtFilter->udtFILTER_ACTIVATION_STATE<=1)&&
 80005dc:	2b0d      	cmp	r3, #13
 80005de:	f200 80c7 	bhi.w	8000770 <MCAN_stderrorFilterInit+0x1cc>
				(ARG_pudtFilter->udtSET_FILTER_FIFO<=1)&&
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	789b      	ldrb	r3, [r3, #2]
				(ARG_pudtFilter->udtSELECT_FILTER_BANK<=13)&&
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	f200 80c2 	bhi.w	8000770 <MCAN_stderrorFilterInit+0x1cc>
				(ARG_pudtFilter->udtSET_FILTER_MODE<=1)&&
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7d1b      	ldrb	r3, [r3, #20]
				(ARG_pudtFilter->udtSET_FILTER_FIFO<=1)&&
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	f200 80bd 	bhi.w	8000770 <MCAN_stderrorFilterInit+0x1cc>
				(ARG_pudtFilter->udtSET_FILTER_SCALE<=1)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7d5b      	ldrb	r3, [r3, #21]
				(ARG_pudtFilter->udtSET_FILTER_MODE<=1)&&
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	f200 80b8 	bhi.w	8000770 <MCAN_stderrorFilterInit+0x1cc>
			)
			{
				/*enter initialisation Filter Mode*/
				CAN_FMR|=(1<<FINIT);
 8000600:	4b63      	ldr	r3, [pc, #396]	; (8000790 <MCAN_stderrorFilterInit+0x1ec>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a62      	ldr	r2, [pc, #392]	; (8000790 <MCAN_stderrorFilterInit+0x1ec>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6013      	str	r3, [r2, #0]
				
				/*Deactivation Filter*/
				CAN_FA1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 800060c:	4b61      	ldr	r3, [pc, #388]	; (8000794 <MCAN_stderrorFilterInit+0x1f0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7852      	ldrb	r2, [r2, #1]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	43d2      	mvns	r2, r2
 800061c:	4611      	mov	r1, r2
 800061e:	4a5d      	ldr	r2, [pc, #372]	; (8000794 <MCAN_stderrorFilterInit+0x1f0>)
 8000620:	400b      	ands	r3, r1
 8000622:	6013      	str	r3, [r2, #0]
				
				/*set scale mode 16bit or 32bit*/
				CAN_FS1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 8000624:	4b5c      	ldr	r3, [pc, #368]	; (8000798 <MCAN_stderrorFilterInit+0x1f4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7852      	ldrb	r2, [r2, #1]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a58      	ldr	r2, [pc, #352]	; (8000798 <MCAN_stderrorFilterInit+0x1f4>)
 8000638:	400b      	ands	r3, r1
 800063a:	6013      	str	r3, [r2, #0]
				CAN_FS1R|=(ARG_pudtFilter->udtSET_FILTER_SCALE<<ARG_pudtFilter->udtSELECT_FILTER_BANK);
 800063c:	4b56      	ldr	r3, [pc, #344]	; (8000798 <MCAN_stderrorFilterInit+0x1f4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	7d52      	ldrb	r2, [r2, #21]
 8000644:	4611      	mov	r1, r2
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	7852      	ldrb	r2, [r2, #1]
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	4611      	mov	r1, r2
 8000650:	4a51      	ldr	r2, [pc, #324]	; (8000798 <MCAN_stderrorFilterInit+0x1f4>)
 8000652:	430b      	orrs	r3, r1
 8000654:	6013      	str	r3, [r2, #0]
				
				if(ARG_pudtFilter->udtSET_FILTER_SCALE == FILTER_SCALE_16BIT)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7d5b      	ldrb	r3, [r3, #21]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d11a      	bne.n	8000694 <MCAN_stderrorFilterInit+0xf0>
				{
					/*set id and mask*/
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR1=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_LOW) << 16U) |
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	691b      	ldr	r3, [r3, #16]
 8000662:	0419      	lsls	r1, r3, #16
																			(0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_LOW);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	b29a      	uxth	r2, r3
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR1=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_LOW) << 16U) |
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	00d8      	lsls	r0, r3, #3
 8000670:	4b4a      	ldr	r3, [pc, #296]	; (800079c <MCAN_stderrorFilterInit+0x1f8>)
 8000672:	4403      	add	r3, r0
 8000674:	430a      	orrs	r2, r1
 8000676:	601a      	str	r2, [r3, #0]

					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR2=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_HIGH) << 16U) |
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0419      	lsls	r1, r3, #16
																			(0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_HIGH);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	b29a      	uxth	r2, r3
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR2=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_HIGH) << 16U) |
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	00d8      	lsls	r0, r3, #3
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <MCAN_stderrorFilterInit+0x1f8>)
 800068c:	4403      	add	r3, r0
 800068e:	430a      	orrs	r2, r1
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	e019      	b.n	80006c8 <MCAN_stderrorFilterInit+0x124>
				}
				else
				{
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR1=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_HIGH) << 16U) |
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	0419      	lsls	r1, r3, #16
																						(0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_LOW);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	b29a      	uxth	r2, r3
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR1=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_ID_HIGH) << 16U) |
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	00d8      	lsls	r0, r3, #3
 80006a6:	4b3d      	ldr	r3, [pc, #244]	; (800079c <MCAN_stderrorFilterInit+0x1f8>)
 80006a8:	4403      	add	r3, r0
 80006aa:	430a      	orrs	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]

					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR2=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_HIGH) << 16U) |
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	0419      	lsls	r1, r3, #16
																						(0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_LOW);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	b29a      	uxth	r2, r3
					CAN_FILTER[ARG_pudtFilter->udtSELECT_FILTER_BANK].FR2=	((0xFFFFU & (u32)ARG_pudtFilter->u32SET_FILTER_MASK_HIGH) << 16U) |
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	00d8      	lsls	r0, r3, #3
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <MCAN_stderrorFilterInit+0x1f8>)
 80006c2:	4403      	add	r3, r0
 80006c4:	430a      	orrs	r2, r1
 80006c6:	605a      	str	r2, [r3, #4]
				}
				
				
				/*set mask mode or list mode*/
				CAN_FM1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 80006c8:	4b35      	ldr	r3, [pc, #212]	; (80007a0 <MCAN_stderrorFilterInit+0x1fc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	7852      	ldrb	r2, [r2, #1]
 80006d0:	4611      	mov	r1, r2
 80006d2:	2201      	movs	r2, #1
 80006d4:	408a      	lsls	r2, r1
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	4611      	mov	r1, r2
 80006da:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <MCAN_stderrorFilterInit+0x1fc>)
 80006dc:	400b      	ands	r3, r1
 80006de:	6013      	str	r3, [r2, #0]
				CAN_FM1R|=(ARG_pudtFilter->udtSET_FILTER_MODE<<ARG_pudtFilter->udtSELECT_FILTER_BANK);
 80006e0:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <MCAN_stderrorFilterInit+0x1fc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7d12      	ldrb	r2, [r2, #20]
 80006e8:	4611      	mov	r1, r2
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	7852      	ldrb	r2, [r2, #1]
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <MCAN_stderrorFilterInit+0x1fc>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6013      	str	r3, [r2, #0]
				
				/*set Filter FIFO*/
				CAN_FFA1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MCAN_stderrorFilterInit+0x200>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	7852      	ldrb	r2, [r2, #1]
 8000702:	4611      	mov	r1, r2
 8000704:	2201      	movs	r2, #1
 8000706:	408a      	lsls	r2, r1
 8000708:	43d2      	mvns	r2, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <MCAN_stderrorFilterInit+0x200>)
 800070e:	400b      	ands	r3, r1
 8000710:	6013      	str	r3, [r2, #0]
				CAN_FFA1R|=(ARG_pudtFilter->udtSET_FILTER_FIFO<<ARG_pudtFilter->udtSELECT_FILTER_BANK);
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MCAN_stderrorFilterInit+0x200>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7892      	ldrb	r2, [r2, #2]
 800071a:	4611      	mov	r1, r2
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	7852      	ldrb	r2, [r2, #1]
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	4611      	mov	r1, r2
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MCAN_stderrorFilterInit+0x200>)
 8000728:	430b      	orrs	r3, r1
 800072a:	6013      	str	r3, [r2, #0]
				
				/*set Activation State*/
				CAN_FA1R&=(~(1<<ARG_pudtFilter->udtSELECT_FILTER_BANK));
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MCAN_stderrorFilterInit+0x1f0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	7852      	ldrb	r2, [r2, #1]
 8000734:	4611      	mov	r1, r2
 8000736:	2201      	movs	r2, #1
 8000738:	408a      	lsls	r2, r1
 800073a:	43d2      	mvns	r2, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MCAN_stderrorFilterInit+0x1f0>)
 8000740:	400b      	ands	r3, r1
 8000742:	6013      	str	r3, [r2, #0]
				CAN_FA1R|=(ARG_pudtFilter->udtFILTER_ACTIVATION_STATE<<ARG_pudtFilter->udtSELECT_FILTER_BANK);
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MCAN_stderrorFilterInit+0x1f0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	7852      	ldrb	r2, [r2, #1]
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <MCAN_stderrorFilterInit+0x1f0>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6013      	str	r3, [r2, #0]
				
				/*exit initialisation Filter Mode*/
				CAN_FMR&=(~(1<<FINIT));
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MCAN_stderrorFilterInit+0x1ec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <MCAN_stderrorFilterInit+0x1ec>)
 8000764:	f023 0301 	bic.w	r3, r3, #1
 8000768:	6013      	str	r3, [r2, #0]
				
				
				L_stderrorError=E_OK;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
			(
 800076e:	e007      	b.n	8000780 <MCAN_stderrorFilterInit+0x1dc>
			}
			else
			{
				L_stderrorError=E_NOK;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
			(
 8000774:	e004      	b.n	8000780 <MCAN_stderrorFilterInit+0x1dc>
			
			
		}
		else
		{
			L_stderrorError=E_NOK;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e001      	b.n	8000780 <MCAN_stderrorFilterInit+0x1dc>
		
		
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 800077c:	2302      	movs	r3, #2
 800077e:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	2000001c 	.word	0x2000001c
 8000790:	40006600 	.word	0x40006600
 8000794:	4000661c 	.word	0x4000661c
 8000798:	4000660c 	.word	0x4000660c
 800079c:	40006640 	.word	0x40006640
 80007a0:	40006604 	.word	0x40006604
 80007a4:	40006614 	.word	0x40006614

080007a8 <MCAN_u8FIFOMailboxNumber>:
/*is there a massage in fifo*/
static u8 MCAN_u8FIFOMailboxNumber
(
	u8 ARG_u8FIFOINDEX
)	
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	u8 L_u8FIFOMailboxNumber=0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
	
	if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MCAN_u8FIFOMailboxNumber+0x54>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d004      	beq.n	80007ca <MCAN_u8FIFOMailboxNumber+0x22>
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MCAN_u8FIFOMailboxNumber+0x54>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d112      	bne.n	80007f0 <MCAN_u8FIFOMailboxNumber+0x48>
	{
		
		if(ARG_u8FIFOINDEX == 0)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d106      	bne.n	80007de <MCAN_u8FIFOMailboxNumber+0x36>
		{
			L_u8FIFOMailboxNumber = CAN_RF0R & 3U;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MCAN_u8FIFOMailboxNumber+0x58>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f003 0303 	and.w	r3, r3, #3
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e008      	b.n	80007f0 <MCAN_u8FIFOMailboxNumber+0x48>
		}
		else if(ARG_u8FIFOINDEX == 1)
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d105      	bne.n	80007f0 <MCAN_u8FIFOMailboxNumber+0x48>
		{
			L_u8FIFOMailboxNumber = CAN_RF1R & 3U;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MCAN_u8FIFOMailboxNumber+0x5c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	f003 0303 	and.w	r3, r3, #3
 80007ee:	73fb      	strb	r3, [r7, #15]
	{
		
		
	}
	
	return L_u8FIFOMailboxNumber;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	2000001c 	.word	0x2000001c
 8000800:	4000640c 	.word	0x4000640c
 8000804:	40006410 	.word	0x40006410

08000808 <MCAN_stderrorReceive>:

STD_error_t MCAN_stderrorReceive
(
	MCAN_RX_FRAME_S * ARG_pudtFrame
)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	
	STD_error_t L_stderrorError=E_NOK;
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_pudtFrame !=NULL_POINTER)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	f000 80d5 	beq.w	80009c6 <MCAN_stderrorReceive+0x1be>
	{
		if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 800081c:	4b6d      	ldr	r3, [pc, #436]	; (80009d4 <MCAN_stderrorReceive+0x1cc>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b01      	cmp	r3, #1
 8000824:	d005      	beq.n	8000832 <MCAN_stderrorReceive+0x2a>
 8000826:	4b6b      	ldr	r3, [pc, #428]	; (80009d4 <MCAN_stderrorReceive+0x1cc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b02      	cmp	r3, #2
 800082e:	f040 80c7 	bne.w	80009c0 <MCAN_stderrorReceive+0x1b8>
		{
			/*is there a massage in fifo*/
			if(MCAN_u8FIFOMailboxNumber(ARG_pudtFrame->udtSET_FILTER_FIFO)!=0)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffb6 	bl	80007a8 <MCAN_u8FIFOMailboxNumber>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	f000 80bb 	beq.w	80009ba <MCAN_stderrorReceive+0x1b2>
			{
				/*GET IDE*/
				ARG_pudtFrame->udtID_Type=(1&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RIR)>>2));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	011a      	lsls	r2, r3, #4
 800084a:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 800084c:	4413      	add	r3, r2
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	089b      	lsrs	r3, r3, #2
 8000852:	b2db      	uxtb	r3, r3
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	721a      	strb	r2, [r3, #8]
				
				/*GET MSG ID*/
				if(ARG_pudtFrame->udtID_Type ==ID_STD)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7a1b      	ldrb	r3, [r3, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10b      	bne.n	800087e <MCAN_stderrorReceive+0x76>
				{
					ARG_pudtFrame->u32Msg_Id=((STIDMSG_FLAG)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RIR)>>21));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	011a      	lsls	r2, r3, #4
 800086c:	4b5a      	ldr	r3, [pc, #360]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 800086e:	4413      	add	r3, r2
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	0d5b      	lsrs	r3, r3, #21
 8000874:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	e00a      	b.n	8000894 <MCAN_stderrorReceive+0x8c>
				}
				else
				{
					ARG_pudtFrame->u32Msg_Id=((EXIDMSG_FLAG)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RIR)>>3));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	011a      	lsls	r2, r3, #4
 8000884:	4b54      	ldr	r3, [pc, #336]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 8000886:	4413      	add	r3, r2
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	f023 0207 	bic.w	r2, r3, #7
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	605a      	str	r2, [r3, #4]
				}
				/*GET RTR*/
				ARG_pudtFrame->udtRTR_Type=((2)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RIR)));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	011a      	lsls	r2, r3, #4
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 800089c:	4413      	add	r3, r2
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	725a      	strb	r2, [r3, #9]
				
				/*GET DLC*/
				ARG_pudtFrame->udtDLC_Type=((15)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDTR)));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	011a      	lsls	r2, r3, #4
 80008b2:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 80008b4:	4413      	add	r3, r2
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	729a      	strb	r2, [r3, #10]
				
				/*Get filter match index*/
				ARG_pudtFrame->u32FILTER_MATCH_INDEX=((0xFF)&((CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDTR)>>8));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	011a      	lsls	r2, r3, #4
 80008ca:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 80008cc:	4413      	add	r3, r2
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	60da      	str	r2, [r3, #12]
				
				/*get data*/
				ARG_pudtFrame->pu8Payload[0] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDLR >> 0));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	011a      	lsls	r2, r3, #4
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 80008e0:	4413      	add	r3, r2
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[1] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDLR >> 8));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	011a      	lsls	r2, r3, #4
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 80008f4:	4413      	add	r3, r2
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	0a1a      	lsrs	r2, r3, #8
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	3301      	adds	r3, #1
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[2] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDLR >> 16));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	011a      	lsls	r2, r3, #4
 800090a:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 800090c:	4413      	add	r3, r2
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	0c1a      	lsrs	r2, r3, #16
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	3302      	adds	r3, #2
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[3] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDLR >> 24));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	011a      	lsls	r2, r3, #4
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 8000924:	4413      	add	r3, r2
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	0e1a      	lsrs	r2, r3, #24
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	3303      	adds	r3, #3
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	701a      	strb	r2, [r3, #0]
				
				ARG_pudtFrame->pu8Payload[4] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDHR >> 0));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	011a      	lsls	r2, r3, #4
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 800093c:	4413      	add	r3, r2
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	3304      	adds	r3, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[5] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDHR >> 8));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	011a      	lsls	r2, r3, #4
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 8000952:	4413      	add	r3, r2
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	0a1a      	lsrs	r2, r3, #8
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	3305      	adds	r3, #5
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[6] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDHR >> 16));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	011a      	lsls	r2, r3, #4
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 800096a:	4413      	add	r3, r2
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	0c1a      	lsrs	r2, r3, #16
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	691b      	ldr	r3, [r3, #16]
 8000974:	3306      	adds	r3, #6
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	701a      	strb	r2, [r3, #0]
				ARG_pudtFrame->pu8Payload[7] = (u8)((0xFFU) & (CAN_FIFO_MailBox[ARG_pudtFrame->udtSET_FILTER_FIFO].RDHR >> 24));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	011a      	lsls	r2, r3, #4
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MCAN_stderrorReceive+0x1d0>)
 8000982:	4413      	add	r3, r2
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	0e1a      	lsrs	r2, r3, #24
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	3307      	adds	r3, #7
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	701a      	strb	r2, [r3, #0]

				/*Release fifo*/
				if (ARG_pudtFrame->udtSET_FILTER_FIFO == FILTER_FIFO0) 
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d106      	bne.n	80009a8 <MCAN_stderrorReceive+0x1a0>
				{
				  CAN_RF0R|=(1<<RFOM0);
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MCAN_stderrorReceive+0x1d4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <MCAN_stderrorReceive+0x1d4>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e005      	b.n	80009b4 <MCAN_stderrorReceive+0x1ac>
				}
				else 
				{
				  
				  CAN_RF1R|=(1<<RFOM0);
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MCAN_stderrorReceive+0x1d8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <MCAN_stderrorReceive+0x1d8>)
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	6013      	str	r3, [r2, #0]
				}
				
				L_stderrorError=E_OK;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
			if(MCAN_u8FIFOMailboxNumber(ARG_pudtFrame->udtSET_FILTER_FIFO)!=0)
 80009b8:	e007      	b.n	80009ca <MCAN_stderrorReceive+0x1c2>
				
			}
			else
			{
				L_stderrorError=E_NOK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	73fb      	strb	r3, [r7, #15]
			if(MCAN_u8FIFOMailboxNumber(ARG_pudtFrame->udtSET_FILTER_FIFO)!=0)
 80009be:	e004      	b.n	80009ca <MCAN_stderrorReceive+0x1c2>
			}
		}
		else
		{
			L_stderrorError=E_NOK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e001      	b.n	80009ca <MCAN_stderrorReceive+0x1c2>
		}
		
	}
	else
	{
		L_stderrorError=E_NULL_POINTER;
 80009c6:	2302      	movs	r3, #2
 80009c8:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]

}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000001c 	.word	0x2000001c
 80009d8:	400065b0 	.word	0x400065b0
 80009dc:	4000640c 	.word	0x4000640c
 80009e0:	40006410 	.word	0x40006410

080009e4 <MCAN_stderrorEnableInterrupt>:

STD_error_t MCAN_stderrorEnableInterrupt
(
	MCAN_interrupt_t  ARG_pudtFrame
)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]

	if(MCAN_udtState==NODE_INIT_READY||MCAN_udtState==NODE_NORMAL_LISTENING)
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MCAN_stderrorEnableInterrupt+0x58>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d004      	beq.n	8000a06 <MCAN_stderrorEnableInterrupt+0x22>
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MCAN_stderrorEnableInterrupt+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d112      	bne.n	8000a2c <MCAN_stderrorEnableInterrupt+0x48>
	{

		if((ARG_pudtFrame <=17))
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b11      	cmp	r3, #17
 8000a0a:	d80c      	bhi.n	8000a26 <MCAN_stderrorEnableInterrupt+0x42>
		{
			CAN_IER|=(1<<ARG_pudtFrame);
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MCAN_stderrorEnableInterrupt+0x5c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <MCAN_stderrorEnableInterrupt+0x5c>)
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6013      	str	r3, [r2, #0]
			L_stderrorError=E_OK;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
		if((ARG_pudtFrame <=17))
 8000a24:	e004      	b.n	8000a30 <MCAN_stderrorEnableInterrupt+0x4c>
		}
		else
		{
			L_stderrorError=E_NOK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
		if((ARG_pudtFrame <=17))
 8000a2a:	e001      	b.n	8000a30 <MCAN_stderrorEnableInterrupt+0x4c>
		}

	}
	else
	{
		L_stderrorError=E_NOK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
	}

	return L_stderrorError;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	2000001c 	.word	0x2000001c
 8000a40:	40006414 	.word	0x40006414

08000a44 <MCAN_RX0_IRQHandler>:
	}
}


void MCAN_RX0_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

	u8 L_u8errorcall0=0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	//u8 L_u8errorcall1=0;

	if(((1&(CAN_RF0R>>FMP))==1))
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MCAN_RX0_IRQHandler+0x7c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d112      	bne.n	8000a80 <MCAN_RX0_IRQHandler+0x3c>
	{
		if(((1&(CAN_RF0R>>FMP))==1))
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MCAN_RX0_IRQHandler+0x7c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10a      	bne.n	8000a7c <MCAN_RX0_IRQHandler+0x38>
		{
			if(NULL_POINTER!=pvoidfUserFunctionFIFO0)
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MCAN_RX0_IRQHandler+0x80>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <MCAN_RX0_IRQHandler+0x32>
			{

				pvoidfUserFunctionFIFO0();
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MCAN_RX0_IRQHandler+0x80>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4798      	blx	r3
 8000a74:	e004      	b.n	8000a80 <MCAN_RX0_IRQHandler+0x3c>

			}
			else
			{
				L_u8errorcall0=1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e001      	b.n	8000a80 <MCAN_RX0_IRQHandler+0x3c>
			}
		}
		else
		{
			L_u8errorcall0=1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	71fb      	strb	r3, [r7, #7]
	else
	{
		/*DO NOTHING*/
	}

	if((L_u8errorcall0==0))
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d018      	beq.n	8000ab8 <MCAN_RX0_IRQHandler+0x74>
	{
		/*DO NOTHING*/
	}
	else
	{
		if(NULL_POINTER!=pvoidfUserFunctionTXError)
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MCAN_RX0_IRQHandler+0x84>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d014      	beq.n	8000ab8 <MCAN_RX0_IRQHandler+0x74>
		{

			pvoidfUserFunctionFIFOError();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MCAN_RX0_IRQHandler+0x88>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4798      	blx	r3
			/*CLEAR error flag*/
			CAN_RF0R|=(3U<<FULL);
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MCAN_RX0_IRQHandler+0x7c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <MCAN_RX0_IRQHandler+0x7c>)
 8000a9a:	f043 0318 	orr.w	r3, r3, #24
 8000a9e:	6013      	str	r3, [r2, #0]
			CAN_ESR&=~(7U<<LEC);
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MCAN_RX0_IRQHandler+0x8c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <MCAN_RX0_IRQHandler+0x8c>)
 8000aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aaa:	6013      	str	r3, [r2, #0]
			CAN_MSR|=(1U<<ERRI);
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MCAN_RX0_IRQHandler+0x90>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <MCAN_RX0_IRQHandler+0x90>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6013      	str	r3, [r2, #0]
		else
		{
			/*Nothing*/
		}
	}
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	4000640c 	.word	0x4000640c
 8000ac4:	20000024 	.word	0x20000024
 8000ac8:	20000020 	.word	0x20000020
 8000acc:	20000028 	.word	0x20000028
 8000ad0:	40006418 	.word	0x40006418
 8000ad4:	40006404 	.word	0x40006404

08000ad8 <MCAN_stderrorSetCallBackFIFO0>:

STD_error_t MCAN_stderrorSetCallBackFIFO0
(
	void (*ARG_pvoidfUserFunction)(void)
)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
	if(NULL_POINTER!=ARG_pvoidfUserFunction)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d005      	beq.n	8000af6 <MCAN_stderrorSetCallBackFIFO0+0x1e>
	{
		pvoidfUserFunctionFIFO0=ARG_pvoidfUserFunction;
 8000aea:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <MCAN_stderrorSetCallBackFIFO0+0x30>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6013      	str	r3, [r2, #0]
		L_stderrorError=E_NOK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e001      	b.n	8000afa <MCAN_stderrorSetCallBackFIFO0+0x22>
	}
	else
	{
		L_stderrorError = E_NULL_POINTER;
 8000af6:	2302      	movs	r3, #2
 8000af8:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000024 	.word	0x20000024

08000b0c <MCAN_stderrorSetCallBackFIFOError>:

STD_error_t MCAN_stderrorSetCallBackFIFOError
(
	void (*ARG_pvoidfUserFunction)(void)
)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
	if(NULL_POINTER!=ARG_pvoidfUserFunction)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d005      	beq.n	8000b2a <MCAN_stderrorSetCallBackFIFOError+0x1e>
	{
		pvoidfUserFunctionFIFOError=ARG_pvoidfUserFunction;
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <MCAN_stderrorSetCallBackFIFOError+0x30>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6013      	str	r3, [r2, #0]
		L_stderrorError=E_NOK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e001      	b.n	8000b2e <MCAN_stderrorSetCallBackFIFOError+0x22>
	}
	else
	{
		L_stderrorError = E_NULL_POINTER;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000028 	.word	0x20000028

08000b40 <MGPIO_stderrorPinModeSelect>:
(
	MGPIO_Port_Name_t ARG_udtGPIOPort, 
	MGPIO_Pin_Number_t ARG_udtGPIOPin,
	MGPIO_Pin_Mode_t ARG_udtGPIOMode
)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	71bb      	strb	r3, [r7, #6]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	717b      	strb	r3, [r7, #5]
	
	STD_error_t L_stderrorError=E_NOK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtGPIOPort <= 4 && ARG_udtGPIOPin <= 15 && ARG_udtGPIOMode <= 15)
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	f200 812e 	bhi.w	8000dba <MGPIO_stderrorPinModeSelect+0x27a>
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	f200 812a 	bhi.w	8000dba <MGPIO_stderrorPinModeSelect+0x27a>
 8000b66:	797b      	ldrb	r3, [r7, #5]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	f200 8126 	bhi.w	8000dba <MGPIO_stderrorPinModeSelect+0x27a>
	{
		
		switch(ARG_udtGPIOPort)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	f200 8120 	bhi.w	8000db6 <MGPIO_stderrorPinModeSelect+0x276>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <MGPIO_stderrorPinModeSelect+0x3c>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b91 	.word	0x08000b91
 8000b80:	08000bff 	.word	0x08000bff
 8000b84:	08000c6d 	.word	0x08000c6d
 8000b88:	08000cdb 	.word	0x08000cdb
 8000b8c:	08000d49 	.word	0x08000d49
		{
			case GPIOA:
			{
				
				if(ARG_udtGPIOPin<=7)
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d816      	bhi.n	8000bc4 <MGPIO_stderrorPinModeSelect+0x84>
				{
					GPIOA_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000b96:	4b8d      	ldr	r3, [pc, #564]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4989      	ldr	r1, [pc, #548]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	600b      	str	r3, [r1, #0]
					GPIOA_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000bac:	4b87      	ldr	r3, [pc, #540]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	7979      	ldrb	r1, [r7, #5]
 8000bb2:	79ba      	ldrb	r2, [r7, #6]
 8000bb4:	0092      	lsls	r2, r2, #2
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a83      	ldr	r2, [pc, #524]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e019      	b.n	8000bf8 <MGPIO_stderrorPinModeSelect+0xb8>
				}
				else
				{
					GPIOA_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000bc4:	4b82      	ldr	r3, [pc, #520]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	497d      	ldr	r1, [pc, #500]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]
					GPIOA_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000bde:	4b7c      	ldr	r3, [pc, #496]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	7979      	ldrb	r1, [r7, #5]
 8000be4:	79ba      	ldrb	r2, [r7, #6]
 8000be6:	f002 0207 	and.w	r2, r2, #7
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4a77      	ldr	r2, [pc, #476]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
				break;
 8000bfc:	e0dc      	b.n	8000db8 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOB:
			{
				if(ARG_udtGPIOPin<=7)
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	d816      	bhi.n	8000c32 <MGPIO_stderrorPinModeSelect+0xf2>
				{
					GPIOB_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000c04:	4b71      	ldr	r3, [pc, #452]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	496d      	ldr	r1, [pc, #436]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
					GPIOB_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000c1a:	4b6c      	ldr	r3, [pc, #432]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	7979      	ldrb	r1, [r7, #5]
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	0092      	lsls	r2, r2, #2
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4a68      	ldr	r2, [pc, #416]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e019      	b.n	8000c66 <MGPIO_stderrorPinModeSelect+0x126>
				}
				else
				{
					GPIOB_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000c32:	4b67      	ldr	r3, [pc, #412]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	210f      	movs	r1, #15
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4962      	ldr	r1, [pc, #392]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
					GPIOB_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000c4c:	4b60      	ldr	r3, [pc, #384]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	7979      	ldrb	r1, [r7, #5]
 8000c52:	79ba      	ldrb	r2, [r7, #6]
 8000c54:	f002 0207 	and.w	r2, r2, #7
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4a5b      	ldr	r2, [pc, #364]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000c62:	430b      	orrs	r3, r1
 8000c64:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
				break;
 8000c6a:	e0a5      	b.n	8000db8 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOC:
			{
				if(ARG_udtGPIOPin<=7)
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d816      	bhi.n	8000ca0 <MGPIO_stderrorPinModeSelect+0x160>
				{
					GPIOC_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000c72:	4b56      	ldr	r3, [pc, #344]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4952      	ldr	r1, [pc, #328]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	600b      	str	r3, [r1, #0]
					GPIOC_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000c88:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	7979      	ldrb	r1, [r7, #5]
 8000c8e:	79ba      	ldrb	r2, [r7, #6]
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	4611      	mov	r1, r2
 8000c98:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e019      	b.n	8000cd4 <MGPIO_stderrorPinModeSelect+0x194>
				}
				else
				{
					GPIOC_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	210f      	movs	r1, #15
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	4946      	ldr	r1, [pc, #280]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]
					GPIOC_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000cba:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	7979      	ldrb	r1, [r7, #5]
 8000cc0:	79ba      	ldrb	r2, [r7, #6]
 8000cc2:	f002 0207 	and.w	r2, r2, #7
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
				break;
 8000cd8:	e06e      	b.n	8000db8 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOD:
			{
				if(ARG_udtGPIOPin<=7)
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	2b07      	cmp	r3, #7
 8000cde:	d816      	bhi.n	8000d0e <MGPIO_stderrorPinModeSelect+0x1ce>
				{
					GPIOD_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	210f      	movs	r1, #15
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4936      	ldr	r1, [pc, #216]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
					GPIOD_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000cf6:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	7979      	ldrb	r1, [r7, #5]
 8000cfc:	79ba      	ldrb	r2, [r7, #6]
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e019      	b.n	8000d42 <MGPIO_stderrorPinModeSelect+0x202>
				}
				else
				{
					GPIOD_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	492b      	ldr	r1, [pc, #172]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
					GPIOD_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	7979      	ldrb	r1, [r7, #5]
 8000d2e:	79ba      	ldrb	r2, [r7, #6]
 8000d30:	f002 0207 	and.w	r2, r2, #7
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
				break;
 8000d46:	e037      	b.n	8000db8 <MGPIO_stderrorPinModeSelect+0x278>
			}
			case GPIOE:
			{
				if(ARG_udtGPIOPin<=7)
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	d816      	bhi.n	8000d7c <MGPIO_stderrorPinModeSelect+0x23c>
				{
					GPIOE_CRL =(GPIOA_CRL&(~(15U<<(4*ARG_udtGPIOPin))));
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	210f      	movs	r1, #15
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	491b      	ldr	r1, [pc, #108]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
					GPIOE_CRL|=(ARG_udtGPIOMode<<(4*ARG_udtGPIOPin));
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	7979      	ldrb	r1, [r7, #5]
 8000d6a:	79ba      	ldrb	r2, [r7, #6]
 8000d6c:	0092      	lsls	r2, r2, #2
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	4611      	mov	r1, r2
 8000d74:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MGPIO_stderrorPinModeSelect+0x28c>)
 8000d76:	430b      	orrs	r3, r1
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e019      	b.n	8000db0 <MGPIO_stderrorPinModeSelect+0x270>
				}
				else
				{
					GPIOE_CRH =(GPIOA_CRH&(~(15U<<(4*(ARG_udtGPIOPin%8)))));
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	210f      	movs	r1, #15
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	490f      	ldr	r1, [pc, #60]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
					GPIOE_CRH|=(ARG_udtGPIOMode<<(4*(ARG_udtGPIOPin%8)));
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	7979      	ldrb	r1, [r7, #5]
 8000d9c:	79ba      	ldrb	r2, [r7, #6]
 8000d9e:	f002 0207 	and.w	r2, r2, #7
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	4611      	mov	r1, r2
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <MGPIO_stderrorPinModeSelect+0x290>)
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6013      	str	r3, [r2, #0]
				}
				L_stderrorError=E_OK;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
				break;
 8000db4:	e000      	b.n	8000db8 <MGPIO_stderrorPinModeSelect+0x278>
			}
			default :
			{
				/*nothing*/
				break;
 8000db6:	bf00      	nop
		switch(ARG_udtGPIOPort)
 8000db8:	e001      	b.n	8000dbe <MGPIO_stderrorPinModeSelect+0x27e>
			}
		}
	}
	else
	{
		L_stderrorError=E_NOK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010804 	.word	0x40010804

08000dd4 <MGPIO_stderrorSetPinValueBSSR>:
(
	MGPIO_Port_Name_t ARG_udtGPIOPort, 
	MGPIO_Pin_Number_t ARG_udtGPIOPin, 
	MGPIO_Output_State_t ARG_udtValue
)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	460b      	mov	r3, r1
 8000de0:	71bb      	strb	r3, [r7, #6]
 8000de2:	4613      	mov	r3, r2
 8000de4:	717b      	strb	r3, [r7, #5]
	
	STD_error_t L_stderrorError=E_NOK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtGPIOPort <= 7 && ARG_udtGPIOPin <= 15 && ARG_udtValue <= 1)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	f200 80b8 	bhi.w	8000f62 <MGPIO_stderrorSetPinValueBSSR+0x18e>
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	f200 80b4 	bhi.w	8000f62 <MGPIO_stderrorSetPinValueBSSR+0x18e>
 8000dfa:	797b      	ldrb	r3, [r7, #5]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	f200 80b0 	bhi.w	8000f62 <MGPIO_stderrorSetPinValueBSSR+0x18e>
	{
		
		if(ARG_udtValue==LOW)
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d157      	bne.n	8000eb8 <MGPIO_stderrorSetPinValueBSSR+0xe4>
		{
			
			switch(ARG_udtGPIOPort)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	f200 80a5 	bhi.w	8000f5a <MGPIO_stderrorSetPinValueBSSR+0x186>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <MGPIO_stderrorSetPinValueBSSR+0x44>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e2d 	.word	0x08000e2d
 8000e1c:	08000e49 	.word	0x08000e49
 8000e20:	08000e65 	.word	0x08000e65
 8000e24:	08000e81 	.word	0x08000e81
 8000e28:	08000e9d 	.word	0x08000e9d
			{
				case GPIOA:
				{
					GPIOA_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8000e2c:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	79ba      	ldrb	r2, [r7, #6]
 8000e32:	3210      	adds	r2, #16
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4a4d      	ldr	r2, [pc, #308]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000e42:	2301      	movs	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
					break;
 8000e46:	e08b      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOB:
				{
					GPIOB_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	79ba      	ldrb	r2, [r7, #6]
 8000e4e:	3210      	adds	r2, #16
 8000e50:	2101      	movs	r1, #1
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	4611      	mov	r1, r2
 8000e58:	4a46      	ldr	r2, [pc, #280]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
					break;
 8000e62:	e07d      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOC:
				{
					GPIOC_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8000e64:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	3210      	adds	r2, #16
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e72:	4611      	mov	r1, r2
 8000e74:	4a3f      	ldr	r2, [pc, #252]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e76:	430b      	orrs	r3, r1
 8000e78:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
					break;
 8000e7e:	e06f      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOD:
				{
					GPIOD_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8000e80:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	79ba      	ldrb	r2, [r7, #6]
 8000e86:	3210      	adds	r2, #16
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4a38      	ldr	r2, [pc, #224]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e92:	430b      	orrs	r3, r1
 8000e94:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
					break;
 8000e9a:	e061      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOE:
				{
					GPIOE_BSRR |=(1<<(ARG_udtGPIOPin+BSRR_OFFSET));
 8000e9c:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	79ba      	ldrb	r2, [r7, #6]
 8000ea2:	3210      	adds	r2, #16
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4a31      	ldr	r2, [pc, #196]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
					break;
 8000eb6:	e053      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
			}
			
		}
		else
		{
			switch(ARG_udtGPIOPort)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d84f      	bhi.n	8000f5e <MGPIO_stderrorSetPinValueBSSR+0x18a>
 8000ebe:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <MGPIO_stderrorSetPinValueBSSR+0xf0>)
 8000ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec4:	08000ed9 	.word	0x08000ed9
 8000ec8:	08000ef3 	.word	0x08000ef3
 8000ecc:	08000f0d 	.word	0x08000f0d
 8000ed0:	08000f27 	.word	0x08000f27
 8000ed4:	08000f41 	.word	0x08000f41
			{
				case GPIOA:
				{
					GPIOA_BSRR |=(1<<(ARG_udtGPIOPin));
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	79ba      	ldrb	r2, [r7, #6]
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
					break;
 8000ef0:	e036      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOB:
				{
					GPIOB_BSRR |=(1<<(ARG_udtGPIOPin));
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	79ba      	ldrb	r2, [r7, #6]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	4611      	mov	r1, r2
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000f02:	430b      	orrs	r3, r1
 8000f04:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
					break;
 8000f0a:	e029      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOC:
				{
					GPIOC_BSRR |=(1<<(ARG_udtGPIOPin));
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	79ba      	ldrb	r2, [r7, #6]
 8000f12:	2101      	movs	r1, #1
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
					break;
 8000f24:	e01c      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOD:
				{
					GPIOD_BSRR |=(1<<(ARG_udtGPIOPin));
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	79ba      	ldrb	r2, [r7, #6]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	4611      	mov	r1, r2
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000f36:	430b      	orrs	r3, r1
 8000f38:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
					break;
 8000f3e:	e00f      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
				}
				case GPIOE:
				{
					GPIOE_BSRR |=(1<<(ARG_udtGPIOPin));
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	79ba      	ldrb	r2, [r7, #6]
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <MGPIO_stderrorSetPinValueBSSR+0x1a0>)
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
					L_stderrorError=E_OK;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
					break;
 8000f58:	e002      	b.n	8000f60 <MGPIO_stderrorSetPinValueBSSR+0x18c>
					break;
 8000f5a:	bf00      	nop
 8000f5c:	e003      	b.n	8000f66 <MGPIO_stderrorSetPinValueBSSR+0x192>
				}
				default :
				{
					/*nothing*/
					break;
 8000f5e:	bf00      	nop
		if(ARG_udtValue==LOW)
 8000f60:	e001      	b.n	8000f66 <MGPIO_stderrorSetPinValueBSSR+0x192>
		}
		
	}
	else
	{
		L_stderrorError=E_NOK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40010810 	.word	0x40010810

08000f78 <MGPIO_stderrorSerialWireJTAGConfiguration>:

STD_error_t MGPIO_stderrorSerialWireJTAGConfiguration
(
	MGPIO_JTAG_Configuration_t ARG_udtJTAGConfiguration
)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]

	if((ARG_udtJTAGConfiguration<=2)||(ARG_udtJTAGConfiguration==4))
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d902      	bls.n	8000f92 <MGPIO_stderrorSerialWireJTAGConfiguration+0x1a>
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d110      	bne.n	8000fb4 <MGPIO_stderrorSerialWireJTAGConfiguration+0x3c>
	{
		/*Serial wire JTAG configuration*/
		AFIO_MAPR&=(~(SWJ_CFG_FLAG<<SWJ_CFG));
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MGPIO_stderrorSerialWireJTAGConfiguration+0x4c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <MGPIO_stderrorSerialWireJTAGConfiguration+0x4c>)
 8000f98:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f9c:	6013      	str	r3, [r2, #0]
		AFIO_MAPR|=(ARG_udtJTAGConfiguration<<SWJ_CFG);
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MGPIO_stderrorSerialWireJTAGConfiguration+0x4c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	0612      	lsls	r2, r2, #24
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <MGPIO_stderrorSerialWireJTAGConfiguration+0x4c>)
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6013      	str	r3, [r2, #0]

		L_stderrorError=E_OK;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e001      	b.n	8000fb8 <MGPIO_stderrorSerialWireJTAGConfiguration+0x40>

	}
	else
	{

		L_stderrorError=E_NOK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]

	}

	return L_stderrorError;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40010004 	.word	0x40010004

08000fc8 <MNVIC_stderrorEnableIRQ>:

STD_error_t MNVIC_stderrorEnableIRQ
(
	IRQ_t ARG_udtIRQn
)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtIRQn<=59)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b3b      	cmp	r3, #59	; 0x3b
 8000fda:	d80e      	bhi.n	8000ffa <MNVIC_stderrorEnableIRQ+0x32>
	{
		MNVIC->ISER[ARG_udtIRQn/32]= (1<<(ARG_udtIRQn%32));
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f103 	lsl.w	r1, r2, r3
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <MNVIC_stderrorEnableIRQ+0x44>)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	095b      	lsrs	r3, r3, #5
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		L_stderrorError=E_OK;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <MNVIC_stderrorEnableIRQ+0x36>
	}
	else
	{
		L_stderrorError=E_NOK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
	}
	return L_stderrorError;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <MRCC_stderrorInit>:
	RCC_ClkSrc_t 		ARG_udtClkSrc ,
	RCC_AHBPreScaler_t 	ARG_udtAHBPreScaler,
	RCC_APBPreScaler_t 	ARG_udtAPB1PreScaler,
	RCC_APBPreScaler_t 	ARG_udtAPB2PreScaler
)
{
 8001010:	b490      	push	{r4, r7}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	4603      	mov	r3, r0
 8001024:	71bb      	strb	r3, [r7, #6]
 8001026:	460b      	mov	r3, r1
 8001028:	717b      	strb	r3, [r7, #5]
 800102a:	4613      	mov	r3, r2
 800102c:	713b      	strb	r3, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
	
	if((ARG_udtClkSrc<=4)&&(((ARG_udtAHBPreScaler>=8)&&(ARG_udtAHBPreScaler<=15))||(ARG_udtAHBPreScaler==0))&&(((ARG_udtAPB1PreScaler>=3)&&(ARG_udtAPB1PreScaler<=7))||(ARG_udtAPB1PreScaler==0))&&(((ARG_udtAPB2PreScaler>=3)&&(ARG_udtAPB2PreScaler<=7))||(ARG_udtAPB2PreScaler==0)))
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b04      	cmp	r3, #4
 8001036:	f200 8137 	bhi.w	80012a8 <MRCC_stderrorInit+0x298>
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2b07      	cmp	r3, #7
 800103e:	d902      	bls.n	8001046 <MRCC_stderrorInit+0x36>
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	d903      	bls.n	800104e <MRCC_stderrorInit+0x3e>
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	2b00      	cmp	r3, #0
 800104a:	f040 812d 	bne.w	80012a8 <MRCC_stderrorInit+0x298>
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d902      	bls.n	800105a <MRCC_stderrorInit+0x4a>
 8001054:	797b      	ldrb	r3, [r7, #5]
 8001056:	2b07      	cmp	r3, #7
 8001058:	d903      	bls.n	8001062 <MRCC_stderrorInit+0x52>
 800105a:	797b      	ldrb	r3, [r7, #5]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 8123 	bne.w	80012a8 <MRCC_stderrorInit+0x298>
 8001062:	793b      	ldrb	r3, [r7, #4]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d902      	bls.n	800106e <MRCC_stderrorInit+0x5e>
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	2b07      	cmp	r3, #7
 800106c:	d903      	bls.n	8001076 <MRCC_stderrorInit+0x66>
 800106e:	793b      	ldrb	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	f040 8119 	bne.w	80012a8 <MRCC_stderrorInit+0x298>
	{
		switch(ARG_udtClkSrc)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b05      	cmp	r3, #5
 800107a:	f200 80e7 	bhi.w	800124c <MRCC_stderrorInit+0x23c>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <MRCC_stderrorInit+0x74>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	0800109d 	.word	0x0800109d
 8001088:	080010e3 	.word	0x080010e3
 800108c:	08001129 	.word	0x08001129
 8001090:	08001157 	.word	0x08001157
 8001094:	080011ad 	.word	0x080011ad
 8001098:	08001203 	.word	0x08001203
		{
			case HSE_Crystal:
			{
				MRCC_u8PllCk=0;
 800109c:	4b86      	ldr	r3, [pc, #536]	; (80012b8 <MRCC_stderrorInit+0x2a8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSE*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 80010a2:	4b86      	ldr	r3, [pc, #536]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a85      	ldr	r2, [pc, #532]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80010a8:	f023 0303 	bic.w	r3, r3, #3
 80010ac:	6013      	str	r3, [r2, #0]
				RCC_CFGR|=(HSE_FLAG);
 80010ae:	4b83      	ldr	r3, [pc, #524]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a82      	ldr	r2, [pc, #520]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6013      	str	r3, [r2, #0]
				/*Disable bypass*/
				RCC_CR	&=~(1U<<HSEBYP);
 80010ba:	4b81      	ldr	r3, [pc, #516]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a80      	ldr	r2, [pc, #512]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80010c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 80010c6:	4b7e      	ldr	r3, [pc, #504]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a7d      	ldr	r2, [pc, #500]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 80010d2:	bf00      	nop
 80010d4:	4b7a      	ldr	r3, [pc, #488]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f9      	beq.n	80010d4 <MRCC_stderrorInit+0xc4>
				break;
 80010e0:	e0b5      	b.n	800124e <MRCC_stderrorInit+0x23e>
			}
			case HSE_RC:
			{
				MRCC_u8PllCk=0;
 80010e2:	4b75      	ldr	r3, [pc, #468]	; (80012b8 <MRCC_stderrorInit+0x2a8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSE*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 80010e8:	4b74      	ldr	r3, [pc, #464]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a73      	ldr	r2, [pc, #460]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80010ee:	f023 0303 	bic.w	r3, r3, #3
 80010f2:	6013      	str	r3, [r2, #0]
				RCC_CFGR|=(HSE_FLAG);
 80010f4:	4b71      	ldr	r3, [pc, #452]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a70      	ldr	r2, [pc, #448]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
				/*Enable bypass*/
				RCC_CR|=(1U<<HSEBYP);
 8001100:	4b6f      	ldr	r3, [pc, #444]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a6e      	ldr	r2, [pc, #440]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110a:	6013      	str	r3, [r2, #0]
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 800110c:	4b6c      	ldr	r3, [pc, #432]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a6b      	ldr	r2, [pc, #428]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 8001118:	bf00      	nop
 800111a:	4b69      	ldr	r3, [pc, #420]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f9      	beq.n	800111a <MRCC_stderrorInit+0x10a>
				break;
 8001126:	e092      	b.n	800124e <MRCC_stderrorInit+0x23e>
			}
			case HSI:
			{
				MRCC_u8PllCk=0;
 8001128:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <MRCC_stderrorInit+0x2a8>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
				/*SYSCLK equal to HSI*/
				RCC_CFGR=(RCC_CFGR&(~(3U<<SW)));
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a62      	ldr	r2, [pc, #392]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001134:	f023 0303 	bic.w	r3, r3, #3
 8001138:	6013      	str	r3, [r2, #0]
				/*Enable HSI*/
				RCC_CR|=(1U<<HSION);
 800113a:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a60      	ldr	r2, [pc, #384]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSIRDY)&1))==0);
 8001146:	bf00      	nop
 8001148:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f9      	beq.n	8001148 <MRCC_stderrorInit+0x138>
				
				
				break;
 8001154:	e07b      	b.n	800124e <MRCC_stderrorInit+0x23e>
			}
			case PLL_HSE:
			{
				MRCC_u8PllCk=1;
 8001156:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <MRCC_stderrorInit+0x2a8>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a57      	ldr	r2, [pc, #348]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001166:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 8001168:	bf00      	nop
 800116a:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0e5b      	lsrs	r3, r3, #25
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b01      	cmp	r3, #1
 8001176:	d0f8      	beq.n	800116a <MRCC_stderrorInit+0x15a>
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 8001178:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 8001184:	bf00      	nop
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <MRCC_stderrorInit+0x176>
				/*PLL HSE SELECT*/
				RCC_CFGR|=(1U<<PLLSRC);
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a49      	ldr	r2, [pc, #292]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
				/*PLL NO DIVIDED HSE */
				RCC_CFGR&=(~(1<<PLLXTPRE));
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a46      	ldr	r2, [pc, #280]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80011a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a8:	6013      	str	r3, [r2, #0]
				break;
 80011aa:	e050      	b.n	800124e <MRCC_stderrorInit+0x23e>
			}
			case PLL_HSE_DIVIDED_BY_2:
			{
				MRCC_u8PllCk=1;
 80011ac:	4b42      	ldr	r3, [pc, #264]	; (80012b8 <MRCC_stderrorInit+0x2a8>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 80011b2:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80011b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011bc:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 80011be:	bf00      	nop
 80011c0:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0e5b      	lsrs	r3, r3, #25
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d0f8      	beq.n	80011c0 <MRCC_stderrorInit+0x1b0>
				/*Enable HSE*/
				RCC_CR|=(1U<<HSEON);
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a3b      	ldr	r2, [pc, #236]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSERDY)&1))==0);
 80011da:	bf00      	nop
 80011dc:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f9      	beq.n	80011dc <MRCC_stderrorInit+0x1cc>
				/*PLL HSE SELECT*/
				RCC_CFGR|=(1U<<PLLSRC);
 80011e8:	4b34      	ldr	r3, [pc, #208]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a33      	ldr	r2, [pc, #204]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
				/*PLL NO DIVIDED HSE */
				RCC_CFGR|=(1U<<PLLXTPRE);
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a30      	ldr	r2, [pc, #192]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 80011fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fe:	6013      	str	r3, [r2, #0]
				break;
 8001200:	e025      	b.n	800124e <MRCC_stderrorInit+0x23e>
			}
			case PLL_HSI_DIVIDED_BY_2:
			{
				MRCC_u8PllCk=1;
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MRCC_stderrorInit+0x2a8>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
				/*Disable PLL*/
				RCC_CR &=(~(1<<PLLRON));
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800120e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001212:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>PLLRDY)&1))==1);
 8001214:	bf00      	nop
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0e5b      	lsrs	r3, r3, #25
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b01      	cmp	r3, #1
 8001222:	d0f8      	beq.n	8001216 <MRCC_stderrorInit+0x206>
				/*Enable HSI*/
				RCC_CR|=(1U<<HSION);
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6013      	str	r3, [r2, #0]
				while((((RCC_CR>>HSIRDY)&1))==0);
 8001230:	bf00      	nop
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MRCC_stderrorInit+0x2b0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f9      	beq.n	8001232 <MRCC_stderrorInit+0x222>
				/*PLL HSI SELECT*/
				RCC_CFGR&=~(1U<<PLLSRC);
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
				break;
 800124a:	e000      	b.n	800124e <MRCC_stderrorInit+0x23e>
			}
			default : 
			{
				/*nothing*/
				break;
 800124c:	bf00      	nop
			}
		}
		
		/*AHB1*/
		RCC_CFGR=(RCC_CFGR&AHB_FLAG);
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001258:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAHBPreScaler<<HPRE);
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	79ba      	ldrb	r2, [r7, #6]
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	4611      	mov	r1, r2
 8001264:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001266:	430b      	orrs	r3, r1
 8001268:	6013      	str	r3, [r2, #0]
		/*APB1*/
		RCC_CFGR=(RCC_CFGR&APB1_FLAG);
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001270:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001274:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAPB1PreScaler<<PPRE1);
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	797a      	ldrb	r2, [r7, #5]
 800127c:	0212      	lsls	r2, r2, #8
 800127e:	4611      	mov	r1, r2
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001282:	430b      	orrs	r3, r1
 8001284:	6013      	str	r3, [r2, #0]
		/*APB2*/
		RCC_CFGR=(RCC_CFGR&APB2_FLAG);
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 800128c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001290:	6013      	str	r3, [r2, #0]
		RCC_CFGR|=(ARG_udtAPB2PreScaler<<PPRE2);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	793a      	ldrb	r2, [r7, #4]
 8001298:	02d2      	lsls	r2, r2, #11
 800129a:	4611      	mov	r1, r2
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <MRCC_stderrorInit+0x2ac>)
 800129e:	430b      	orrs	r3, r1
 80012a0:	6013      	str	r3, [r2, #0]
		
		L_stderrorError = E_OK;
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e001      	b.n	80012ac <MRCC_stderrorInit+0x29c>
	}
	else
	{
		L_stderrorError=E_NOK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc90      	pop	{r4, r7}
 80012b6:	4770      	bx	lr
 80012b8:	2000002c 	.word	0x2000002c
 80012bc:	40021004 	.word	0x40021004
 80012c0:	40021000 	.word	0x40021000

080012c4 <RCC_EnablePeripheralClk>:
STD_error_t RCC_EnablePeripheralClk
(
	RCC_Bus_t 			ARG_udtBus,
	RCC_PeripheraName_t ARG_udtPeripheraName
)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
	
	STD_error_t L_stderrorError=E_NOK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
	
	switch(ARG_udtBus)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d01e      	beq.n	800131c <RCC_EnablePeripheralClk+0x58>
 80012de:	2b02      	cmp	r3, #2
 80012e0:	dc28      	bgt.n	8001334 <RCC_EnablePeripheralClk+0x70>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <RCC_EnablePeripheralClk+0x28>
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d00c      	beq.n	8001304 <RCC_EnablePeripheralClk+0x40>
 80012ea:	e023      	b.n	8001334 <RCC_EnablePeripheralClk+0x70>
	{
		case AHB1:
		{
			RCC_AHBENR|=(1U<<ARG_udtPeripheraName);
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <RCC_EnablePeripheralClk+0x84>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	4913      	ldr	r1, [pc, #76]	; (8001348 <RCC_EnablePeripheralClk+0x84>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
			break;
 8001302:	e01a      	b.n	800133a <RCC_EnablePeripheralClk+0x76>
		}
		case APB1:
		{
			RCC_APB1ENR|=(1U<<ARG_udtPeripheraName);
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <RCC_EnablePeripheralClk+0x88>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <RCC_EnablePeripheralClk+0x88>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 8001316:	2301      	movs	r3, #1
 8001318:	73fb      	strb	r3, [r7, #15]
			break;
 800131a:	e00e      	b.n	800133a <RCC_EnablePeripheralClk+0x76>
		}
		case APB2:
		{
			RCC_APB2ENR|=(1U<<ARG_udtPeripheraName);
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <RCC_EnablePeripheralClk+0x8c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4909      	ldr	r1, [pc, #36]	; (8001350 <RCC_EnablePeripheralClk+0x8c>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
			L_stderrorError=E_OK;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
			break;
 8001332:	e002      	b.n	800133a <RCC_EnablePeripheralClk+0x76>
		}
		
		default:
		{
			L_stderrorError=E_NOK;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
			break;
 8001338:	bf00      	nop
		}
			
	}
	return L_stderrorError;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
	
}
 800133c:	4618      	mov	r0, r3
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021014 	.word	0x40021014
 800134c:	4002101c 	.word	0x4002101c
 8001350:	40021018 	.word	0x40021018

08001354 <MSYSTICK_stderrorInit>:

STD_error_t MSYSTICK_stderrorInit
(
	MSYSTICK_CLkSRC_t ARG_udtCLkSRC
)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	STD_error_t L_stderrorError=E_NOK;
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
	
	if(ARG_udtCLkSRC <=1)
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d810      	bhi.n	800138a <MSYSTICK_stderrorInit+0x36>
	{
		/*Disable SysTick peripheral and SysTick interrupt*/
		STK_CTRL =(STK_CTRL&(~STK_CTRL_Flag));
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MSYSTICK_stderrorInit+0x48>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0b      	ldr	r2, [pc, #44]	; (800139c <MSYSTICK_stderrorInit+0x48>)
 800136e:	f023 0307 	bic.w	r3, r3, #7
 8001372:	6013      	str	r3, [r2, #0]
		/*Select Clock Source*/
		STK_CTRL|=(ARG_udtCLkSRC<<2);
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MSYSTICK_stderrorInit+0x48>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4611      	mov	r1, r2
 800137e:	4a07      	ldr	r2, [pc, #28]	; (800139c <MSYSTICK_stderrorInit+0x48>)
 8001380:	430b      	orrs	r3, r1
 8001382:	6013      	str	r3, [r2, #0]
		L_stderrorError=E_OK;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e001      	b.n	800138e <MSYSTICK_stderrorInit+0x3a>
		
	}
	else
	{
		L_stderrorError=E_NOK;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
	}
	
	return L_stderrorError;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <MSYSTICK_stderrorSetBusyWait>:

STD_error_t MSYSTICK_stderrorSetBusyWait
(
	u32 ARG_u32Ticks
)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	STD_error_t L_stderrorError=E_NOK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
	STK_LOAD =ARG_u32Ticks-1;
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <MSYSTICK_stderrorSetBusyWait+0x48>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
	STK_VAL=0;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MSYSTICK_stderrorSetBusyWait+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
	STK_CTRL |=1U;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <MSYSTICK_stderrorSetBusyWait+0x50>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <MSYSTICK_stderrorSetBusyWait+0x50>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]
	while(((STK_CTRL>>16)&1)!=1);
 80013c6:	bf00      	nop
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MSYSTICK_stderrorSetBusyWait+0x50>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d1f8      	bne.n	80013c8 <MSYSTICK_stderrorSetBusyWait+0x28>
	STK_CTRL =0;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MSYSTICK_stderrorSetBusyWait+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
	return L_stderrorError;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	e000e014 	.word	0xe000e014
 80013ec:	e000e018 	.word	0xe000e018
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <MSYSTICK_DisableInterrupt>:

void MSYSTICK_DisableInterrupt
(
	void
)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	
	STK_CTRL &=(~(1<<1));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <MSYSTICK_DisableInterrupt+0x18>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <MSYSTICK_DisableInterrupt+0x18>)
 80013fe:	f023 0302 	bic.w	r3, r3, #2
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	e000e010 	.word	0xe000e010

08001410 <MSYSTICK_Delay_Ms>:

void MSYSTICK_Delay_Ms
( 
	u32 ARG_u32Time 
)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	MSYSTICK_DisableInterrupt();
 8001418:	f7ff ffec 	bl	80013f4 <MSYSTICK_DisableInterrupt>
	MSYSTICK_stderrorSetBusyWait(ARG_u32Time * 1000);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffba 	bl	80013a0 <MSYSTICK_stderrorSetBusyWait>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <SysTick_Handler>:
	MSYSTICK_stderrorSetBusyWait(ARG_u32Time);
}


void SysTick_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	
	if(MSYSTICK_u8SelectISR ==0)
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <SysTick_Handler+0x34>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d109      	bne.n	8001454 <SysTick_Handler+0x20>
	{
		
		MSYSTICK_pvoidfUserFunctionSysTick();
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <SysTick_Handler+0x38>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4798      	blx	r3
		STK_CTRL &=~(3U);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <SysTick_Handler+0x3c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <SysTick_Handler+0x3c>)
 800144c:	f023 0303 	bic.w	r3, r3, #3
 8001450:	6013      	str	r3, [r2, #0]
	}
	else
	{
		
	}
}
 8001452:	e006      	b.n	8001462 <SysTick_Handler+0x2e>
	else if(MSYSTICK_u8SelectISR ==1)
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Handler+0x34>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d102      	bne.n	8001462 <SysTick_Handler+0x2e>
		MSYSTICK_pvoidfUserFunctionSysTick();
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <SysTick_Handler+0x38>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4798      	blx	r3
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000034 	.word	0x20000034
 800146c:	20000030 	.word	0x20000030
 8001470:	e000e010 	.word	0xe000e010

08001474 <USB_LP_CAN_RX0_IRQHandler>:




void USB_LP_CAN_RX0_IRQHandler (void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	MCAN_RX0_IRQHandler();
 8001478:	f7ff fae4 	bl	8000a44 <MCAN_RX0_IRQHandler>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <main>:

int main(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	; 0x38
 8001484:	af08      	add	r7, sp, #32
	/*RCC CONFIG*/
	MRCC_stderrorInit(HSE_Crystal,AHB_PreScaler1,APB_PreScaler1,APB_PreScaler1);
 8001486:	2300      	movs	r3, #0
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fdbf 	bl	8001010 <MRCC_stderrorInit>
	RCC_EnablePeripheralClk(APB2, GPIOA_PER);
 8001492:	2102      	movs	r1, #2
 8001494:	2002      	movs	r0, #2
 8001496:	f7ff ff15 	bl	80012c4 <RCC_EnablePeripheralClk>
	RCC_EnablePeripheralClk(APB2, AFIOEN_PER);
 800149a:	2100      	movs	r1, #0
 800149c:	2002      	movs	r0, #2
 800149e:	f7ff ff11 	bl	80012c4 <RCC_EnablePeripheralClk>
	RCC_EnablePeripheralClk(APB1, PWREN_PER);
 80014a2:	211c      	movs	r1, #28
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff ff0d 	bl	80012c4 <RCC_EnablePeripheralClk>
	RCC_EnablePeripheralClk(APB1, CAN1EN_PER);
 80014aa:	2119      	movs	r1, #25
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff ff09 	bl	80012c4 <RCC_EnablePeripheralClk>

	/*Debugger*/
	MGPIO_stderrorSerialWireJTAGConfiguration(JTAG_DISABLED_AND_SW_ENABLED);
 80014b2:	2002      	movs	r0, #2
 80014b4:	f7ff fd60 	bl	8000f78 <MGPIO_stderrorSerialWireJTAGConfiguration>

	/*CAN CONFIG*/
	MGPIO_stderrorPinModeSelect(GPIOA, PIN11, INPUT_FLOAT);
 80014b8:	2204      	movs	r2, #4
 80014ba:	210b      	movs	r1, #11
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fb3f 	bl	8000b40 <MGPIO_stderrorPinModeSelect>
	MGPIO_stderrorPinModeSelect(GPIOA, PIN12, ALTFUN_PUSH_PULL_SPEED_50MHZ);
 80014c2:	220b      	movs	r2, #11
 80014c4:	210c      	movs	r1, #12
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff fb3a 	bl	8000b40 <MGPIO_stderrorPinModeSelect>

	/*Gpio pin*/
	MGPIO_stderrorPinModeSelect(GPIOA, PIN3, OUTPUT_PUSH_PULL_SPEED_10MHZ);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2103      	movs	r1, #3
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fb35 	bl	8000b40 <MGPIO_stderrorPinModeSelect>

	MCAN_stderrorInit
 80014d6:	2300      	movs	r3, #0
 80014d8:	9306      	str	r3, [sp, #24]
 80014da:	2301      	movs	r3, #1
 80014dc:	9305      	str	r3, [sp, #20]
 80014de:	230c      	movs	r3, #12
 80014e0:	9304      	str	r3, [sp, #16]
 80014e2:	2301      	movs	r3, #1
 80014e4:	9303      	str	r3, [sp, #12]
 80014e6:	2300      	movs	r3, #0
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2300      	movs	r3, #0
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	2300      	movs	r3, #0
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2300      	movs	r3, #0
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7fe fe39 	bl	8000170 <MCAN_stderrorInit>
			Ts1_13,
			Ts2_2,
			RJW_1
	);

	MSYSTICK_stderrorInit(AHB_DIV_8);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ff28 	bl	8001354 <MSYSTICK_stderrorInit>

#else

	/*filter one ECU3*/
	MCAN_Filter_Config_s ECU3_udtMsgFilter;
	ECU3_udtMsgFilter.udtFILTER_ACTIVATION_STATE=FILTER_ENABLED;
 8001504:	2301      	movs	r3, #1
 8001506:	703b      	strb	r3, [r7, #0]
	ECU3_udtMsgFilter.udtSELECT_FILTER_BANK=FILTER_BANK0;
 8001508:	2300      	movs	r3, #0
 800150a:	707b      	strb	r3, [r7, #1]
	ECU3_udtMsgFilter.udtSET_FILTER_FIFO=FILTER_FIFO0;
 800150c:	2300      	movs	r3, #0
 800150e:	70bb      	strb	r3, [r7, #2]
	ECU3_udtMsgFilter.u32SET_FILTER_ID_HIGH=(0x40)<<5;
 8001510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001514:	607b      	str	r3, [r7, #4]
	ECU3_udtMsgFilter.u32SET_FILTER_ID_LOW=(0x41)<<5;
 8001516:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800151a:	60bb      	str	r3, [r7, #8]
	ECU3_udtMsgFilter.u32SET_FILTER_MASK_HIGH=(0x42)<<5;
 800151c:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8001520:	60fb      	str	r3, [r7, #12]
	ECU3_udtMsgFilter.u32SET_FILTER_MASK_LOW=(0x43)<<5;
 8001522:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8001526:	613b      	str	r3, [r7, #16]
	ECU3_udtMsgFilter.udtSET_FILTER_MODE=FILTER_IDLIST;
 8001528:	2301      	movs	r3, #1
 800152a:	753b      	strb	r3, [r7, #20]
	ECU3_udtMsgFilter.udtSET_FILTER_SCALE=FILTER_SCALE_16BIT;
 800152c:	2300      	movs	r3, #0
 800152e:	757b      	strb	r3, [r7, #21]
//	ECU3_udtMsgFilter.u32SET_FILTER_MASK_LOW=0x00;
//	ECU3_udtMsgFilter.udtSET_FILTER_MODE=FILTER_IDMASK;
//	ECU3_udtMsgFilter.udtSET_FILTER_SCALE=FILTER_SCALE_32BIT;


	MCAN_stderrorFilterInit(&ECU3_udtMsgFilter);
 8001530:	463b      	mov	r3, r7
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f836 	bl	80005a4 <MCAN_stderrorFilterInit>
	ECU2_udtResivemasg.pu8Payload=RxData;


#else
	/*ESU 3 send */
	ECU3_udtTX_MsgFram.udtDLC_Type=DLC8byte;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <main+0x124>)
 800153a:	2208      	movs	r2, #8
 800153c:	719a      	strb	r2, [r3, #6]
	ECU3_udtTX_MsgFram.udtID_Type=ID_STD;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <main+0x124>)
 8001540:	2200      	movs	r2, #0
 8001542:	711a      	strb	r2, [r3, #4]
	ECU3_udtTX_MsgFram.udtRTR_Type=DATA_FRAME;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <main+0x124>)
 8001546:	2200      	movs	r2, #0
 8001548:	715a      	strb	r2, [r3, #5]
	ECU3_udtTX_MsgFram.u32Msg_Id=0x30;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <main+0x124>)
 800154c:	2230      	movs	r2, #48	; 0x30
 800154e:	601a      	str	r2, [r3, #0]
	ECU3_udtTX_MsgFram.pu8Payload=TxData;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <main+0x124>)
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <main+0x128>)
 8001554:	609a      	str	r2, [r3, #8]
	ECU3_udtTX_MsgFram.u8TxMailbox=10;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <main+0x124>)
 8001558:	220a      	movs	r2, #10
 800155a:	731a      	strb	r2, [r3, #12]

	ECU3_udtResivemasg.udtSET_FILTER_FIFO=FILTER_FIFO0;
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <main+0x12c>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
	ECU3_udtResivemasg.udtID_Type=ID_STD;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <main+0x12c>)
 8001564:	2200      	movs	r2, #0
 8001566:	721a      	strb	r2, [r3, #8]
	ECU3_udtResivemasg.pu8Payload=RxData;
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <main+0x12c>)
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <main+0x130>)
 800156c:	611a      	str	r2, [r3, #16]

#endif


	MCAN_stderrorSetCallBackFIFO0(can_Receive);
 800156e:	4811      	ldr	r0, [pc, #68]	; (80015b4 <main+0x134>)
 8001570:	f7ff fab2 	bl	8000ad8 <MCAN_stderrorSetCallBackFIFO0>
	MCAN_stderrorSetCallBackFIFOError(error_can);
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <main+0x138>)
 8001576:	f7ff fac9 	bl	8000b0c <MCAN_stderrorSetCallBackFIFOError>

	/*can interrupt & NVIC enable*/
	MCAN_stderrorEnableInterrupt(FIFO0_MESSAGE_PENDING);
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fa32 	bl	80009e4 <MCAN_stderrorEnableInterrupt>
	MNVIC_stderrorEnableIRQ(USB_HP_CAN_RX0);
 8001580:	2014      	movs	r0, #20
 8001582:	f7ff fd21 	bl	8000fc8 <MNVIC_stderrorEnableIRQ>



	/*start can*/
	if(MCAN_stderrorCanStart()!=E_OK)
 8001586:	f7fe fecf 	bl	8000328 <MCAN_stderrorCanStart>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d000      	beq.n	8001592 <main+0x112>
	{
		while(1)
 8001590:	e7fe      	b.n	8001590 <main+0x110>
		MCAN_stderrorSend(&ECU2_udtTX_MsgFram);
		//MSYSTICK_Delay_Ms(1000000);

		#else

		MCAN_stderrorSend(&ECU3_udtTX_MsgFram);
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <main+0x124>)
 8001594:	f7fe ff38 	bl	8000408 <MCAN_stderrorSend>
		MSYSTICK_Delay_Ms(500);
 8001598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800159c:	f7ff ff38 	bl	8001410 <MSYSTICK_Delay_Ms>
		MCAN_stderrorSend(&ECU3_udtTX_MsgFram);
 80015a0:	e7f7      	b.n	8001592 <main+0x112>
 80015a2:	bf00      	nop
 80015a4:	20000050 	.word	0x20000050
 80015a8:	2000003c 	.word	0x2000003c
 80015ac:	20000060 	.word	0x20000060
 80015b0:	20000044 	.word	0x20000044
 80015b4:	08001611 	.word	0x08001611
 80015b8:	0800164d 	.word	0x0800164d

080015bc <led_blink>:
	}
}


void led_blink(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	if(L_u32I ==100)
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <led_blink+0x4c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b64      	cmp	r3, #100	; 0x64
 80015c6:	d118      	bne.n	80015fa <led_blink+0x3e>
	{
		if(L_u8blink==0)
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <led_blink+0x50>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d108      	bne.n	80015e2 <led_blink+0x26>
		{
			MGPIO_stderrorSetPinValueBSSR(GPIOA, PIN3, HIGH);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2103      	movs	r1, #3
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff fbfd 	bl	8000dd4 <MGPIO_stderrorSetPinValueBSSR>
			L_u8blink=1;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <led_blink+0x50>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e007      	b.n	80015f2 <led_blink+0x36>
		}
		else
		{
			MGPIO_stderrorSetPinValueBSSR(GPIOA, PIN3, LOW);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2103      	movs	r1, #3
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff fbf4 	bl	8000dd4 <MGPIO_stderrorSetPinValueBSSR>
			L_u8blink=0;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <led_blink+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
		}
		L_u32I=0;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <led_blink+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		L_u32I++;
	}
}
 80015f8:	e004      	b.n	8001604 <led_blink+0x48>
		L_u32I++;
 80015fa:	4b03      	ldr	r3, [pc, #12]	; (8001608 <led_blink+0x4c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a01      	ldr	r2, [pc, #4]	; (8001608 <led_blink+0x4c>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000038 	.word	0x20000038
 800160c:	2000004c 	.word	0x2000004c

08001610 <can_Receive>:


void can_Receive(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

	}

#else

	MCAN_stderrorReceive(&ECU3_udtResivemasg);
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <can_Receive+0x38>)
 8001616:	f7ff f8f7 	bl	8000808 <MCAN_stderrorReceive>

	switch(ECU3_udtResivemasg.u32Msg_Id)
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <can_Receive+0x38>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	3b40      	subs	r3, #64	; 0x40
 8001620:	2b03      	cmp	r3, #3
 8001622:	d80f      	bhi.n	8001644 <can_Receive+0x34>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <can_Receive+0x1c>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	08001643 	.word	0x08001643
 8001634:	08001643 	.word	0x08001643
 8001638:	08001643 	.word	0x08001643
	{
		case 0x40:
		{
			led_blink();
 800163c:	f7ff ffbe 	bl	80015bc <led_blink>
			break;
 8001640:	e000      	b.n	8001644 <can_Receive+0x34>
		}
		case 0x41:
		{
			/*get Set Point*/
			break;
 8001642:	bf00      	nop

	}

#endif

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000060 	.word	0x20000060

0800164c <error_can>:

void error_can(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800165a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800165c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <LoopForever+0x6>)
  ldr r1, =_edata
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <LoopForever+0xe>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001678:	4c0a      	ldr	r4, [pc, #40]	; (80016a4 <LoopForever+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001686:	f000 f811 	bl	80016ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168a:	f7ff fef9 	bl	8001480 <main>

0800168e <LoopForever>:

LoopForever:
  b LoopForever
 800168e:	e7fe      	b.n	800168e <LoopForever>
  ldr   r0, =_estack
 8001690:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800169c:	08001714 	.word	0x08001714
  ldr r2, =_sbss
 80016a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80016a4:	20000074 	.word	0x20000074

080016a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>
	...

080016ac <__libc_init_array>:
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	2600      	movs	r6, #0
 80016b0:	4d0c      	ldr	r5, [pc, #48]	; (80016e4 <__libc_init_array+0x38>)
 80016b2:	4c0d      	ldr	r4, [pc, #52]	; (80016e8 <__libc_init_array+0x3c>)
 80016b4:	1b64      	subs	r4, r4, r5
 80016b6:	10a4      	asrs	r4, r4, #2
 80016b8:	42a6      	cmp	r6, r4
 80016ba:	d109      	bne.n	80016d0 <__libc_init_array+0x24>
 80016bc:	f000 f81a 	bl	80016f4 <_init>
 80016c0:	2600      	movs	r6, #0
 80016c2:	4d0a      	ldr	r5, [pc, #40]	; (80016ec <__libc_init_array+0x40>)
 80016c4:	4c0a      	ldr	r4, [pc, #40]	; (80016f0 <__libc_init_array+0x44>)
 80016c6:	1b64      	subs	r4, r4, r5
 80016c8:	10a4      	asrs	r4, r4, #2
 80016ca:	42a6      	cmp	r6, r4
 80016cc:	d105      	bne.n	80016da <__libc_init_array+0x2e>
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80016d4:	4798      	blx	r3
 80016d6:	3601      	adds	r6, #1
 80016d8:	e7ee      	b.n	80016b8 <__libc_init_array+0xc>
 80016da:	f855 3b04 	ldr.w	r3, [r5], #4
 80016de:	4798      	blx	r3
 80016e0:	3601      	adds	r6, #1
 80016e2:	e7f2      	b.n	80016ca <__libc_init_array+0x1e>
 80016e4:	0800170c 	.word	0x0800170c
 80016e8:	0800170c 	.word	0x0800170c
 80016ec:	0800170c 	.word	0x0800170c
 80016f0:	08001710 	.word	0x08001710

080016f4 <_init>:
 80016f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f6:	bf00      	nop
 80016f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016fa:	bc08      	pop	{r3}
 80016fc:	469e      	mov	lr, r3
 80016fe:	4770      	bx	lr

08001700 <_fini>:
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	bf00      	nop
 8001704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001706:	bc08      	pop	{r3}
 8001708:	469e      	mov	lr, r3
 800170a:	4770      	bx	lr
