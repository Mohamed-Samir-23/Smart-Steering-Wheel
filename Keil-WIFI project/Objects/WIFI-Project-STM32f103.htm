<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\WIFI-Project-STM32f103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\WIFI-Project-STM32f103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 16 13:30:58 2023
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; app_init &rArr; HESP_INIT &rArr; MUART_voidInit &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[36]">Connected</a> from swifi_program.o(i.Connected) referenced 2 times from swifi_program.o(.data)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[33]">ESP_TimeOutAlarm</a> from hesp_program.o(i.ESP_TimeOutAlarm) referenced from hesp_program.o(i.HESP_SEND_COMMAND)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2d]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2e]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[37]">SWIFI_voidIPDHandler</a> from swifi_program.o(i.SWIFI_voidIPDHandler) referenced from swifi_program.o(.data)
 <LI><a href="#[34]">SWIFI_voidKeysCapture</a> from swifi_program.o(i.SWIFI_voidKeysCapture) referenced from swifi_program.o(i.SWIFI_errStartCommunicationHandler)
 <LI><a href="#[34]">SWIFI_voidKeysCapture</a> from swifi_program.o(i.SWIFI_voidKeysCapture) referenced from swifi_program.o(i.SWIFI_voidMessageCapture)
 <LI><a href="#[35]">SWIFI_voidMessageCapture</a> from swifi_program.o(i.SWIFI_voidMessageCapture) referenced from swifi_program.o(i.SWIFI_voidIPDHandler)
 <LI><a href="#[9]">SysTick_Handler</a> from msystick_program.o(i.SysTick_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_ld.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from muart_program.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from muart_program.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2f]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_ld.o(.text)
 <LI><a href="#[30]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[38]">test</a> from main.o(i.test) referenced from main.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[39]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[48]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[71]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[72]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[73]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[74]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidKeysCapture
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidCommunicationHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInit
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInit
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInit
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInit
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInit
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInit
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[75]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[76]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[3e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[79]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>Connected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, swifi_program.o(i.Connected))
<BR>[Address Reference Count : 1]<UL><LI> swifi_program.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>CreateMsg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, swifi_program.o(i.CreateMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CreateMsg &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidMessageCapture
</UL>

<P><STRONG><a name="[63]"></a>GetUsartPointer</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, muart_program.o(i.GetUsartPointer))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidTransimit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInterruptEnable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInterruptDisable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_u8RXNEFlag
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_u16GetData
</UL>

<P><STRONG><a name="[4c]"></a>HESP_CALLBACK_INIT</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hesp_program.o(i.HESP_CALLBACK_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HESP_CALLBACK_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidSetCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errStartCommunicationHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidMessageCapture
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidIPDHandler
</UL>

<P><STRONG><a name="[4e]"></a>HESP_INIT</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hesp_program.o(i.HESP_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HESP_INIT &rArr; MUART_voidInit &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePeripheralClk
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSYSTICK_stderrorInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGPIO_stderrorPinModeSelect
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_voidInterruptDisable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_RESET
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[53]"></a>HESP_RESET</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hesp_program.o(i.HESP_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HESP_RESET &rArr; MGPIO_stderrorSetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSYSTICK_stderrorSetBusyWait
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGPIO_stderrorSetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_INIT
</UL>

<P><STRONG><a name="[57]"></a>HESP_SEND_COMMAND</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, hesp_program.o(i.HESP_SEND_COMMAND))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HESP_SEND_COMMAND &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidTransimit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_u8RXNEFlag
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_u16GetData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSYSTICK_stderrorSetPeriodiceInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errTurnOn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errGetConnectedSSID
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errCreateTCPServer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errConnectSSID
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errConfigSoftAP
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_errCheckESP
</UL>

<P><STRONG><a name="[5d]"></a>HESP_errCheckESP</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hesp_program.o(i.HESP_errCheckESP))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HESP_errCheckESP &rArr; HESP_SEND_COMMAND &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errTurnOn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errGetConnectedSSID
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errCreateTCPServer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errConnectSSID
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errConfigSoftAP
</UL>

<P><STRONG><a name="[52]"></a>HESP_voidInterruptDisable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hesp_program.o(i.HESP_voidInterruptDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HESP_voidInterruptDisable &rArr; MUART_voidInterruptDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInterruptDisable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MNVIC_vDisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_INIT
</UL>

<P><STRONG><a name="[60]"></a>HESP_voidInterruptEnable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hesp_program.o(i.HESP_voidInterruptEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HESP_voidInterruptEnable &rArr; MUART_voidInterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_voidInterruptEnable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MNVIC_vEnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errStartCommunicationHandler
</UL>

<P><STRONG><a name="[51]"></a>MGPIO_stderrorPinModeSelect</STRONG> (Thumb, 586 bytes, Stack size 16 bytes, mgpio_program.o(i.MGPIO_stderrorPinModeSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MGPIO_stderrorPinModeSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_INIT
</UL>

<P><STRONG><a name="[55]"></a>MGPIO_stderrorSetPinValue</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, mgpio_program.o(i.MGPIO_stderrorSetPinValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MGPIO_stderrorSetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_RESET
</UL>

<P><STRONG><a name="[5e]"></a>MNVIC_vDisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mnvic_program.o(i.MNVIC_vDisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MNVIC_vDisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_voidInterruptDisable
</UL>

<P><STRONG><a name="[61]"></a>MNVIC_vEnableIRQ</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, mnvic_program.o(i.MNVIC_vEnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MNVIC_vEnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_voidInterruptEnable
</UL>

<P><STRONG><a name="[4f]"></a>MSYSTICK_stderrorInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, msystick_program.o(i.MSYSTICK_stderrorInit))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_INIT
</UL>

<P><STRONG><a name="[56]"></a>MSYSTICK_stderrorSetBusyWait</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, msystick_program.o(i.MSYSTICK_stderrorSetBusyWait))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_RESET
</UL>

<P><STRONG><a name="[5a]"></a>MSYSTICK_stderrorSetPeriodiceInterval</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, msystick_program.o(i.MSYSTICK_stderrorSetPeriodiceInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSYSTICK_stderrorSetPeriodiceInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>

<P><STRONG><a name="[4b]"></a>MSYSTICK_voidStopTICK</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, msystick_program.o(i.MSYSTICK_voidStopTICK))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_TimeOutAlarm
</UL>

<P><STRONG><a name="[58]"></a>MUART_u16GetData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, muart_program.o(i.MUART_u16GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MUART_u16GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidMessageCapture
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidKeysCapture
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>

<P><STRONG><a name="[5b]"></a>MUART_u8RXNEFlag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, muart_program.o(i.MUART_u8RXNEFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MUART_u8RXNEFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>

<P><STRONG><a name="[54]"></a>MUART_voidInit</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, muart_program.o(i.MUART_voidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MUART_voidInit &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_INIT
</UL>

<P><STRONG><a name="[5f]"></a>MUART_voidInterruptDisable</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, muart_program.o(i.MUART_voidInterruptDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MUART_voidInterruptDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_voidInterruptDisable
</UL>

<P><STRONG><a name="[62]"></a>MUART_voidInterruptEnable</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, muart_program.o(i.MUART_voidInterruptEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MUART_voidInterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_voidInterruptEnable
</UL>

<P><STRONG><a name="[4d]"></a>MUART_voidSetCallBack</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, muart_program.o(i.MUART_voidSetCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_CALLBACK_INIT
</UL>

<P><STRONG><a name="[59]"></a>MUART_voidTransimit</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, muart_program.o(i.MUART_voidTransimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MUART_voidTransimit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>

<P><STRONG><a name="[50]"></a>RCC_EnablePeripheralClk</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mrcc_program.o(i.RCC_EnablePeripheralClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnablePeripheralClk
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_INIT
</UL>

<P><STRONG><a name="[64]"></a>SWIFI_errConfigSoftAP</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, swifi_program.o(i.SWIFI_errConfigSoftAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SWIFI_errConfigSoftAP &rArr; HESP_errCheckESP &rArr; HESP_SEND_COMMAND &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_errCheckESP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>SWIFI_errConnectSSID</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, swifi_program.o(i.SWIFI_errConnectSSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SWIFI_errConnectSSID &rArr; HESP_errCheckESP &rArr; HESP_SEND_COMMAND &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_errCheckESP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>SWIFI_errCreateTCPServer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, swifi_program.o(i.SWIFI_errCreateTCPServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SWIFI_errCreateTCPServer &rArr; HESP_errCheckESP &rArr; HESP_SEND_COMMAND &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_errCheckESP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>SWIFI_errGetConnectedSSID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swifi_program.o(i.SWIFI_errGetConnectedSSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SWIFI_errGetConnectedSSID &rArr; HESP_errCheckESP &rArr; HESP_SEND_COMMAND &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_errCheckESP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>SWIFI_errSetCaptureKeys</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, swifi_program.o(i.SWIFI_errSetCaptureKeys))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>SWIFI_errStartCommunicationHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, swifi_program.o(i.SWIFI_errStartCommunicationHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWIFI_errStartCommunicationHandler &rArr; HESP_voidInterruptEnable &rArr; MUART_voidInterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_voidInterruptEnable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_CALLBACK_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>SWIFI_errTurnOn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, swifi_program.o(i.SWIFI_errTurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SWIFI_errTurnOn &rArr; HESP_errCheckESP &rArr; HESP_SEND_COMMAND &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_errCheckESP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_SEND_COMMAND
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, msystick_program.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, muart_program.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, muart_program.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6d]"></a>app_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = app_init &rArr; HESP_INIT &rArr; MUART_voidInit &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePeripheralClk
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGPIO_stderrorPinModeSelect
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; app_init &rArr; HESP_INIT &rArr; MUART_voidInit &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errTurnOn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errStartCommunicationHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errSetCaptureKeys
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errGetConnectedSSID
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errCreateTCPServer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errConnectSSID
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_errConfigSoftAP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMsg
</UL>

<P><STRONG><a name="[38]"></a>test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.test))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[33]"></a>ESP_TimeOutAlarm</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hesp_program.o(i.ESP_TimeOutAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP_TimeOutAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSYSTICK_voidStopTICK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hesp_program.o(i.HESP_SEND_COMMAND)
</UL>
<P><STRONG><a name="[6a]"></a>SWIFI_voidCommunicationHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, swifi_program.o(i.SWIFI_voidCommunicationHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWIFI_voidCommunicationHandler &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidMessageCapture
</UL>

<P><STRONG><a name="[37]"></a>SWIFI_voidIPDHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, swifi_program.o(i.SWIFI_voidIPDHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SWIFI_voidIPDHandler &rArr; HESP_CALLBACK_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_CALLBACK_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swifi_program.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>SWIFI_voidKeysCapture</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, swifi_program.o(i.SWIFI_voidKeysCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWIFI_voidKeysCapture &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_u16GetData
</UL>
<BR>[Address Reference Count : 2]<UL><LI> swifi_program.o(i.SWIFI_errStartCommunicationHandler)
<LI> swifi_program.o(i.SWIFI_voidMessageCapture)
</UL>
<P><STRONG><a name="[35]"></a>SWIFI_voidMessageCapture</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, swifi_program.o(i.SWIFI_voidMessageCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SWIFI_voidMessageCapture &rArr; CreateMsg &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMsg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIFI_voidCommunicationHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUART_u16GetData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HESP_CALLBACK_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swifi_program.o(i.SWIFI_voidIPDHandler)
</UL>
<P><STRONG><a name="[6b]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6c]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
